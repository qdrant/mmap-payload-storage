<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1446" onload="init(evt)" viewBox="0 0 1200 1446" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1446" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1429.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1429.00"> </text><svg id="frames" x="10" width="1180" total_samples="2773"><g><title>_dl_map_object_deps (1 samples, 0.04%)</title><rect x="0.0000%" y="1285" width="0.0361%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1295.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.04%)</title><rect x="0.0000%" y="1269" width="0.0361%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1279.50"></text></g><g><title>openaux (1 samples, 0.04%)</title><rect x="0.0000%" y="1253" width="0.0361%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1263.50"></text></g><g><title>_dl_map_object (1 samples, 0.04%)</title><rect x="0.0000%" y="1237" width="0.0361%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1247.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.04%)</title><rect x="0.0000%" y="1221" width="0.0361%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1231.50"></text></g><g><title>_dl_map_segments (1 samples, 0.04%)</title><rect x="0.0000%" y="1205" width="0.0361%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1215.50"></text></g><g><title>__mmap64 (1 samples, 0.04%)</title><rect x="0.0000%" y="1189" width="0.0361%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1199.50"></text></g><g><title>__mmap64 (1 samples, 0.04%)</title><rect x="0.0000%" y="1173" width="0.0361%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1183.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="0.0000%" y="1157" width="0.0361%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1167.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="0.0000%" y="1141" width="0.0361%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1151.50"></text></g><g><title>x64_sys_call (1 samples, 0.04%)</title><rect x="0.0000%" y="1125" width="0.0361%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1135.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.04%)</title><rect x="0.0000%" y="1109" width="0.0361%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1119.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.04%)</title><rect x="0.0000%" y="1093" width="0.0361%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1103.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.04%)</title><rect x="0.0000%" y="1077" width="0.0361%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50"></text></g><g><title>do_mmap (1 samples, 0.04%)</title><rect x="0.0000%" y="1061" width="0.0361%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1071.50"></text></g><g><title>mmap_region (1 samples, 0.04%)</title><rect x="0.0000%" y="1045" width="0.0361%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1055.50"></text></g><g><title>do_vmi_munmap (1 samples, 0.04%)</title><rect x="0.0000%" y="1029" width="0.0361%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50"></text></g><g><title>do_vmi_align_munmap (1 samples, 0.04%)</title><rect x="0.0000%" y="1013" width="0.0361%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50"></text></g><g><title>__split_vma (1 samples, 0.04%)</title><rect x="0.0000%" y="997" width="0.0361%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>_dl_new_hash (1 samples, 0.04%)</title><rect x="0.0361%" y="1205" width="0.0361%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.2861%" y="1215.50"></text></g><g><title>_start (4 samples, 0.14%)</title><rect x="0.0000%" y="1365" width="0.1442%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1375.50"></text></g><g><title>_dl_start (4 samples, 0.14%)</title><rect x="0.0000%" y="1349" width="0.1442%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1359.50"></text></g><g><title>_dl_start_final (4 samples, 0.14%)</title><rect x="0.0000%" y="1333" width="0.1442%" height="15" fill="rgb(221,5,38)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1343.50"></text></g><g><title>_dl_sysdep_start (4 samples, 0.14%)</title><rect x="0.0000%" y="1317" width="0.1442%" height="15" fill="rgb(247,18,42)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1327.50"></text></g><g><title>dl_main (4 samples, 0.14%)</title><rect x="0.0000%" y="1301" width="0.1442%" height="15" fill="rgb(241,131,45)" fg:x="0" fg:w="4"/><text x="0.2500%" y="1311.50"></text></g><g><title>_dl_relocate_object (3 samples, 0.11%)</title><rect x="0.0361%" y="1285" width="0.1082%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="3"/><text x="0.2861%" y="1295.50"></text></g><g><title>elf_dynamic_do_Rela (3 samples, 0.11%)</title><rect x="0.0361%" y="1269" width="0.1082%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="3"/><text x="0.2861%" y="1279.50"></text></g><g><title>elf_machine_rela (3 samples, 0.11%)</title><rect x="0.0361%" y="1253" width="0.1082%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="3"/><text x="0.2861%" y="1263.50"></text></g><g><title>resolve_map (3 samples, 0.11%)</title><rect x="0.0361%" y="1237" width="0.1082%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="3"/><text x="0.2861%" y="1247.50"></text></g><g><title>_dl_lookup_symbol_x (3 samples, 0.11%)</title><rect x="0.0361%" y="1221" width="0.1082%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="3"/><text x="0.2861%" y="1231.50"></text></g><g><title>do_lookup_x (2 samples, 0.07%)</title><rect x="0.0721%" y="1205" width="0.0721%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="2"/><text x="0.3221%" y="1215.50"></text></g><g><title>gnuplot (5 samples, 0.18%)</title><rect x="0.0000%" y="1381" width="0.1803%" height="15" fill="rgb(229,88,8)" fg:x="0" fg:w="5"/><text x="0.2500%" y="1391.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="0.1442%" y="1365" width="0.0361%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1375.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="0.1442%" y="1349" width="0.0361%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1359.50"></text></g><g><title>x64_sys_call (1 samples, 0.04%)</title><rect x="0.1442%" y="1333" width="0.0361%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1343.50"></text></g><g><title>__x64_sys_exit_group (1 samples, 0.04%)</title><rect x="0.1442%" y="1317" width="0.0361%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1327.50"></text></g><g><title>do_group_exit (1 samples, 0.04%)</title><rect x="0.1442%" y="1301" width="0.0361%" height="15" fill="rgb(226,3,54)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1311.50"></text></g><g><title>do_exit (1 samples, 0.04%)</title><rect x="0.1442%" y="1285" width="0.0361%" height="15" fill="rgb(245,192,40)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1295.50"></text></g><g><title>exit_mm (1 samples, 0.04%)</title><rect x="0.1442%" y="1269" width="0.0361%" height="15" fill="rgb(238,167,29)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1279.50"></text></g><g><title>mmput (1 samples, 0.04%)</title><rect x="0.1442%" y="1253" width="0.0361%" height="15" fill="rgb(232,182,51)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1263.50"></text></g><g><title>__mmput (1 samples, 0.04%)</title><rect x="0.1442%" y="1237" width="0.0361%" height="15" fill="rgb(231,60,39)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1247.50"></text></g><g><title>exit_mmap (1 samples, 0.04%)</title><rect x="0.1442%" y="1221" width="0.0361%" height="15" fill="rgb(208,69,12)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1231.50"></text></g><g><title>unmap_vmas (1 samples, 0.04%)</title><rect x="0.1442%" y="1205" width="0.0361%" height="15" fill="rgb(235,93,37)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1215.50"></text></g><g><title>unmap_single_vma (1 samples, 0.04%)</title><rect x="0.1442%" y="1189" width="0.0361%" height="15" fill="rgb(213,116,39)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1199.50"></text></g><g><title>unmap_page_range (1 samples, 0.04%)</title><rect x="0.1442%" y="1173" width="0.0361%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1183.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.04%)</title><rect x="0.1442%" y="1157" width="0.0361%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1167.50"></text></g><g><title>zap_pte_range (1 samples, 0.04%)</title><rect x="0.1442%" y="1141" width="0.0361%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1151.50"></text></g><g><title>__pte_offset_map_lock (1 samples, 0.04%)</title><rect x="0.1442%" y="1125" width="0.0361%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1135.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.04%)</title><rect x="0.1442%" y="1109" width="0.0361%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="1"/><text x="0.3942%" y="1119.50"></text></g><g><title>perf-exec (5 samples, 0.18%)</title><rect x="0.1803%" y="1381" width="0.1803%" height="15" fill="rgb(206,27,48)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1391.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.18%)</title><rect x="0.1803%" y="1365" width="0.1803%" height="15" fill="rgb(225,35,8)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1375.50"></text></g><g><title>do_syscall_64 (5 samples, 0.18%)</title><rect x="0.1803%" y="1349" width="0.1803%" height="15" fill="rgb(250,213,24)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1359.50"></text></g><g><title>x64_sys_call (5 samples, 0.18%)</title><rect x="0.1803%" y="1333" width="0.1803%" height="15" fill="rgb(247,123,22)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1343.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.18%)</title><rect x="0.1803%" y="1317" width="0.1803%" height="15" fill="rgb(231,138,38)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1327.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.18%)</title><rect x="0.1803%" y="1301" width="0.1803%" height="15" fill="rgb(231,145,46)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1311.50"></text></g><g><title>bprm_execve (5 samples, 0.18%)</title><rect x="0.1803%" y="1285" width="0.1803%" height="15" fill="rgb(251,118,11)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1295.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.18%)</title><rect x="0.1803%" y="1269" width="0.1803%" height="15" fill="rgb(217,147,25)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1279.50"></text></g><g><title>exec_binprm (5 samples, 0.18%)</title><rect x="0.1803%" y="1253" width="0.1803%" height="15" fill="rgb(247,81,37)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1263.50"></text></g><g><title>search_binary_handler (5 samples, 0.18%)</title><rect x="0.1803%" y="1237" width="0.1803%" height="15" fill="rgb(209,12,38)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1247.50"></text></g><g><title>load_elf_binary (5 samples, 0.18%)</title><rect x="0.1803%" y="1221" width="0.1803%" height="15" fill="rgb(227,1,9)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1231.50"></text></g><g><title>begin_new_exec (5 samples, 0.18%)</title><rect x="0.1803%" y="1205" width="0.1803%" height="15" fill="rgb(248,47,43)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1215.50"></text></g><g><title>perf_event_exec (5 samples, 0.18%)</title><rect x="0.1803%" y="1189" width="0.1803%" height="15" fill="rgb(221,10,30)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1199.50"></text></g><g><title>perf_event_enable_on_exec (5 samples, 0.18%)</title><rect x="0.1803%" y="1173" width="0.1803%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1183.50"></text></g><g><title>ctx_resched (5 samples, 0.18%)</title><rect x="0.1803%" y="1157" width="0.1803%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1167.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.18%)</title><rect x="0.1803%" y="1141" width="0.1803%" height="15" fill="rgb(234,67,33)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1151.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.18%)</title><rect x="0.1803%" y="1125" width="0.1803%" height="15" fill="rgb(247,98,35)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1135.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.18%)</title><rect x="0.1803%" y="1109" width="0.1803%" height="15" fill="rgb(247,138,52)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1119.50"></text></g><g><title>native_write_msr (5 samples, 0.18%)</title><rect x="0.1803%" y="1093" width="0.1803%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="5"/><text x="0.4303%" y="1103.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="0.3606%" y="1349" width="0.1442%" height="15" fill="rgb(246,177,23)" fg:x="10" fg:w="4"/><text x="0.6106%" y="1359.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (5 samples, 0.18%)</title><rect x="0.5049%" y="1333" width="0.1803%" height="15" fill="rgb(230,62,27)" fg:x="14" fg:w="5"/><text x="0.7549%" y="1343.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.14%)</title><rect x="0.5409%" y="1317" width="0.1442%" height="15" fill="rgb(216,154,8)" fg:x="15" fg:w="4"/><text x="0.7909%" y="1327.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (4 samples, 0.14%)</title><rect x="0.5409%" y="1301" width="0.1442%" height="15" fill="rgb(244,35,45)" fg:x="15" fg:w="4"/><text x="0.7909%" y="1311.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.14%)</title><rect x="0.5409%" y="1285" width="0.1442%" height="15" fill="rgb(251,115,12)" fg:x="15" fg:w="4"/><text x="0.7909%" y="1295.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (4 samples, 0.14%)</title><rect x="0.5409%" y="1269" width="0.1442%" height="15" fill="rgb(240,54,50)" fg:x="15" fg:w="4"/><text x="0.7909%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.14%)</title><rect x="0.5409%" y="1253" width="0.1442%" height="15" fill="rgb(233,84,52)" fg:x="15" fg:w="4"/><text x="0.7909%" y="1263.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (4 samples, 0.14%)</title><rect x="0.5409%" y="1237" width="0.1442%" height="15" fill="rgb(207,117,47)" fg:x="15" fg:w="4"/><text x="0.7909%" y="1247.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (4 samples, 0.14%)</title><rect x="0.5409%" y="1221" width="0.1442%" height="15" fill="rgb(249,43,39)" fg:x="15" fg:w="4"/><text x="0.7909%" y="1231.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (7 samples, 0.25%)</title><rect x="0.5049%" y="1349" width="0.2524%" height="15" fill="rgb(209,38,44)" fg:x="14" fg:w="7"/><text x="0.7549%" y="1359.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.07%)</title><rect x="0.6852%" y="1333" width="0.0721%" height="15" fill="rgb(236,212,23)" fg:x="19" fg:w="2"/><text x="0.9352%" y="1343.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.11%)</title><rect x="0.7573%" y="1349" width="0.1082%" height="15" fill="rgb(242,79,21)" fg:x="21" fg:w="3"/><text x="1.0073%" y="1359.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.07%)</title><rect x="0.8655%" y="1349" width="0.0721%" height="15" fill="rgb(211,96,35)" fg:x="24" fg:w="2"/><text x="1.1155%" y="1359.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (1 samples, 0.04%)</title><rect x="1.1540%" y="1333" width="0.0361%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="1"/><text x="1.4040%" y="1343.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (2 samples, 0.07%)</title><rect x="1.1900%" y="1333" width="0.0721%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1343.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.07%)</title><rect x="1.1900%" y="1317" width="0.0721%" height="15" fill="rgb(208,190,38)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1327.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.07%)</title><rect x="1.1900%" y="1301" width="0.0721%" height="15" fill="rgb(235,213,38)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1311.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.07%)</title><rect x="1.1900%" y="1285" width="0.0721%" height="15" fill="rgb(237,122,38)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.07%)</title><rect x="1.1900%" y="1269" width="0.0721%" height="15" fill="rgb(244,218,35)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.07%)</title><rect x="1.1900%" y="1253" width="0.0721%" height="15" fill="rgb(240,68,47)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1263.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="1.1900%" y="1237" width="0.0721%" height="15" fill="rgb(210,16,53)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1247.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="1.1900%" y="1221" width="0.0721%" height="15" fill="rgb(235,124,12)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1231.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="1.1900%" y="1205" width="0.0721%" height="15" fill="rgb(224,169,11)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1215.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="1.1900%" y="1189" width="0.0721%" height="15" fill="rgb(250,166,2)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="1.1900%" y="1173" width="0.0721%" height="15" fill="rgb(242,216,29)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.07%)</title><rect x="1.1900%" y="1157" width="0.0721%" height="15" fill="rgb(230,116,27)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="1.1900%" y="1141" width="0.0721%" height="15" fill="rgb(228,99,48)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1151.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="1.1900%" y="1125" width="0.0721%" height="15" fill="rgb(253,11,6)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1135.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="1.1900%" y="1109" width="0.0721%" height="15" fill="rgb(247,143,39)" fg:x="33" fg:w="2"/><text x="1.4400%" y="1119.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (12 samples, 0.43%)</title><rect x="0.9376%" y="1349" width="0.4327%" height="15" fill="rgb(236,97,10)" fg:x="26" fg:w="12"/><text x="1.1876%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (3 samples, 0.11%)</title><rect x="1.2622%" y="1333" width="0.1082%" height="15" fill="rgb(233,208,19)" fg:x="35" fg:w="3"/><text x="1.5122%" y="1343.50"></text></g><g><title>[[heap]] (31 samples, 1.12%)</title><rect x="0.3606%" y="1365" width="1.1179%" height="15" fill="rgb(216,164,2)" fg:x="10" fg:w="31"/><text x="0.6106%" y="1375.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.11%)</title><rect x="1.3704%" y="1349" width="0.1082%" height="15" fill="rgb(220,129,5)" fg:x="38" fg:w="3"/><text x="1.6204%" y="1359.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.04%)</title><rect x="1.4425%" y="1333" width="0.0361%" height="15" fill="rgb(242,17,10)" fg:x="40" fg:w="1"/><text x="1.6925%" y="1343.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="1.4785%" y="1349" width="0.0361%" height="15" fill="rgb(242,107,0)" fg:x="41" fg:w="1"/><text x="1.7285%" y="1359.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 0.18%)</title><rect x="1.5146%" y="1349" width="0.1803%" height="15" fill="rgb(251,28,31)" fg:x="42" fg:w="5"/><text x="1.7646%" y="1359.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.04%)</title><rect x="1.6589%" y="1333" width="0.0361%" height="15" fill="rgb(233,223,10)" fg:x="46" fg:w="1"/><text x="1.9089%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.04%)</title><rect x="1.6589%" y="1317" width="0.0361%" height="15" fill="rgb(215,21,27)" fg:x="46" fg:w="1"/><text x="1.9089%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="1.6589%" y="1301" width="0.0361%" height="15" fill="rgb(232,23,21)" fg:x="46" fg:w="1"/><text x="1.9089%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.04%)</title><rect x="1.6589%" y="1285" width="0.0361%" height="15" fill="rgb(244,5,23)" fg:x="46" fg:w="1"/><text x="1.9089%" y="1295.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="1.6589%" y="1269" width="0.0361%" height="15" fill="rgb(226,81,46)" fg:x="46" fg:w="1"/><text x="1.9089%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (13 samples, 0.47%)</title><rect x="1.6949%" y="1349" width="0.4688%" height="15" fill="rgb(247,70,30)" fg:x="47" fg:w="13"/><text x="1.9449%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.22%)</title><rect x="1.9473%" y="1333" width="0.2164%" height="15" fill="rgb(212,68,19)" fg:x="54" fg:w="6"/><text x="2.1973%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.22%)</title><rect x="1.9473%" y="1317" width="0.2164%" height="15" fill="rgb(240,187,13)" fg:x="54" fg:w="6"/><text x="2.1973%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.22%)</title><rect x="1.9473%" y="1301" width="0.2164%" height="15" fill="rgb(223,113,26)" fg:x="54" fg:w="6"/><text x="2.1973%" y="1311.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.22%)</title><rect x="1.9473%" y="1285" width="0.2164%" height="15" fill="rgb(206,192,2)" fg:x="54" fg:w="6"/><text x="2.1973%" y="1295.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="2.1637%" y="1349" width="0.0361%" height="15" fill="rgb(241,108,4)" fg:x="60" fg:w="1"/><text x="2.4137%" y="1359.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="2.1998%" y="1349" width="0.0361%" height="15" fill="rgb(247,173,49)" fg:x="61" fg:w="1"/><text x="2.4498%" y="1359.50"></text></g><g><title>__libc_calloc (1 samples, 0.04%)</title><rect x="2.2358%" y="1349" width="0.0361%" height="15" fill="rgb(224,114,35)" fg:x="62" fg:w="1"/><text x="2.4858%" y="1359.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.18%)</title><rect x="2.2719%" y="1349" width="0.1803%" height="15" fill="rgb(245,159,27)" fg:x="63" fg:w="5"/><text x="2.5219%" y="1359.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="2.4522%" y="1349" width="0.0361%" height="15" fill="rgb(245,172,44)" fg:x="68" fg:w="1"/><text x="2.7022%" y="1359.50"></text></g><g><title>_int_free (3 samples, 0.11%)</title><rect x="2.4883%" y="1349" width="0.1082%" height="15" fill="rgb(236,23,11)" fg:x="69" fg:w="3"/><text x="2.7383%" y="1359.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.04%)</title><rect x="2.5965%" y="1349" width="0.0361%" height="15" fill="rgb(205,117,38)" fg:x="72" fg:w="1"/><text x="2.8465%" y="1359.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="2.6325%" y="1349" width="0.0721%" height="15" fill="rgb(237,72,25)" fg:x="73" fg:w="2"/><text x="2.8825%" y="1359.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (7 samples, 0.25%)</title><rect x="2.7047%" y="1349" width="0.2524%" height="15" fill="rgb(244,70,9)" fg:x="75" fg:w="7"/><text x="2.9547%" y="1359.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.04%)</title><rect x="2.9571%" y="1349" width="0.0361%" height="15" fill="rgb(217,125,39)" fg:x="82" fg:w="1"/><text x="3.2071%" y="1359.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="2.9931%" y="1349" width="0.0721%" height="15" fill="rgb(235,36,10)" fg:x="83" fg:w="2"/><text x="3.2431%" y="1359.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.04%)</title><rect x="3.0292%" y="1333" width="0.0361%" height="15" fill="rgb(251,123,47)" fg:x="84" fg:w="1"/><text x="3.2792%" y="1343.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.04%)</title><rect x="3.0292%" y="1317" width="0.0361%" height="15" fill="rgb(221,13,13)" fg:x="84" fg:w="1"/><text x="3.2792%" y="1327.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="3.0292%" y="1301" width="0.0361%" height="15" fill="rgb(238,131,9)" fg:x="84" fg:w="1"/><text x="3.2792%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7 samples, 0.25%)</title><rect x="3.0653%" y="1349" width="0.2524%" height="15" fill="rgb(211,50,8)" fg:x="85" fg:w="7"/><text x="3.3153%" y="1359.50"></text></g><g><title>lz4_flex::block::compress::handle_last_literals (1 samples, 0.04%)</title><rect x="3.3177%" y="1349" width="0.0361%" height="15" fill="rgb(245,182,24)" fg:x="92" fg:w="1"/><text x="3.5677%" y="1359.50"></text></g><g><title>mmap_payload_storage::payload::Payload::to_bytes (2 samples, 0.07%)</title><rect x="3.3538%" y="1349" width="0.0721%" height="15" fill="rgb(242,14,37)" fg:x="93" fg:w="2"/><text x="3.6038%" y="1359.50"></text></g><g><title>serde_cbor::ser::to_vec (1 samples, 0.04%)</title><rect x="3.3898%" y="1333" width="0.0361%" height="15" fill="rgb(246,228,12)" fg:x="94" fg:w="1"/><text x="3.6398%" y="1343.50"></text></g><g><title>&lt;serde_json::map::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="3.4259%" y="1301" width="0.0361%" height="15" fill="rgb(213,55,15)" fg:x="95" fg:w="1"/><text x="3.6759%" y="1311.50"></text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::ser::Serialize for mmap_payload_storage::payload::Payload&gt;::serialize (2 samples, 0.07%)</title><rect x="3.4259%" y="1349" width="0.0721%" height="15" fill="rgb(209,9,3)" fg:x="95" fg:w="2"/><text x="3.6759%" y="1359.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.07%)</title><rect x="3.4259%" y="1333" width="0.0721%" height="15" fill="rgb(230,59,30)" fg:x="95" fg:w="2"/><text x="3.6759%" y="1343.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::ser::Serialize&gt;::serialize (2 samples, 0.07%)</title><rect x="3.4259%" y="1317" width="0.0721%" height="15" fill="rgb(209,121,21)" fg:x="95" fg:w="2"/><text x="3.6759%" y="1327.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.04%)</title><rect x="3.4620%" y="1301" width="0.0361%" height="15" fill="rgb(220,109,13)" fg:x="96" fg:w="1"/><text x="3.7120%" y="1311.50"></text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_value (1 samples, 0.04%)</title><rect x="3.4620%" y="1285" width="0.0361%" height="15" fill="rgb(232,18,1)" fg:x="96" fg:w="1"/><text x="3.7120%" y="1295.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u16 (8 samples, 0.29%)</title><rect x="3.4980%" y="1349" width="0.2885%" height="15" fill="rgb(215,41,42)" fg:x="97" fg:w="8"/><text x="3.7480%" y="1359.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (2 samples, 0.07%)</title><rect x="3.7144%" y="1333" width="0.0721%" height="15" fill="rgb(224,123,36)" fg:x="103" fg:w="2"/><text x="3.9644%" y="1343.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u32 (8 samples, 0.29%)</title><rect x="3.7865%" y="1349" width="0.2885%" height="15" fill="rgb(240,125,3)" fg:x="105" fg:w="8"/><text x="4.0365%" y="1359.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (3 samples, 0.11%)</title><rect x="3.9668%" y="1333" width="0.1082%" height="15" fill="rgb(205,98,50)" fg:x="110" fg:w="3"/><text x="4.2168%" y="1343.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (5 samples, 0.18%)</title><rect x="4.0750%" y="1349" width="0.1803%" height="15" fill="rgb(205,185,37)" fg:x="113" fg:w="5"/><text x="4.3250%" y="1359.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="4.3996%" y="1317" width="0.0361%" height="15" fill="rgb(238,207,15)" fg:x="122" fg:w="1"/><text x="4.6496%" y="1327.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="4.4356%" y="1301" width="0.0361%" height="15" fill="rgb(213,199,42)" fg:x="123" fg:w="1"/><text x="4.6856%" y="1311.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (10 samples, 0.36%)</title><rect x="4.2553%" y="1349" width="0.3606%" height="15" fill="rgb(235,201,11)" fg:x="118" fg:w="10"/><text x="4.5053%" y="1359.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (6 samples, 0.22%)</title><rect x="4.3996%" y="1333" width="0.2164%" height="15" fill="rgb(207,46,11)" fg:x="122" fg:w="6"/><text x="4.6496%" y="1343.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (5 samples, 0.18%)</title><rect x="4.4356%" y="1317" width="0.1803%" height="15" fill="rgb(241,35,35)" fg:x="123" fg:w="5"/><text x="4.6856%" y="1327.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (4 samples, 0.14%)</title><rect x="4.4717%" y="1301" width="0.1442%" height="15" fill="rgb(243,32,47)" fg:x="124" fg:w="4"/><text x="4.7217%" y="1311.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (4 samples, 0.14%)</title><rect x="4.4717%" y="1285" width="0.1442%" height="15" fill="rgb(247,202,23)" fg:x="124" fg:w="4"/><text x="4.7217%" y="1295.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (24 samples, 0.87%)</title><rect x="4.6159%" y="1349" width="0.8655%" height="15" fill="rgb(219,102,11)" fg:x="128" fg:w="24"/><text x="4.8659%" y="1359.50"></text></g><g><title>&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (14 samples, 0.50%)</title><rect x="4.9766%" y="1333" width="0.5049%" height="15" fill="rgb(243,110,44)" fg:x="138" fg:w="14"/><text x="5.2266%" y="1343.50"></text></g><g><title>[[stack]] (112 samples, 4.04%)</title><rect x="1.4785%" y="1365" width="4.0389%" height="15" fill="rgb(222,74,54)" fg:x="41" fg:w="112"/><text x="1.7285%" y="1375.50">[[st..</text></g><g><title>std::sys::os_str::bytes::Buf::into_string (1 samples, 0.04%)</title><rect x="5.4814%" y="1349" width="0.0361%" height="15" fill="rgb(216,99,12)" fg:x="152" fg:w="1"/><text x="5.7314%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="6.1666%" y="1285" width="0.0361%" height="15" fill="rgb(226,22,26)" fg:x="171" fg:w="1"/><text x="6.4166%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="6.1666%" y="1269" width="0.0361%" height="15" fill="rgb(217,163,10)" fg:x="171" fg:w="1"/><text x="6.4166%" y="1279.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (22 samples, 0.79%)</title><rect x="5.5175%" y="1349" width="0.7934%" height="15" fill="rgb(213,25,53)" fg:x="153" fg:w="22"/><text x="5.7675%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.14%)</title><rect x="6.1666%" y="1333" width="0.1442%" height="15" fill="rgb(252,105,26)" fg:x="171" fg:w="4"/><text x="6.4166%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.14%)</title><rect x="6.1666%" y="1317" width="0.1442%" height="15" fill="rgb(220,39,43)" fg:x="171" fg:w="4"/><text x="6.4166%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.14%)</title><rect x="6.1666%" y="1301" width="0.1442%" height="15" fill="rgb(229,68,48)" fg:x="171" fg:w="4"/><text x="6.4166%" y="1311.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="6.2027%" y="1285" width="0.1082%" height="15" fill="rgb(252,8,32)" fg:x="172" fg:w="3"/><text x="6.4527%" y="1295.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.04%)</title><rect x="6.3109%" y="1349" width="0.0361%" height="15" fill="rgb(223,20,43)" fg:x="175" fg:w="1"/><text x="6.5609%" y="1359.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.04%)</title><rect x="6.3109%" y="1333" width="0.0361%" height="15" fill="rgb(229,81,49)" fg:x="175" fg:w="1"/><text x="6.5609%" y="1343.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.07%)</title><rect x="6.3469%" y="1349" width="0.0721%" height="15" fill="rgb(236,28,36)" fg:x="176" fg:w="2"/><text x="6.5969%" y="1359.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (1 samples, 0.04%)</title><rect x="6.4190%" y="1349" width="0.0361%" height="15" fill="rgb(249,185,26)" fg:x="178" fg:w="1"/><text x="6.6690%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (1 samples, 0.04%)</title><rect x="6.4551%" y="1349" width="0.0361%" height="15" fill="rgb(249,174,33)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1359.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (1 samples, 0.04%)</title><rect x="6.4551%" y="1333" width="0.0361%" height="15" fill="rgb(233,201,37)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1343.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.04%)</title><rect x="6.4551%" y="1317" width="0.0361%" height="15" fill="rgb(221,78,26)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1327.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.04%)</title><rect x="6.4551%" y="1301" width="0.0361%" height="15" fill="rgb(250,127,30)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.04%)</title><rect x="6.4551%" y="1285" width="0.0361%" height="15" fill="rgb(230,49,44)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.04%)</title><rect x="6.4551%" y="1269" width="0.0361%" height="15" fill="rgb(229,67,23)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.04%)</title><rect x="6.4551%" y="1253" width="0.0361%" height="15" fill="rgb(249,83,47)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1263.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.04%)</title><rect x="6.4551%" y="1237" width="0.0361%" height="15" fill="rgb(215,43,3)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1247.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.04%)</title><rect x="6.4551%" y="1221" width="0.0361%" height="15" fill="rgb(238,154,13)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="6.4551%" y="1205" width="0.0361%" height="15" fill="rgb(219,56,2)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="6.4551%" y="1189" width="0.0361%" height="15" fill="rgb(233,0,4)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.04%)</title><rect x="6.4551%" y="1173" width="0.0361%" height="15" fill="rgb(235,30,7)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="6.4551%" y="1157" width="0.0361%" height="15" fill="rgb(250,79,13)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1167.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="6.4551%" y="1141" width="0.0361%" height="15" fill="rgb(211,146,34)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1151.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="6.4551%" y="1125" width="0.0361%" height="15" fill="rgb(228,22,38)" fg:x="179" fg:w="1"/><text x="6.7051%" y="1135.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (2 samples, 0.07%)</title><rect x="6.4912%" y="1349" width="0.0721%" height="15" fill="rgb(235,168,5)" fg:x="180" fg:w="2"/><text x="6.7412%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.07%)</title><rect x="6.5633%" y="1301" width="0.0721%" height="15" fill="rgb(221,155,16)" fg:x="182" fg:w="2"/><text x="6.8133%" y="1311.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (9 samples, 0.32%)</title><rect x="6.5633%" y="1349" width="0.3246%" height="15" fill="rgb(215,215,53)" fg:x="182" fg:w="9"/><text x="6.8133%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_array::_{{closure}} (9 samples, 0.32%)</title><rect x="6.5633%" y="1333" width="0.3246%" height="15" fill="rgb(223,4,10)" fg:x="182" fg:w="9"/><text x="6.8133%" y="1343.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (9 samples, 0.32%)</title><rect x="6.5633%" y="1317" width="0.3246%" height="15" fill="rgb(234,103,6)" fg:x="182" fg:w="9"/><text x="6.8133%" y="1327.50"></text></g><g><title>serde::de::SeqAccess::next_element (7 samples, 0.25%)</title><rect x="6.6354%" y="1301" width="0.2524%" height="15" fill="rgb(227,97,0)" fg:x="184" fg:w="7"/><text x="6.8854%" y="1311.50"></text></g><g><title>&lt;serde_cbor::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (7 samples, 0.25%)</title><rect x="6.6354%" y="1285" width="0.2524%" height="15" fill="rgb(234,150,53)" fg:x="184" fg:w="7"/><text x="6.8854%" y="1295.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (7 samples, 0.25%)</title><rect x="6.6354%" y="1269" width="0.2524%" height="15" fill="rgb(228,201,54)" fg:x="184" fg:w="7"/><text x="6.8854%" y="1279.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (7 samples, 0.25%)</title><rect x="6.6354%" y="1253" width="0.2524%" height="15" fill="rgb(222,22,37)" fg:x="184" fg:w="7"/><text x="6.8854%" y="1263.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (7 samples, 0.25%)</title><rect x="6.6354%" y="1237" width="0.2524%" height="15" fill="rgb(237,53,32)" fg:x="184" fg:w="7"/><text x="6.8854%" y="1247.50"></text></g><g><title>[anon] (39 samples, 1.41%)</title><rect x="5.5175%" y="1365" width="1.4064%" height="15" fill="rgb(233,25,53)" fg:x="153" fg:w="39"/><text x="5.7675%" y="1375.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (1 samples, 0.04%)</title><rect x="6.8878%" y="1349" width="0.0361%" height="15" fill="rgb(210,40,34)" fg:x="191" fg:w="1"/><text x="7.1378%" y="1359.50"></text></g><g><title>[libc.so.6] (1 samples, 0.04%)</title><rect x="6.9239%" y="1365" width="0.0361%" height="15" fill="rgb(241,220,44)" fg:x="192" fg:w="1"/><text x="7.1739%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.04%)</title><rect x="6.9239%" y="1349" width="0.0361%" height="15" fill="rgb(235,28,35)" fg:x="192" fg:w="1"/><text x="7.1739%" y="1359.50"></text></g><g><title>[storage_bench-aaa5d03fce0f47ed] (2 samples, 0.07%)</title><rect x="6.9600%" y="1365" width="0.0721%" height="15" fill="rgb(210,56,17)" fg:x="193" fg:w="2"/><text x="7.2100%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (2 samples, 0.07%)</title><rect x="6.9600%" y="1349" width="0.0721%" height="15" fill="rgb(224,130,29)" fg:x="193" fg:w="2"/><text x="7.2100%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (22 samples, 0.79%)</title><rect x="7.0321%" y="1349" width="0.7934%" height="15" fill="rgb(235,212,8)" fg:x="195" fg:w="22"/><text x="7.2821%" y="1359.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.11%)</title><rect x="7.8255%" y="1349" width="0.1082%" height="15" fill="rgb(223,33,50)" fg:x="217" fg:w="3"/><text x="8.0755%" y="1359.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.04%)</title><rect x="7.9336%" y="1349" width="0.0361%" height="15" fill="rgb(219,149,13)" fg:x="220" fg:w="1"/><text x="8.1836%" y="1359.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.11%)</title><rect x="7.9697%" y="1349" width="0.1082%" height="15" fill="rgb(250,156,29)" fg:x="221" fg:w="3"/><text x="8.2197%" y="1359.50"></text></g><g><title>sync_regs (1 samples, 0.04%)</title><rect x="8.0418%" y="1333" width="0.0361%" height="15" fill="rgb(216,193,19)" fg:x="223" fg:w="1"/><text x="8.2918%" y="1343.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.11%)</title><rect x="8.0779%" y="1349" width="0.1082%" height="15" fill="rgb(216,135,14)" fg:x="224" fg:w="3"/><text x="8.3279%" y="1359.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.11%)</title><rect x="8.0779%" y="1333" width="0.1082%" height="15" fill="rgb(241,47,5)" fg:x="224" fg:w="3"/><text x="8.3279%" y="1343.50"></text></g><g><title>__spawni_child (1 samples, 0.04%)</title><rect x="8.1861%" y="1349" width="0.0361%" height="15" fill="rgb(233,42,35)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1359.50"></text></g><g><title>__execvpex (1 samples, 0.04%)</title><rect x="8.1861%" y="1333" width="0.0361%" height="15" fill="rgb(231,13,6)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1343.50"></text></g><g><title>__execvpe_common (1 samples, 0.04%)</title><rect x="8.1861%" y="1317" width="0.0361%" height="15" fill="rgb(207,181,40)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1327.50"></text></g><g><title>__GI_execve (1 samples, 0.04%)</title><rect x="8.1861%" y="1301" width="0.0361%" height="15" fill="rgb(254,173,49)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1311.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="8.1861%" y="1285" width="0.0361%" height="15" fill="rgb(221,1,38)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1295.50"></text></g><g><title>do_syscall_64 (1 samples, 0.04%)</title><rect x="8.1861%" y="1269" width="0.0361%" height="15" fill="rgb(206,124,46)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1279.50"></text></g><g><title>x64_sys_call (1 samples, 0.04%)</title><rect x="8.1861%" y="1253" width="0.0361%" height="15" fill="rgb(249,21,11)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1263.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.04%)</title><rect x="8.1861%" y="1237" width="0.0361%" height="15" fill="rgb(222,201,40)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1247.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.04%)</title><rect x="8.1861%" y="1221" width="0.0361%" height="15" fill="rgb(235,61,29)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1231.50"></text></g><g><title>copy_strings.isra.0 (1 samples, 0.04%)</title><rect x="8.1861%" y="1205" width="0.0361%" height="15" fill="rgb(219,207,3)" fg:x="227" fg:w="1"/><text x="8.4361%" y="1215.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="8.2221%" y="1349" width="0.0361%" height="15" fill="rgb(222,56,46)" fg:x="228" fg:w="1"/><text x="8.4721%" y="1359.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (2 samples, 0.07%)</title><rect x="8.2582%" y="1349" width="0.0721%" height="15" fill="rgb(239,76,54)" fg:x="229" fg:w="2"/><text x="8.5082%" y="1359.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.11%)</title><rect x="8.3303%" y="1349" width="0.1082%" height="15" fill="rgb(231,124,27)" fg:x="231" fg:w="3"/><text x="8.5803%" y="1359.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (4 samples, 0.14%)</title><rect x="8.4385%" y="1349" width="0.1442%" height="15" fill="rgb(249,195,6)" fg:x="234" fg:w="4"/><text x="8.6885%" y="1359.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.07%)</title><rect x="8.5106%" y="1333" width="0.0721%" height="15" fill="rgb(237,174,47)" fg:x="236" fg:w="2"/><text x="8.7606%" y="1343.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (2 samples, 0.07%)</title><rect x="8.5106%" y="1317" width="0.0721%" height="15" fill="rgb(206,201,31)" fg:x="236" fg:w="2"/><text x="8.7606%" y="1327.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (1 samples, 0.04%)</title><rect x="8.5467%" y="1301" width="0.0361%" height="15" fill="rgb(231,57,52)" fg:x="237" fg:w="1"/><text x="8.7967%" y="1311.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.04%)</title><rect x="8.5467%" y="1285" width="0.0361%" height="15" fill="rgb(248,177,22)" fg:x="237" fg:w="1"/><text x="8.7967%" y="1295.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.04%)</title><rect x="8.5467%" y="1269" width="0.0361%" height="15" fill="rgb(215,211,37)" fg:x="237" fg:w="1"/><text x="8.7967%" y="1279.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (6 samples, 0.22%)</title><rect x="8.5828%" y="1349" width="0.2164%" height="15" fill="rgb(241,128,51)" fg:x="238" fg:w="6"/><text x="8.8328%" y="1359.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.04%)</title><rect x="8.7631%" y="1333" width="0.0361%" height="15" fill="rgb(227,165,31)" fg:x="243" fg:w="1"/><text x="9.0131%" y="1343.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (2 samples, 0.07%)</title><rect x="8.7991%" y="1349" width="0.0721%" height="15" fill="rgb(228,167,24)" fg:x="244" fg:w="2"/><text x="9.0491%" y="1359.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.04%)</title><rect x="8.8352%" y="1333" width="0.0361%" height="15" fill="rgb(228,143,12)" fg:x="245" fg:w="1"/><text x="9.0852%" y="1343.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.04%)</title><rect x="8.8352%" y="1317" width="0.0361%" height="15" fill="rgb(249,149,8)" fg:x="245" fg:w="1"/><text x="9.0852%" y="1327.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.04%)</title><rect x="8.8352%" y="1301" width="0.0361%" height="15" fill="rgb(243,35,44)" fg:x="245" fg:w="1"/><text x="9.0852%" y="1311.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="8.8352%" y="1285" width="0.0361%" height="15" fill="rgb(246,89,9)" fg:x="245" fg:w="1"/><text x="9.0852%" y="1295.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="8.8352%" y="1269" width="0.0361%" height="15" fill="rgb(233,213,13)" fg:x="245" fg:w="1"/><text x="9.0852%" y="1279.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="8.8352%" y="1253" width="0.0361%" height="15" fill="rgb(233,141,41)" fg:x="245" fg:w="1"/><text x="9.0852%" y="1263.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.11%)</title><rect x="8.8713%" y="1349" width="0.1082%" height="15" fill="rgb(239,167,4)" fg:x="246" fg:w="3"/><text x="9.1213%" y="1359.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.04%)</title><rect x="8.9794%" y="1349" width="0.0361%" height="15" fill="rgb(209,217,16)" fg:x="249" fg:w="1"/><text x="9.2294%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (3 samples, 0.11%)</title><rect x="9.0155%" y="1349" width="0.1082%" height="15" fill="rgb(219,88,35)" fg:x="250" fg:w="3"/><text x="9.2655%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (1 samples, 0.04%)</title><rect x="9.1237%" y="1349" width="0.0361%" height="15" fill="rgb(220,193,23)" fg:x="253" fg:w="1"/><text x="9.3737%" y="1359.50"></text></g><g><title>storage_bench::random_data_bench::_{{closure}}::_{{closure}} (1 samples, 0.04%)</title><rect x="9.1598%" y="1333" width="0.0361%" height="15" fill="rgb(230,90,52)" fg:x="254" fg:w="1"/><text x="9.4098%" y="1343.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (2 samples, 0.07%)</title><rect x="9.1958%" y="1317" width="0.0721%" height="15" fill="rgb(252,106,19)" fg:x="255" fg:w="2"/><text x="9.4458%" y="1327.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.07%)</title><rect x="9.1958%" y="1301" width="0.0721%" height="15" fill="rgb(206,74,20)" fg:x="255" fg:w="2"/><text x="9.4458%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="9.2679%" y="1189" width="0.0361%" height="15" fill="rgb(230,138,44)" fg:x="257" fg:w="1"/><text x="9.5179%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="9.2679%" y="1173" width="0.0361%" height="15" fill="rgb(235,182,43)" fg:x="257" fg:w="1"/><text x="9.5179%" y="1183.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.04%)</title><rect x="9.2679%" y="1157" width="0.0361%" height="15" fill="rgb(242,16,51)" fg:x="257" fg:w="1"/><text x="9.5179%" y="1167.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="9.2679%" y="1141" width="0.0361%" height="15" fill="rgb(248,9,4)" fg:x="257" fg:w="1"/><text x="9.5179%" y="1151.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="9.2679%" y="1125" width="0.0361%" height="15" fill="rgb(210,31,22)" fg:x="257" fg:w="1"/><text x="9.5179%" y="1135.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="9.2679%" y="1109" width="0.0361%" height="15" fill="rgb(239,54,39)" fg:x="257" fg:w="1"/><text x="9.5179%" y="1119.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (2 samples, 0.07%)</title><rect x="9.2679%" y="1317" width="0.0721%" height="15" fill="rgb(230,99,41)" fg:x="257" fg:w="2"/><text x="9.5179%" y="1327.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.07%)</title><rect x="9.2679%" y="1301" width="0.0721%" height="15" fill="rgb(253,106,12)" fg:x="257" fg:w="2"/><text x="9.5179%" y="1311.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.07%)</title><rect x="9.2679%" y="1285" width="0.0721%" height="15" fill="rgb(213,46,41)" fg:x="257" fg:w="2"/><text x="9.5179%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.07%)</title><rect x="9.2679%" y="1269" width="0.0721%" height="15" fill="rgb(215,133,35)" fg:x="257" fg:w="2"/><text x="9.5179%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.07%)</title><rect x="9.2679%" y="1253" width="0.0721%" height="15" fill="rgb(213,28,5)" fg:x="257" fg:w="2"/><text x="9.5179%" y="1263.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="9.2679%" y="1237" width="0.0721%" height="15" fill="rgb(215,77,49)" fg:x="257" fg:w="2"/><text x="9.5179%" y="1247.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="9.2679%" y="1221" width="0.0721%" height="15" fill="rgb(248,100,22)" fg:x="257" fg:w="2"/><text x="9.5179%" y="1231.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="9.2679%" y="1205" width="0.0721%" height="15" fill="rgb(208,67,9)" fg:x="257" fg:w="2"/><text x="9.5179%" y="1215.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.04%)</title><rect x="9.3040%" y="1189" width="0.0361%" height="15" fill="rgb(219,133,21)" fg:x="258" fg:w="1"/><text x="9.5540%" y="1199.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="9.3040%" y="1173" width="0.0361%" height="15" fill="rgb(246,46,29)" fg:x="258" fg:w="1"/><text x="9.5540%" y="1183.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload::Payload&gt; (3 samples, 0.11%)</title><rect x="9.3401%" y="1317" width="0.1082%" height="15" fill="rgb(246,185,52)" fg:x="259" fg:w="3"/><text x="9.5901%" y="1327.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.11%)</title><rect x="9.3401%" y="1301" width="0.1082%" height="15" fill="rgb(252,136,11)" fg:x="259" fg:w="3"/><text x="9.5901%" y="1311.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.11%)</title><rect x="9.3401%" y="1285" width="0.1082%" height="15" fill="rgb(219,138,53)" fg:x="259" fg:w="3"/><text x="9.5901%" y="1295.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="9.3401%" y="1269" width="0.1082%" height="15" fill="rgb(211,51,23)" fg:x="259" fg:w="3"/><text x="9.5901%" y="1279.50"></text></g><g><title>core::mem::drop (3 samples, 0.11%)</title><rect x="9.3401%" y="1253" width="0.1082%" height="15" fill="rgb(247,221,28)" fg:x="259" fg:w="3"/><text x="9.5901%" y="1263.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.11%)</title><rect x="9.3401%" y="1237" width="0.1082%" height="15" fill="rgb(251,222,45)" fg:x="259" fg:w="3"/><text x="9.5901%" y="1247.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="9.3401%" y="1221" width="0.1082%" height="15" fill="rgb(217,162,53)" fg:x="259" fg:w="3"/><text x="9.5901%" y="1231.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2 samples, 0.07%)</title><rect x="9.3761%" y="1205" width="0.0721%" height="15" fill="rgb(229,93,14)" fg:x="260" fg:w="2"/><text x="9.6261%" y="1215.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2 samples, 0.07%)</title><rect x="9.3761%" y="1189" width="0.0721%" height="15" fill="rgb(209,67,49)" fg:x="260" fg:w="2"/><text x="9.6261%" y="1199.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (12 samples, 0.43%)</title><rect x="9.1598%" y="1349" width="0.4327%" height="15" fill="rgb(213,87,29)" fg:x="254" fg:w="12"/><text x="9.4098%" y="1359.50"></text></g><g><title>storage_bench::real_data_data_bench::_{{closure}}::_{{closure}} (11 samples, 0.40%)</title><rect x="9.1958%" y="1333" width="0.3967%" height="15" fill="rgb(205,151,52)" fg:x="255" fg:w="11"/><text x="9.4458%" y="1343.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (4 samples, 0.14%)</title><rect x="9.4483%" y="1317" width="0.1442%" height="15" fill="rgb(253,215,39)" fg:x="262" fg:w="4"/><text x="9.6983%" y="1327.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.14%)</title><rect x="9.4483%" y="1301" width="0.1442%" height="15" fill="rgb(221,220,41)" fg:x="262" fg:w="4"/><text x="9.6983%" y="1311.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (3 samples, 0.11%)</title><rect x="9.4843%" y="1285" width="0.1082%" height="15" fill="rgb(218,133,21)" fg:x="263" fg:w="3"/><text x="9.7343%" y="1295.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.11%)</title><rect x="9.4843%" y="1269" width="0.1082%" height="15" fill="rgb(221,193,43)" fg:x="263" fg:w="3"/><text x="9.7343%" y="1279.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.11%)</title><rect x="9.4843%" y="1253" width="0.1082%" height="15" fill="rgb(240,128,52)" fg:x="263" fg:w="3"/><text x="9.7343%" y="1263.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.11%)</title><rect x="9.4843%" y="1237" width="0.1082%" height="15" fill="rgb(253,114,12)" fg:x="263" fg:w="3"/><text x="9.7343%" y="1247.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (3 samples, 0.11%)</title><rect x="9.4843%" y="1221" width="0.1082%" height="15" fill="rgb(215,223,47)" fg:x="263" fg:w="3"/><text x="9.7343%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.11%)</title><rect x="9.4843%" y="1205" width="0.1082%" height="15" fill="rgb(248,225,23)" fg:x="263" fg:w="3"/><text x="9.7343%" y="1215.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.11%)</title><rect x="9.4843%" y="1189" width="0.1082%" height="15" fill="rgb(250,108,0)" fg:x="263" fg:w="3"/><text x="9.7343%" y="1199.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.11%)</title><rect x="9.4843%" y="1173" width="0.1082%" height="15" fill="rgb(228,208,7)" fg:x="263" fg:w="3"/><text x="9.7343%" y="1183.50"></text></g><g><title>lz4_flex::block::compress::handle_last_literals (1 samples, 0.04%)</title><rect x="9.5925%" y="1349" width="0.0361%" height="15" fill="rgb(244,45,10)" fg:x="266" fg:w="1"/><text x="9.8425%" y="1359.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::insert_value (1 samples, 0.04%)</title><rect x="9.6286%" y="1349" width="0.0361%" height="15" fill="rgb(207,125,25)" fg:x="267" fg:w="1"/><text x="9.8786%" y="1359.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::up_heapify (1 samples, 0.04%)</title><rect x="9.6646%" y="1349" width="0.0361%" height="15" fill="rgb(210,195,18)" fg:x="268" fg:w="1"/><text x="9.9146%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (2 samples, 0.07%)</title><rect x="9.7007%" y="1349" width="0.0721%" height="15" fill="rgb(249,80,12)" fg:x="269" fg:w="2"/><text x="9.9507%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u16 (8 samples, 0.29%)</title><rect x="9.7728%" y="1349" width="0.2885%" height="15" fill="rgb(221,65,9)" fg:x="271" fg:w="8"/><text x="10.0228%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u32 (3 samples, 0.11%)</title><rect x="10.0613%" y="1349" width="0.1082%" height="15" fill="rgb(235,49,36)" fg:x="279" fg:w="3"/><text x="10.3113%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (13 samples, 0.47%)</title><rect x="10.1695%" y="1349" width="0.4688%" height="15" fill="rgb(225,32,20)" fg:x="282" fg:w="13"/><text x="10.4195%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (6 samples, 0.22%)</title><rect x="10.4219%" y="1333" width="0.2164%" height="15" fill="rgb(215,141,46)" fg:x="289" fg:w="6"/><text x="10.6719%" y="1343.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (6 samples, 0.22%)</title><rect x="10.4219%" y="1317" width="0.2164%" height="15" fill="rgb(250,160,47)" fg:x="289" fg:w="6"/><text x="10.6719%" y="1327.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (6 samples, 0.22%)</title><rect x="10.4219%" y="1301" width="0.2164%" height="15" fill="rgb(216,222,40)" fg:x="289" fg:w="6"/><text x="10.6719%" y="1311.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (3 samples, 0.11%)</title><rect x="10.6383%" y="1349" width="0.1082%" height="15" fill="rgb(234,217,39)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map::_{{closure}} (3 samples, 0.11%)</title><rect x="10.6383%" y="1333" width="0.1082%" height="15" fill="rgb(207,178,40)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1343.50"></text></g><g><title>&lt;&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize::Visitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.11%)</title><rect x="10.6383%" y="1317" width="0.1082%" height="15" fill="rgb(221,136,13)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1327.50"></text></g><g><title>serde::de::MapAccess::next_entry (3 samples, 0.11%)</title><rect x="10.6383%" y="1301" width="0.1082%" height="15" fill="rgb(249,199,10)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1311.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (3 samples, 0.11%)</title><rect x="10.6383%" y="1285" width="0.1082%" height="15" fill="rgb(249,222,13)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1295.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.11%)</title><rect x="10.6383%" y="1269" width="0.1082%" height="15" fill="rgb(244,185,38)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1279.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.11%)</title><rect x="10.6383%" y="1253" width="0.1082%" height="15" fill="rgb(236,202,9)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1263.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (3 samples, 0.11%)</title><rect x="10.6383%" y="1237" width="0.1082%" height="15" fill="rgb(250,229,37)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1247.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (3 samples, 0.11%)</title><rect x="10.6383%" y="1221" width="0.1082%" height="15" fill="rgb(206,174,23)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1231.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.11%)</title><rect x="10.6383%" y="1205" width="0.1082%" height="15" fill="rgb(211,33,43)" fg:x="295" fg:w="3"/><text x="10.8883%" y="1215.50"></text></g><g><title>serde_cbor::read::SliceRead::end (7 samples, 0.25%)</title><rect x="10.7465%" y="1349" width="0.2524%" height="15" fill="rgb(245,58,50)" fg:x="298" fg:w="7"/><text x="10.9965%" y="1359.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (3 samples, 0.11%)</title><rect x="10.9989%" y="1349" width="0.1082%" height="15" fill="rgb(244,68,36)" fg:x="305" fg:w="3"/><text x="11.2489%" y="1359.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (3 samples, 0.11%)</title><rect x="11.1071%" y="1349" width="0.1082%" height="15" fill="rgb(232,229,15)" fg:x="308" fg:w="3"/><text x="11.3571%" y="1359.50"></text></g><g><title>[unknown] (117 samples, 4.22%)</title><rect x="7.0321%" y="1365" width="4.2193%" height="15" fill="rgb(254,30,23)" fg:x="195" fg:w="117"/><text x="7.2821%" y="1375.50">[unkn..</text></g><g><title>unlink_chunk (1 samples, 0.04%)</title><rect x="11.2153%" y="1349" width="0.0361%" height="15" fill="rgb(235,160,14)" fg:x="311" fg:w="1"/><text x="11.4653%" y="1359.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.07%)</title><rect x="11.2514%" y="1365" width="0.0721%" height="15" fill="rgb(212,155,44)" fg:x="312" fg:w="2"/><text x="11.5014%" y="1375.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.07%)</title><rect x="11.2514%" y="1349" width="0.0721%" height="15" fill="rgb(226,2,50)" fg:x="312" fg:w="2"/><text x="11.5014%" y="1359.50"></text></g><g><title>_int_realloc (2 samples, 0.07%)</title><rect x="11.3235%" y="1365" width="0.0721%" height="15" fill="rgb(234,177,6)" fg:x="314" fg:w="2"/><text x="11.5735%" y="1375.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.07%)</title><rect x="11.3235%" y="1349" width="0.0721%" height="15" fill="rgb(217,24,9)" fg:x="314" fg:w="2"/><text x="11.5735%" y="1359.50"></text></g><g><title>_compound_head (1 samples, 0.04%)</title><rect x="11.3956%" y="645" width="0.0361%" height="15" fill="rgb(220,13,46)" fg:x="316" fg:w="1"/><text x="11.6456%" y="655.50"></text></g><g><title>folio_mark_accessed (1 samples, 0.04%)</title><rect x="11.4317%" y="629" width="0.0361%" height="15" fill="rgb(239,221,27)" fg:x="317" fg:w="1"/><text x="11.6817%" y="639.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="11.4677%" y="597" width="0.0361%" height="15" fill="rgb(222,198,25)" fg:x="318" fg:w="1"/><text x="11.7177%" y="607.50"></text></g><g><title>block_dirty_folio (1 samples, 0.04%)</title><rect x="11.5038%" y="597" width="0.0361%" height="15" fill="rgb(211,99,13)" fg:x="319" fg:w="1"/><text x="11.7538%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload_storage::PayloadStorage&gt; (5 samples, 0.18%)</title><rect x="11.3956%" y="1061" width="0.1803%" height="15" fill="rgb(232,111,31)" fg:x="316" fg:w="5"/><text x="11.6456%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,mmap_payload_storage::slotted_page::SlottedPageMmap&gt;&gt; (5 samples, 0.18%)</title><rect x="11.3956%" y="1045" width="0.1803%" height="15" fill="rgb(245,82,37)" fg:x="316" fg:w="5"/><text x="11.6456%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,mmap_payload_storage::slotted_page::SlottedPageMmap,std::hash::random::RandomState&gt;&gt; (5 samples, 0.18%)</title><rect x="11.3956%" y="1029" width="0.1803%" height="15" fill="rgb(227,149,46)" fg:x="316" fg:w="5"/><text x="11.6456%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,mmap_payload_storage::slotted_page::SlottedPageMmap)&gt;&gt; (5 samples, 0.18%)</title><rect x="11.3956%" y="1013" width="0.1803%" height="15" fill="rgb(218,36,50)" fg:x="316" fg:w="5"/><text x="11.6456%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.18%)</title><rect x="11.3956%" y="997" width="0.1803%" height="15" fill="rgb(226,80,48)" fg:x="316" fg:w="5"/><text x="11.6456%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (5 samples, 0.18%)</title><rect x="11.3956%" y="981" width="0.1803%" height="15" fill="rgb(238,224,15)" fg:x="316" fg:w="5"/><text x="11.6456%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (5 samples, 0.18%)</title><rect x="11.3956%" y="965" width="0.1803%" height="15" fill="rgb(241,136,10)" fg:x="316" fg:w="5"/><text x="11.6456%" y="975.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (5 samples, 0.18%)</title><rect x="11.3956%" y="949" width="0.1803%" height="15" fill="rgb(208,32,45)" fg:x="316" fg:w="5"/><text x="11.6456%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (5 samples, 0.18%)</title><rect x="11.3956%" y="933" width="0.1803%" height="15" fill="rgb(207,135,9)" fg:x="316" fg:w="5"/><text x="11.6456%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,mmap_payload_storage::slotted_page::SlottedPageMmap)&gt; (5 samples, 0.18%)</title><rect x="11.3956%" y="917" width="0.1803%" height="15" fill="rgb(206,86,44)" fg:x="316" fg:w="5"/><text x="11.6456%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::slotted_page::SlottedPageMmap&gt; (5 samples, 0.18%)</title><rect x="11.3956%" y="901" width="0.1803%" height="15" fill="rgb(245,177,15)" fg:x="316" fg:w="5"/><text x="11.6456%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::MmapMut&gt; (5 samples, 0.18%)</title><rect x="11.3956%" y="885" width="0.1803%" height="15" fill="rgb(206,64,50)" fg:x="316" fg:w="5"/><text x="11.6456%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (5 samples, 0.18%)</title><rect x="11.3956%" y="869" width="0.1803%" height="15" fill="rgb(234,36,40)" fg:x="316" fg:w="5"/><text x="11.6456%" y="879.50"></text></g><g><title>__GI_munmap (5 samples, 0.18%)</title><rect x="11.3956%" y="853" width="0.1803%" height="15" fill="rgb(213,64,8)" fg:x="316" fg:w="5"/><text x="11.6456%" y="863.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.18%)</title><rect x="11.3956%" y="837" width="0.1803%" height="15" fill="rgb(210,75,36)" fg:x="316" fg:w="5"/><text x="11.6456%" y="847.50"></text></g><g><title>do_syscall_64 (5 samples, 0.18%)</title><rect x="11.3956%" y="821" width="0.1803%" height="15" fill="rgb(229,88,21)" fg:x="316" fg:w="5"/><text x="11.6456%" y="831.50"></text></g><g><title>x64_sys_call (5 samples, 0.18%)</title><rect x="11.3956%" y="805" width="0.1803%" height="15" fill="rgb(252,204,47)" fg:x="316" fg:w="5"/><text x="11.6456%" y="815.50"></text></g><g><title>__x64_sys_munmap (5 samples, 0.18%)</title><rect x="11.3956%" y="789" width="0.1803%" height="15" fill="rgb(208,77,27)" fg:x="316" fg:w="5"/><text x="11.6456%" y="799.50"></text></g><g><title>__vm_munmap (5 samples, 0.18%)</title><rect x="11.3956%" y="773" width="0.1803%" height="15" fill="rgb(221,76,26)" fg:x="316" fg:w="5"/><text x="11.6456%" y="783.50"></text></g><g><title>do_vmi_munmap (5 samples, 0.18%)</title><rect x="11.3956%" y="757" width="0.1803%" height="15" fill="rgb(225,139,18)" fg:x="316" fg:w="5"/><text x="11.6456%" y="767.50"></text></g><g><title>do_vmi_align_munmap (5 samples, 0.18%)</title><rect x="11.3956%" y="741" width="0.1803%" height="15" fill="rgb(230,137,11)" fg:x="316" fg:w="5"/><text x="11.6456%" y="751.50"></text></g><g><title>unmap_region (5 samples, 0.18%)</title><rect x="11.3956%" y="725" width="0.1803%" height="15" fill="rgb(212,28,1)" fg:x="316" fg:w="5"/><text x="11.6456%" y="735.50"></text></g><g><title>unmap_vmas (5 samples, 0.18%)</title><rect x="11.3956%" y="709" width="0.1803%" height="15" fill="rgb(248,164,17)" fg:x="316" fg:w="5"/><text x="11.6456%" y="719.50"></text></g><g><title>unmap_single_vma (5 samples, 0.18%)</title><rect x="11.3956%" y="693" width="0.1803%" height="15" fill="rgb(222,171,42)" fg:x="316" fg:w="5"/><text x="11.6456%" y="703.50"></text></g><g><title>unmap_page_range (5 samples, 0.18%)</title><rect x="11.3956%" y="677" width="0.1803%" height="15" fill="rgb(243,84,45)" fg:x="316" fg:w="5"/><text x="11.6456%" y="687.50"></text></g><g><title>zap_pmd_range.isra.0 (5 samples, 0.18%)</title><rect x="11.3956%" y="661" width="0.1803%" height="15" fill="rgb(252,49,23)" fg:x="316" fg:w="5"/><text x="11.6456%" y="671.50"></text></g><g><title>zap_pte_range (4 samples, 0.14%)</title><rect x="11.4317%" y="645" width="0.1442%" height="15" fill="rgb(215,19,7)" fg:x="317" fg:w="4"/><text x="11.6817%" y="655.50"></text></g><g><title>folio_mark_dirty (3 samples, 0.11%)</title><rect x="11.4677%" y="629" width="0.1082%" height="15" fill="rgb(238,81,41)" fg:x="318" fg:w="3"/><text x="11.7177%" y="639.50"></text></g><g><title>ext4_dirty_folio (3 samples, 0.11%)</title><rect x="11.4677%" y="613" width="0.1082%" height="15" fill="rgb(210,199,37)" fg:x="318" fg:w="3"/><text x="11.7177%" y="623.50"></text></g><g><title>folio_memcg_unlock (1 samples, 0.04%)</title><rect x="11.5398%" y="597" width="0.0361%" height="15" fill="rgb(244,192,49)" fg:x="320" fg:w="1"/><text x="11.7898%" y="607.50"></text></g><g><title>__folio_batch_release (2 samples, 0.07%)</title><rect x="11.5759%" y="725" width="0.0721%" height="15" fill="rgb(226,211,11)" fg:x="321" fg:w="2"/><text x="11.8259%" y="735.50"></text></g><g><title>release_pages (2 samples, 0.07%)</title><rect x="11.5759%" y="709" width="0.0721%" height="15" fill="rgb(236,162,54)" fg:x="321" fg:w="2"/><text x="11.8259%" y="719.50"></text></g><g><title>lru_gen_del_folio.constprop.0 (2 samples, 0.07%)</title><rect x="11.5759%" y="693" width="0.0721%" height="15" fill="rgb(220,229,9)" fg:x="321" fg:w="2"/><text x="11.8259%" y="703.50"></text></g><g><title>filemap_unaccount_folio (1 samples, 0.04%)</title><rect x="11.6841%" y="709" width="0.0361%" height="15" fill="rgb(250,87,22)" fg:x="324" fg:w="1"/><text x="11.9341%" y="719.50"></text></g><g><title>delete_from_page_cache_batch (3 samples, 0.11%)</title><rect x="11.6480%" y="725" width="0.1082%" height="15" fill="rgb(239,43,17)" fg:x="323" fg:w="3"/><text x="11.8980%" y="735.50"></text></g><g><title>xas_store (1 samples, 0.04%)</title><rect x="11.7202%" y="709" width="0.0361%" height="15" fill="rgb(231,177,25)" fg:x="325" fg:w="1"/><text x="11.9702%" y="719.50"></text></g><g><title>xas_clear_mark (1 samples, 0.04%)</title><rect x="11.7202%" y="693" width="0.0361%" height="15" fill="rgb(219,179,1)" fg:x="325" fg:w="1"/><text x="11.9702%" y="703.50"></text></g><g><title>find_lock_entries (1 samples, 0.04%)</title><rect x="11.7562%" y="725" width="0.0361%" height="15" fill="rgb(238,219,53)" fg:x="326" fg:w="1"/><text x="12.0062%" y="735.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="11.9005%" y="629" width="0.0361%" height="15" fill="rgb(232,167,36)" fg:x="330" fg:w="1"/><text x="12.1505%" y="639.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.04%)</title><rect x="11.9365%" y="629" width="0.0361%" height="15" fill="rgb(244,19,51)" fg:x="331" fg:w="1"/><text x="12.1865%" y="639.50"></text></g><g><title>__folio_cancel_dirty (1 samples, 0.04%)</title><rect x="12.0087%" y="613" width="0.0361%" height="15" fill="rgb(224,6,22)" fg:x="333" fg:w="1"/><text x="12.2587%" y="623.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.04%)</title><rect x="12.0087%" y="597" width="0.0361%" height="15" fill="rgb(224,145,5)" fg:x="333" fg:w="1"/><text x="12.2587%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;tempfile::dir::TempDir&gt; (14 samples, 0.50%)</title><rect x="11.5759%" y="1061" width="0.5049%" height="15" fill="rgb(234,130,49)" fg:x="321" fg:w="14"/><text x="11.8259%" y="1071.50"></text></g><g><title>&lt;tempfile::dir::TempDir as core::ops::drop::Drop&gt;::drop (14 samples, 0.50%)</title><rect x="11.5759%" y="1045" width="0.5049%" height="15" fill="rgb(254,6,2)" fg:x="321" fg:w="14"/><text x="11.8259%" y="1055.50"></text></g><g><title>std::fs::remove_dir_all (14 samples, 0.50%)</title><rect x="11.5759%" y="1029" width="0.5049%" height="15" fill="rgb(208,96,46)" fg:x="321" fg:w="14"/><text x="11.8259%" y="1039.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (14 samples, 0.50%)</title><rect x="11.5759%" y="1013" width="0.5049%" height="15" fill="rgb(239,3,39)" fg:x="321" fg:w="14"/><text x="11.8259%" y="1023.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_modern (14 samples, 0.50%)</title><rect x="11.5759%" y="997" width="0.5049%" height="15" fill="rgb(233,210,1)" fg:x="321" fg:w="14"/><text x="11.8259%" y="1007.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (14 samples, 0.50%)</title><rect x="11.5759%" y="981" width="0.5049%" height="15" fill="rgb(244,137,37)" fg:x="321" fg:w="14"/><text x="11.8259%" y="991.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (14 samples, 0.50%)</title><rect x="11.5759%" y="965" width="0.5049%" height="15" fill="rgb(240,136,2)" fg:x="321" fg:w="14"/><text x="11.8259%" y="975.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (14 samples, 0.50%)</title><rect x="11.5759%" y="949" width="0.5049%" height="15" fill="rgb(239,18,37)" fg:x="321" fg:w="14"/><text x="11.8259%" y="959.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_modern::_{{closure}} (14 samples, 0.50%)</title><rect x="11.5759%" y="933" width="0.5049%" height="15" fill="rgb(218,185,22)" fg:x="321" fg:w="14"/><text x="11.8259%" y="943.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (14 samples, 0.50%)</title><rect x="11.5759%" y="917" width="0.5049%" height="15" fill="rgb(225,218,4)" fg:x="321" fg:w="14"/><text x="11.8259%" y="927.50"></text></g><g><title>__GI_unlinkat (14 samples, 0.50%)</title><rect x="11.5759%" y="901" width="0.5049%" height="15" fill="rgb(230,182,32)" fg:x="321" fg:w="14"/><text x="11.8259%" y="911.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.50%)</title><rect x="11.5759%" y="885" width="0.5049%" height="15" fill="rgb(242,56,43)" fg:x="321" fg:w="14"/><text x="11.8259%" y="895.50"></text></g><g><title>do_syscall_64 (14 samples, 0.50%)</title><rect x="11.5759%" y="869" width="0.5049%" height="15" fill="rgb(233,99,24)" fg:x="321" fg:w="14"/><text x="11.8259%" y="879.50"></text></g><g><title>x64_sys_call (14 samples, 0.50%)</title><rect x="11.5759%" y="853" width="0.5049%" height="15" fill="rgb(234,209,42)" fg:x="321" fg:w="14"/><text x="11.8259%" y="863.50"></text></g><g><title>__x64_sys_unlinkat (14 samples, 0.50%)</title><rect x="11.5759%" y="837" width="0.5049%" height="15" fill="rgb(227,7,12)" fg:x="321" fg:w="14"/><text x="11.8259%" y="847.50"></text></g><g><title>do_unlinkat (14 samples, 0.50%)</title><rect x="11.5759%" y="821" width="0.5049%" height="15" fill="rgb(245,203,43)" fg:x="321" fg:w="14"/><text x="11.8259%" y="831.50"></text></g><g><title>iput (14 samples, 0.50%)</title><rect x="11.5759%" y="805" width="0.5049%" height="15" fill="rgb(238,205,33)" fg:x="321" fg:w="14"/><text x="11.8259%" y="815.50"></text></g><g><title>evict (14 samples, 0.50%)</title><rect x="11.5759%" y="789" width="0.5049%" height="15" fill="rgb(231,56,7)" fg:x="321" fg:w="14"/><text x="11.8259%" y="799.50"></text></g><g><title>ext4_evict_inode (14 samples, 0.50%)</title><rect x="11.5759%" y="773" width="0.5049%" height="15" fill="rgb(244,186,29)" fg:x="321" fg:w="14"/><text x="11.8259%" y="783.50"></text></g><g><title>truncate_inode_pages_final (14 samples, 0.50%)</title><rect x="11.5759%" y="757" width="0.5049%" height="15" fill="rgb(234,111,31)" fg:x="321" fg:w="14"/><text x="11.8259%" y="767.50"></text></g><g><title>truncate_inode_pages_range (14 samples, 0.50%)</title><rect x="11.5759%" y="741" width="0.5049%" height="15" fill="rgb(241,149,10)" fg:x="321" fg:w="14"/><text x="11.8259%" y="751.50"></text></g><g><title>truncate_cleanup_folio (8 samples, 0.29%)</title><rect x="11.7923%" y="725" width="0.2885%" height="15" fill="rgb(249,206,44)" fg:x="327" fg:w="8"/><text x="12.0423%" y="735.50"></text></g><g><title>ext4_invalidate_folio (8 samples, 0.29%)</title><rect x="11.7923%" y="709" width="0.2885%" height="15" fill="rgb(251,153,30)" fg:x="327" fg:w="8"/><text x="12.0423%" y="719.50"></text></g><g><title>block_invalidate_folio (7 samples, 0.25%)</title><rect x="11.8283%" y="693" width="0.2524%" height="15" fill="rgb(239,152,38)" fg:x="328" fg:w="7"/><text x="12.0783%" y="703.50"></text></g><g><title>filemap_release_folio (5 samples, 0.18%)</title><rect x="11.9005%" y="677" width="0.1803%" height="15" fill="rgb(249,139,47)" fg:x="330" fg:w="5"/><text x="12.1505%" y="687.50"></text></g><g><title>ext4_release_folio (5 samples, 0.18%)</title><rect x="11.9005%" y="661" width="0.1803%" height="15" fill="rgb(244,64,35)" fg:x="330" fg:w="5"/><text x="12.1505%" y="671.50"></text></g><g><title>jbd2_journal_try_to_free_buffers (5 samples, 0.18%)</title><rect x="11.9005%" y="645" width="0.1803%" height="15" fill="rgb(216,46,15)" fg:x="330" fg:w="5"/><text x="12.1505%" y="655.50"></text></g><g><title>try_to_free_buffers (3 samples, 0.11%)</title><rect x="11.9726%" y="629" width="0.1082%" height="15" fill="rgb(250,74,19)" fg:x="332" fg:w="3"/><text x="12.2226%" y="639.50"></text></g><g><title>free_buffer_head (1 samples, 0.04%)</title><rect x="12.0447%" y="613" width="0.0361%" height="15" fill="rgb(249,42,33)" fg:x="334" fg:w="1"/><text x="12.2947%" y="623.50"></text></g><g><title>kmem_cache_free (1 samples, 0.04%)</title><rect x="12.0447%" y="597" width="0.0361%" height="15" fill="rgb(242,149,17)" fg:x="334" fg:w="1"/><text x="12.2947%" y="607.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.04%)</title><rect x="12.1168%" y="613" width="0.0361%" height="15" fill="rgb(244,29,21)" fg:x="336" fg:w="1"/><text x="12.3668%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (1 samples, 0.04%)</title><rect x="12.1168%" y="597" width="0.0361%" height="15" fill="rgb(220,130,37)" fg:x="336" fg:w="1"/><text x="12.3668%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (1 samples, 0.04%)</title><rect x="12.1168%" y="581" width="0.0361%" height="15" fill="rgb(211,67,2)" fg:x="336" fg:w="1"/><text x="12.3668%" y="591.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (1 samples, 0.04%)</title><rect x="12.1168%" y="565" width="0.0361%" height="15" fill="rgb(235,68,52)" fg:x="336" fg:w="1"/><text x="12.3668%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="12.1168%" y="549" width="0.0361%" height="15" fill="rgb(246,142,3)" fg:x="336" fg:w="1"/><text x="12.3668%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="12.1168%" y="533" width="0.0361%" height="15" fill="rgb(241,25,7)" fg:x="336" fg:w="1"/><text x="12.3668%" y="543.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="12.1168%" y="517" width="0.0361%" height="15" fill="rgb(242,119,39)" fg:x="336" fg:w="1"/><text x="12.3668%" y="527.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="12.1168%" y="501" width="0.0361%" height="15" fill="rgb(241,98,45)" fg:x="336" fg:w="1"/><text x="12.3668%" y="511.50"></text></g><g><title>__GI___libc_free (3 samples, 0.11%)</title><rect x="12.1529%" y="581" width="0.1082%" height="15" fill="rgb(254,28,30)" fg:x="337" fg:w="3"/><text x="12.4029%" y="591.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="12.1890%" y="565" width="0.0721%" height="15" fill="rgb(241,142,54)" fg:x="338" fg:w="2"/><text x="12.4390%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.36%)</title><rect x="12.2611%" y="517" width="0.3606%" height="15" fill="rgb(222,85,15)" fg:x="340" fg:w="10"/><text x="12.5111%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.36%)</title><rect x="12.2611%" y="501" width="0.3606%" height="15" fill="rgb(210,85,47)" fg:x="340" fg:w="10"/><text x="12.5111%" y="511.50"></text></g><g><title>__GI___libc_free (9 samples, 0.32%)</title><rect x="12.2972%" y="485" width="0.3246%" height="15" fill="rgb(224,206,25)" fg:x="341" fg:w="9"/><text x="12.5472%" y="495.50"></text></g><g><title>_int_free (5 samples, 0.18%)</title><rect x="12.4414%" y="469" width="0.1803%" height="15" fill="rgb(243,201,19)" fg:x="345" fg:w="5"/><text x="12.6914%" y="479.50"></text></g><g><title>tcache_put (3 samples, 0.11%)</title><rect x="12.5135%" y="453" width="0.1082%" height="15" fill="rgb(236,59,4)" fg:x="347" fg:w="3"/><text x="12.7635%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.40%)</title><rect x="12.2611%" y="581" width="0.3967%" height="15" fill="rgb(254,179,45)" fg:x="340" fg:w="11"/><text x="12.5111%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.40%)</title><rect x="12.2611%" y="565" width="0.3967%" height="15" fill="rgb(226,14,10)" fg:x="340" fg:w="11"/><text x="12.5111%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.40%)</title><rect x="12.2611%" y="549" width="0.3967%" height="15" fill="rgb(244,27,41)" fg:x="340" fg:w="11"/><text x="12.5111%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.40%)</title><rect x="12.2611%" y="533" width="0.3967%" height="15" fill="rgb(235,35,32)" fg:x="340" fg:w="11"/><text x="12.5111%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.04%)</title><rect x="12.6217%" y="517" width="0.0361%" height="15" fill="rgb(218,68,31)" fg:x="350" fg:w="1"/><text x="12.8717%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (9 samples, 0.32%)</title><rect x="12.7299%" y="565" width="0.3246%" height="15" fill="rgb(207,120,37)" fg:x="353" fg:w="9"/><text x="12.9799%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.32%)</title><rect x="12.7299%" y="549" width="0.3246%" height="15" fill="rgb(227,98,0)" fg:x="353" fg:w="9"/><text x="12.9799%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (9 samples, 0.32%)</title><rect x="12.7299%" y="533" width="0.3246%" height="15" fill="rgb(207,7,3)" fg:x="353" fg:w="9"/><text x="12.9799%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (9 samples, 0.32%)</title><rect x="12.7299%" y="517" width="0.3246%" height="15" fill="rgb(206,98,19)" fg:x="353" fg:w="9"/><text x="12.9799%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mmap_payload_storage::payload::Payload&gt;&gt; (30 samples, 1.08%)</title><rect x="12.0808%" y="741" width="1.0819%" height="15" fill="rgb(217,5,26)" fg:x="335" fg:w="30"/><text x="12.3308%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload::Payload&gt; (30 samples, 1.08%)</title><rect x="12.0808%" y="725" width="1.0819%" height="15" fill="rgb(235,190,38)" fg:x="335" fg:w="30"/><text x="12.3308%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (30 samples, 1.08%)</title><rect x="12.0808%" y="709" width="1.0819%" height="15" fill="rgb(247,86,24)" fg:x="335" fg:w="30"/><text x="12.3308%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (30 samples, 1.08%)</title><rect x="12.0808%" y="693" width="1.0819%" height="15" fill="rgb(205,101,16)" fg:x="335" fg:w="30"/><text x="12.3308%" y="703.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 1.08%)</title><rect x="12.0808%" y="677" width="1.0819%" height="15" fill="rgb(246,168,33)" fg:x="335" fg:w="30"/><text x="12.3308%" y="687.50"></text></g><g><title>core::mem::drop (30 samples, 1.08%)</title><rect x="12.0808%" y="661" width="1.0819%" height="15" fill="rgb(231,114,1)" fg:x="335" fg:w="30"/><text x="12.3308%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (30 samples, 1.08%)</title><rect x="12.0808%" y="645" width="1.0819%" height="15" fill="rgb(207,184,53)" fg:x="335" fg:w="30"/><text x="12.3308%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 1.08%)</title><rect x="12.0808%" y="629" width="1.0819%" height="15" fill="rgb(224,95,51)" fg:x="335" fg:w="30"/><text x="12.3308%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (28 samples, 1.01%)</title><rect x="12.1529%" y="613" width="1.0097%" height="15" fill="rgb(212,188,45)" fg:x="337" fg:w="28"/><text x="12.4029%" y="623.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (28 samples, 1.01%)</title><rect x="12.1529%" y="597" width="1.0097%" height="15" fill="rgb(223,154,38)" fg:x="337" fg:w="28"/><text x="12.4029%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (14 samples, 0.50%)</title><rect x="12.6578%" y="581" width="0.5049%" height="15" fill="rgb(251,22,52)" fg:x="351" fg:w="14"/><text x="12.9078%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.11%)</title><rect x="13.0545%" y="565" width="0.1082%" height="15" fill="rgb(229,209,22)" fg:x="362" fg:w="3"/><text x="13.3045%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.11%)</title><rect x="13.0545%" y="549" width="0.1082%" height="15" fill="rgb(234,138,34)" fg:x="362" fg:w="3"/><text x="13.3045%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="13.0545%" y="533" width="0.1082%" height="15" fill="rgb(212,95,11)" fg:x="362" fg:w="3"/><text x="13.3045%" y="543.50"></text></g><g><title>core::mem::drop (3 samples, 0.11%)</title><rect x="13.0545%" y="517" width="0.1082%" height="15" fill="rgb(240,179,47)" fg:x="362" fg:w="3"/><text x="13.3045%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (3 samples, 0.11%)</title><rect x="13.0545%" y="501" width="0.1082%" height="15" fill="rgb(240,163,11)" fg:x="362" fg:w="3"/><text x="13.3045%" y="511.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.11%)</title><rect x="13.0545%" y="485" width="0.1082%" height="15" fill="rgb(236,37,12)" fg:x="362" fg:w="3"/><text x="13.3045%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (2 samples, 0.07%)</title><rect x="13.0905%" y="469" width="0.0721%" height="15" fill="rgb(232,164,16)" fg:x="363" fg:w="2"/><text x="13.3405%" y="479.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (2 samples, 0.07%)</title><rect x="13.0905%" y="453" width="0.0721%" height="15" fill="rgb(244,205,15)" fg:x="363" fg:w="2"/><text x="13.3405%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.07%)</title><rect x="13.0905%" y="437" width="0.0721%" height="15" fill="rgb(223,117,47)" fg:x="363" fg:w="2"/><text x="13.3405%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="13.0905%" y="421" width="0.0721%" height="15" fill="rgb(244,107,35)" fg:x="363" fg:w="2"/><text x="13.3405%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="13.0905%" y="405" width="0.0721%" height="15" fill="rgb(205,140,8)" fg:x="363" fg:w="2"/><text x="13.3405%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="13.0905%" y="389" width="0.0721%" height="15" fill="rgb(228,84,46)" fg:x="363" fg:w="2"/><text x="13.3405%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="13.0905%" y="373" width="0.0721%" height="15" fill="rgb(254,188,9)" fg:x="363" fg:w="2"/><text x="13.3405%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="13.0905%" y="357" width="0.0721%" height="15" fill="rgb(206,112,54)" fg:x="363" fg:w="2"/><text x="13.3405%" y="367.50"></text></g><g><title>__GI___libc_free (2 samples, 0.07%)</title><rect x="13.0905%" y="341" width="0.0721%" height="15" fill="rgb(216,84,49)" fg:x="363" fg:w="2"/><text x="13.3405%" y="351.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="13.0905%" y="325" width="0.0721%" height="15" fill="rgb(214,194,35)" fg:x="363" fg:w="2"/><text x="13.3405%" y="335.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (2 samples, 0.07%)</title><rect x="13.4511%" y="373" width="0.0721%" height="15" fill="rgb(249,28,3)" fg:x="373" fg:w="2"/><text x="13.7011%" y="383.50"></text></g><g><title>serde_cbor::read::SliceRead::end (2 samples, 0.07%)</title><rect x="13.4511%" y="357" width="0.0721%" height="15" fill="rgb(222,56,52)" fg:x="373" fg:w="2"/><text x="13.7011%" y="367.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.25%)</title><rect x="13.5593%" y="149" width="0.2524%" height="15" fill="rgb(245,217,50)" fg:x="376" fg:w="7"/><text x="13.8093%" y="159.50"></text></g><g><title>_int_malloc (5 samples, 0.18%)</title><rect x="13.6314%" y="133" width="0.1803%" height="15" fill="rgb(213,201,24)" fg:x="378" fg:w="5"/><text x="13.8814%" y="143.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="13.7757%" y="117" width="0.0361%" height="15" fill="rgb(248,116,28)" fg:x="382" fg:w="1"/><text x="14.0257%" y="127.50"></text></g><g><title>__rdl_alloc (2 samples, 0.07%)</title><rect x="13.8118%" y="149" width="0.0721%" height="15" fill="rgb(219,72,43)" fg:x="383" fg:w="2"/><text x="14.0618%" y="159.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.07%)</title><rect x="13.8118%" y="133" width="0.0721%" height="15" fill="rgb(209,138,14)" fg:x="383" fg:w="2"/><text x="14.0618%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.40%)</title><rect x="13.5233%" y="245" width="0.3967%" height="15" fill="rgb(222,18,33)" fg:x="375" fg:w="11"/><text x="13.7733%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.40%)</title><rect x="13.5233%" y="229" width="0.3967%" height="15" fill="rgb(213,199,7)" fg:x="375" fg:w="11"/><text x="13.7733%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (11 samples, 0.40%)</title><rect x="13.5233%" y="213" width="0.3967%" height="15" fill="rgb(250,110,10)" fg:x="375" fg:w="11"/><text x="13.7733%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.40%)</title><rect x="13.5233%" y="197" width="0.3967%" height="15" fill="rgb(248,123,6)" fg:x="375" fg:w="11"/><text x="13.7733%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.40%)</title><rect x="13.5233%" y="181" width="0.3967%" height="15" fill="rgb(206,91,31)" fg:x="375" fg:w="11"/><text x="13.7733%" y="191.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.40%)</title><rect x="13.5233%" y="165" width="0.3967%" height="15" fill="rgb(211,154,13)" fg:x="375" fg:w="11"/><text x="13.7733%" y="175.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="13.8839%" y="149" width="0.0361%" height="15" fill="rgb(225,148,7)" fg:x="385" fg:w="1"/><text x="14.1339%" y="159.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (13 samples, 0.47%)</title><rect x="13.5233%" y="373" width="0.4688%" height="15" fill="rgb(220,160,43)" fg:x="375" fg:w="13"/><text x="13.7733%" y="383.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (13 samples, 0.47%)</title><rect x="13.5233%" y="357" width="0.4688%" height="15" fill="rgb(213,52,39)" fg:x="375" fg:w="13"/><text x="13.7733%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (13 samples, 0.47%)</title><rect x="13.5233%" y="341" width="0.4688%" height="15" fill="rgb(243,137,7)" fg:x="375" fg:w="13"/><text x="13.7733%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (13 samples, 0.47%)</title><rect x="13.5233%" y="325" width="0.4688%" height="15" fill="rgb(230,79,13)" fg:x="375" fg:w="13"/><text x="13.7733%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (13 samples, 0.47%)</title><rect x="13.5233%" y="309" width="0.4688%" height="15" fill="rgb(247,105,23)" fg:x="375" fg:w="13"/><text x="13.7733%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.47%)</title><rect x="13.5233%" y="293" width="0.4688%" height="15" fill="rgb(223,179,41)" fg:x="375" fg:w="13"/><text x="13.7733%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.47%)</title><rect x="13.5233%" y="277" width="0.4688%" height="15" fill="rgb(218,9,34)" fg:x="375" fg:w="13"/><text x="13.7733%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.47%)</title><rect x="13.5233%" y="261" width="0.4688%" height="15" fill="rgb(222,106,8)" fg:x="375" fg:w="13"/><text x="13.7733%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.07%)</title><rect x="13.9199%" y="245" width="0.0721%" height="15" fill="rgb(211,220,0)" fg:x="386" fg:w="2"/><text x="14.1699%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="13.9199%" y="229" width="0.0721%" height="15" fill="rgb(229,52,16)" fg:x="386" fg:w="2"/><text x="14.1699%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="13.9560%" y="213" width="0.0361%" height="15" fill="rgb(212,155,18)" fg:x="387" fg:w="1"/><text x="14.2060%" y="223.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (22 samples, 0.79%)</title><rect x="13.3790%" y="485" width="0.7934%" height="15" fill="rgb(242,21,14)" fg:x="371" fg:w="22"/><text x="13.6290%" y="495.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (22 samples, 0.79%)</title><rect x="13.3790%" y="469" width="0.7934%" height="15" fill="rgb(222,19,48)" fg:x="371" fg:w="22"/><text x="13.6290%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (22 samples, 0.79%)</title><rect x="13.3790%" y="453" width="0.7934%" height="15" fill="rgb(232,45,27)" fg:x="371" fg:w="22"/><text x="13.6290%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (22 samples, 0.79%)</title><rect x="13.3790%" y="437" width="0.7934%" height="15" fill="rgb(249,103,42)" fg:x="371" fg:w="22"/><text x="13.6290%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (22 samples, 0.79%)</title><rect x="13.3790%" y="421" width="0.7934%" height="15" fill="rgb(246,81,33)" fg:x="371" fg:w="22"/><text x="13.6290%" y="431.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (22 samples, 0.79%)</title><rect x="13.3790%" y="405" width="0.7934%" height="15" fill="rgb(252,33,42)" fg:x="371" fg:w="22"/><text x="13.6290%" y="415.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (21 samples, 0.76%)</title><rect x="13.4151%" y="389" width="0.7573%" height="15" fill="rgb(209,212,41)" fg:x="372" fg:w="21"/><text x="13.6651%" y="399.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (5 samples, 0.18%)</title><rect x="13.9921%" y="373" width="0.1803%" height="15" fill="rgb(207,154,6)" fg:x="388" fg:w="5"/><text x="14.2421%" y="383.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.18%)</title><rect x="13.9921%" y="357" width="0.1803%" height="15" fill="rgb(223,64,47)" fg:x="388" fg:w="5"/><text x="14.2421%" y="367.50"></text></g><g><title>core::str::validations::run_utf8_validation (4 samples, 0.14%)</title><rect x="14.0281%" y="341" width="0.1442%" height="15" fill="rgb(211,161,38)" fg:x="389" fg:w="4"/><text x="14.2781%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.07%)</title><rect x="14.1003%" y="325" width="0.0721%" height="15" fill="rgb(219,138,40)" fg:x="391" fg:w="2"/><text x="14.3503%" y="335.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (1 samples, 0.04%)</title><rect x="14.1724%" y="405" width="0.0361%" height="15" fill="rgb(241,228,46)" fg:x="393" fg:w="1"/><text x="14.4224%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="14.1724%" y="389" width="0.0361%" height="15" fill="rgb(223,209,38)" fg:x="393" fg:w="1"/><text x="14.4224%" y="399.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.14%)</title><rect x="14.2084%" y="165" width="0.1442%" height="15" fill="rgb(236,164,45)" fg:x="394" fg:w="4"/><text x="14.4584%" y="175.50"></text></g><g><title>tcache_get (2 samples, 0.07%)</title><rect x="14.2806%" y="149" width="0.0721%" height="15" fill="rgb(231,15,5)" fg:x="396" fg:w="2"/><text x="14.5306%" y="159.50"></text></g><g><title>tcache_get_n (2 samples, 0.07%)</title><rect x="14.2806%" y="133" width="0.0721%" height="15" fill="rgb(252,35,15)" fg:x="396" fg:w="2"/><text x="14.5306%" y="143.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="14.3527%" y="165" width="0.0361%" height="15" fill="rgb(248,181,18)" fg:x="398" fg:w="1"/><text x="14.6027%" y="175.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (6 samples, 0.22%)</title><rect x="14.2084%" y="405" width="0.2164%" height="15" fill="rgb(233,39,42)" fg:x="394" fg:w="6"/><text x="14.4584%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (6 samples, 0.22%)</title><rect x="14.2084%" y="389" width="0.2164%" height="15" fill="rgb(238,110,33)" fg:x="394" fg:w="6"/><text x="14.4584%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (6 samples, 0.22%)</title><rect x="14.2084%" y="373" width="0.2164%" height="15" fill="rgb(233,195,10)" fg:x="394" fg:w="6"/><text x="14.4584%" y="383.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (6 samples, 0.22%)</title><rect x="14.2084%" y="357" width="0.2164%" height="15" fill="rgb(254,105,3)" fg:x="394" fg:w="6"/><text x="14.4584%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (6 samples, 0.22%)</title><rect x="14.2084%" y="341" width="0.2164%" height="15" fill="rgb(221,225,9)" fg:x="394" fg:w="6"/><text x="14.4584%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (6 samples, 0.22%)</title><rect x="14.2084%" y="325" width="0.2164%" height="15" fill="rgb(224,227,45)" fg:x="394" fg:w="6"/><text x="14.4584%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.22%)</title><rect x="14.2084%" y="309" width="0.2164%" height="15" fill="rgb(229,198,43)" fg:x="394" fg:w="6"/><text x="14.4584%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.22%)</title><rect x="14.2084%" y="293" width="0.2164%" height="15" fill="rgb(206,209,35)" fg:x="394" fg:w="6"/><text x="14.4584%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.22%)</title><rect x="14.2084%" y="277" width="0.2164%" height="15" fill="rgb(245,195,53)" fg:x="394" fg:w="6"/><text x="14.4584%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.22%)</title><rect x="14.2084%" y="261" width="0.2164%" height="15" fill="rgb(240,92,26)" fg:x="394" fg:w="6"/><text x="14.4584%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.22%)</title><rect x="14.2084%" y="245" width="0.2164%" height="15" fill="rgb(207,40,23)" fg:x="394" fg:w="6"/><text x="14.4584%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (6 samples, 0.22%)</title><rect x="14.2084%" y="229" width="0.2164%" height="15" fill="rgb(223,111,35)" fg:x="394" fg:w="6"/><text x="14.4584%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.22%)</title><rect x="14.2084%" y="213" width="0.2164%" height="15" fill="rgb(229,147,28)" fg:x="394" fg:w="6"/><text x="14.4584%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.22%)</title><rect x="14.2084%" y="197" width="0.2164%" height="15" fill="rgb(211,29,28)" fg:x="394" fg:w="6"/><text x="14.4584%" y="207.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.22%)</title><rect x="14.2084%" y="181" width="0.2164%" height="15" fill="rgb(228,72,33)" fg:x="394" fg:w="6"/><text x="14.4584%" y="191.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="14.3887%" y="165" width="0.0361%" height="15" fill="rgb(205,214,31)" fg:x="399" fg:w="1"/><text x="14.6387%" y="175.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (9 samples, 0.32%)</title><rect x="14.1724%" y="421" width="0.3246%" height="15" fill="rgb(224,111,15)" fg:x="393" fg:w="9"/><text x="14.4224%" y="431.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (2 samples, 0.07%)</title><rect x="14.4248%" y="405" width="0.0721%" height="15" fill="rgb(253,21,26)" fg:x="400" fg:w="2"/><text x="14.6748%" y="415.50"></text></g><g><title>core::str::converts::from_utf8 (2 samples, 0.07%)</title><rect x="14.4248%" y="389" width="0.0721%" height="15" fill="rgb(245,139,43)" fg:x="400" fg:w="2"/><text x="14.6748%" y="399.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.04%)</title><rect x="14.4609%" y="373" width="0.0361%" height="15" fill="rgb(252,170,7)" fg:x="401" fg:w="1"/><text x="14.7109%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (22 samples, 0.79%)</title><rect x="15.6870%" y="181" width="0.7934%" height="15" fill="rgb(231,118,14)" fg:x="435" fg:w="22"/><text x="15.9370%" y="191.50"></text></g><g><title>__GI_memcpy (23 samples, 0.83%)</title><rect x="15.6870%" y="197" width="0.8294%" height="15" fill="rgb(238,83,0)" fg:x="435" fg:w="23"/><text x="15.9370%" y="207.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (1 samples, 0.04%)</title><rect x="16.4803%" y="181" width="0.0361%" height="15" fill="rgb(221,39,39)" fg:x="457" fg:w="1"/><text x="16.7303%" y="191.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="16.5164%" y="197" width="0.0721%" height="15" fill="rgb(222,119,46)" fg:x="458" fg:w="2"/><text x="16.7664%" y="207.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="16.5525%" y="181" width="0.0361%" height="15" fill="rgb(222,165,49)" fg:x="459" fg:w="1"/><text x="16.8025%" y="191.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.07%)</title><rect x="16.5885%" y="197" width="0.0721%" height="15" fill="rgb(219,113,52)" fg:x="460" fg:w="2"/><text x="16.8385%" y="207.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.07%)</title><rect x="16.5885%" y="181" width="0.0721%" height="15" fill="rgb(214,7,15)" fg:x="460" fg:w="2"/><text x="16.8385%" y="191.50"></text></g><g><title>checked_request2size (2 samples, 0.07%)</title><rect x="17.2737%" y="181" width="0.0721%" height="15" fill="rgb(235,32,4)" fg:x="479" fg:w="2"/><text x="17.5237%" y="191.50"></text></g><g><title>_int_realloc (63 samples, 2.27%)</title><rect x="15.5067%" y="213" width="2.2719%" height="15" fill="rgb(238,90,54)" fg:x="430" fg:w="63"/><text x="15.7567%" y="223.50">_..</text></g><g><title>_int_malloc (31 samples, 1.12%)</title><rect x="16.6607%" y="197" width="1.1179%" height="15" fill="rgb(213,208,19)" fg:x="462" fg:w="31"/><text x="16.9107%" y="207.50"></text></g><g><title>malloc_consolidate (12 samples, 0.43%)</title><rect x="17.3458%" y="181" width="0.4327%" height="15" fill="rgb(233,156,4)" fg:x="481" fg:w="12"/><text x="17.5958%" y="191.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="17.7786%" y="213" width="0.0361%" height="15" fill="rgb(207,194,5)" fg:x="493" fg:w="1"/><text x="18.0286%" y="223.50"></text></g><g><title>__GI___libc_realloc (65 samples, 2.34%)</title><rect x="15.5067%" y="229" width="2.3440%" height="15" fill="rgb(206,111,30)" fg:x="430" fg:w="65"/><text x="15.7567%" y="239.50">_..</text></g><g><title>musable (1 samples, 0.04%)</title><rect x="17.8146%" y="213" width="0.0361%" height="15" fill="rgb(243,70,54)" fg:x="494" fg:w="1"/><text x="18.0646%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (68 samples, 2.45%)</title><rect x="15.4706%" y="293" width="2.4522%" height="15" fill="rgb(242,28,8)" fg:x="429" fg:w="68"/><text x="15.7206%" y="303.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (67 samples, 2.42%)</title><rect x="15.5067%" y="277" width="2.4162%" height="15" fill="rgb(219,106,18)" fg:x="430" fg:w="67"/><text x="15.7567%" y="287.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (67 samples, 2.42%)</title><rect x="15.5067%" y="261" width="2.4162%" height="15" fill="rgb(244,222,10)" fg:x="430" fg:w="67"/><text x="15.7567%" y="271.50">al..</text></g><g><title>alloc::alloc::realloc (67 samples, 2.42%)</title><rect x="15.5067%" y="245" width="2.4162%" height="15" fill="rgb(236,179,52)" fg:x="430" fg:w="67"/><text x="15.7567%" y="255.50">al..</text></g><g><title>__rdl_realloc (2 samples, 0.07%)</title><rect x="17.8507%" y="229" width="0.0721%" height="15" fill="rgb(213,23,39)" fg:x="495" fg:w="2"/><text x="18.1007%" y="239.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.07%)</title><rect x="17.8507%" y="213" width="0.0721%" height="15" fill="rgb(238,48,10)" fg:x="495" fg:w="2"/><text x="18.1007%" y="223.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="17.9228%" y="293" width="0.0361%" height="15" fill="rgb(251,196,23)" fg:x="497" fg:w="1"/><text x="18.1728%" y="303.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="17.9228%" y="277" width="0.0361%" height="15" fill="rgb(250,152,24)" fg:x="497" fg:w="1"/><text x="18.1728%" y="287.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="17.9228%" y="261" width="0.0361%" height="15" fill="rgb(209,150,17)" fg:x="497" fg:w="1"/><text x="18.1728%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (70 samples, 2.52%)</title><rect x="15.4706%" y="325" width="2.5243%" height="15" fill="rgb(234,202,34)" fg:x="429" fg:w="70"/><text x="15.7206%" y="335.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (70 samples, 2.52%)</title><rect x="15.4706%" y="309" width="2.5243%" height="15" fill="rgb(253,148,53)" fg:x="429" fg:w="70"/><text x="15.7206%" y="319.50">al..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="17.9589%" y="293" width="0.0361%" height="15" fill="rgb(218,129,16)" fg:x="498" fg:w="1"/><text x="18.2089%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.11%)</title><rect x="17.9950%" y="325" width="0.1082%" height="15" fill="rgb(216,85,19)" fg:x="499" fg:w="3"/><text x="18.2450%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (180 samples, 6.49%)</title><rect x="15.4706%" y="341" width="6.4912%" height="15" fill="rgb(235,228,7)" fg:x="429" fg:w="180"/><text x="15.7206%" y="351.50">alloc::ve..</text></g><g><title>core::ptr::write (107 samples, 3.86%)</title><rect x="18.1031%" y="325" width="3.8586%" height="15" fill="rgb(245,175,0)" fg:x="502" fg:w="107"/><text x="18.3531%" y="335.50">core..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.18%)</title><rect x="23.4764%" y="245" width="0.1803%" height="15" fill="rgb(208,168,36)" fg:x="651" fg:w="5"/><text x="23.7264%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.07%)</title><rect x="24.0534%" y="213" width="0.0721%" height="15" fill="rgb(246,171,24)" fg:x="667" fg:w="2"/><text x="24.3034%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.04%)</title><rect x="24.1255%" y="213" width="0.0361%" height="15" fill="rgb(215,142,24)" fg:x="669" fg:w="1"/><text x="24.3755%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="24.1616%" y="213" width="0.0721%" height="15" fill="rgb(250,187,7)" fg:x="670" fg:w="2"/><text x="24.4116%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="24.1616%" y="197" width="0.0721%" height="15" fill="rgb(228,66,33)" fg:x="670" fg:w="2"/><text x="24.4116%" y="207.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (29 samples, 1.05%)</title><rect x="23.7649%" y="229" width="1.0458%" height="15" fill="rgb(234,215,21)" fg:x="659" fg:w="29"/><text x="24.0149%" y="239.50"></text></g><g><title>serde_cbor::read::SliceRead::end (16 samples, 0.58%)</title><rect x="24.2337%" y="213" width="0.5770%" height="15" fill="rgb(222,191,20)" fg:x="672" fg:w="16"/><text x="24.4837%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.11%)</title><rect x="24.7025%" y="197" width="0.1082%" height="15" fill="rgb(245,79,54)" fg:x="685" fg:w="3"/><text x="24.9525%" y="207.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u16 (38 samples, 1.37%)</title><rect x="23.6567%" y="245" width="1.3704%" height="15" fill="rgb(240,10,37)" fg:x="656" fg:w="38"/><text x="23.9067%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (6 samples, 0.22%)</title><rect x="24.8107%" y="229" width="0.2164%" height="15" fill="rgb(214,192,32)" fg:x="688" fg:w="6"/><text x="25.0607%" y="239.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u16::_{{closure}} (1 samples, 0.04%)</title><rect x="24.9910%" y="213" width="0.0361%" height="15" fill="rgb(209,36,54)" fg:x="693" fg:w="1"/><text x="25.2410%" y="223.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be_bytes (1 samples, 0.04%)</title><rect x="24.9910%" y="197" width="0.0361%" height="15" fill="rgb(220,10,11)" fg:x="693" fg:w="1"/><text x="25.2410%" y="207.50"></text></g><g><title>core::num::&lt;impl u16&gt;::from_be (1 samples, 0.04%)</title><rect x="24.9910%" y="181" width="0.0361%" height="15" fill="rgb(221,106,17)" fg:x="693" fg:w="1"/><text x="25.2410%" y="191.50"></text></g><g><title>core::num::&lt;impl u16&gt;::swap_bytes (1 samples, 0.04%)</title><rect x="24.9910%" y="165" width="0.0361%" height="15" fill="rgb(251,142,44)" fg:x="693" fg:w="1"/><text x="25.2410%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.04%)</title><rect x="25.1713%" y="213" width="0.0361%" height="15" fill="rgb(238,13,15)" fg:x="698" fg:w="1"/><text x="25.4213%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="25.1713%" y="197" width="0.0361%" height="15" fill="rgb(208,107,27)" fg:x="698" fg:w="1"/><text x="25.4213%" y="207.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (14 samples, 0.50%)</title><rect x="25.0631%" y="229" width="0.5049%" height="15" fill="rgb(205,136,37)" fg:x="695" fg:w="14"/><text x="25.3131%" y="239.50"></text></g><g><title>serde_cbor::read::SliceRead::end (10 samples, 0.36%)</title><rect x="25.2074%" y="213" width="0.3606%" height="15" fill="rgb(250,205,27)" fg:x="699" fg:w="10"/><text x="25.4574%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.04%)</title><rect x="25.5319%" y="197" width="0.0361%" height="15" fill="rgb(210,80,43)" fg:x="708" fg:w="1"/><text x="25.7819%" y="207.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u32 (16 samples, 0.58%)</title><rect x="25.0270%" y="245" width="0.5770%" height="15" fill="rgb(247,160,36)" fg:x="694" fg:w="16"/><text x="25.2770%" y="255.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.04%)</title><rect x="25.5680%" y="229" width="0.0361%" height="15" fill="rgb(234,13,49)" fg:x="709" fg:w="1"/><text x="25.8180%" y="239.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (91 samples, 3.28%)</title><rect x="22.6470%" y="309" width="3.2816%" height="15" fill="rgb(234,122,0)" fg:x="628" fg:w="91"/><text x="22.8970%" y="319.50">&lt;co..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (91 samples, 3.28%)</title><rect x="22.6470%" y="293" width="3.2816%" height="15" fill="rgb(207,146,38)" fg:x="628" fg:w="91"/><text x="22.8970%" y="303.50">ser..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (91 samples, 3.28%)</title><rect x="22.6470%" y="277" width="3.2816%" height="15" fill="rgb(207,177,25)" fg:x="628" fg:w="91"/><text x="22.8970%" y="287.50">&lt;&amp;m..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (91 samples, 3.28%)</title><rect x="22.6470%" y="261" width="3.2816%" height="15" fill="rgb(211,178,42)" fg:x="628" fg:w="91"/><text x="22.8970%" y="271.50">ser..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (9 samples, 0.32%)</title><rect x="25.6040%" y="245" width="0.3246%" height="15" fill="rgb(230,69,54)" fg:x="710" fg:w="9"/><text x="25.8540%" y="255.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (9 samples, 0.32%)</title><rect x="25.6040%" y="229" width="0.3246%" height="15" fill="rgb(214,135,41)" fg:x="710" fg:w="9"/><text x="25.8540%" y="239.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (9 samples, 0.32%)</title><rect x="25.6040%" y="213" width="0.3246%" height="15" fill="rgb(237,67,25)" fg:x="710" fg:w="9"/><text x="25.8540%" y="223.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_array (397 samples, 14.32%)</title><rect x="14.5330%" y="405" width="14.3166%" height="15" fill="rgb(222,189,50)" fg:x="403" fg:w="397"/><text x="14.7830%" y="415.50">serde_cbor::de::Deseri..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (397 samples, 14.32%)</title><rect x="14.5330%" y="389" width="14.3166%" height="15" fill="rgb(245,148,34)" fg:x="403" fg:w="397"/><text x="14.7830%" y="399.50">serde_cbor::de::Deseri..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_array::_{{closure}} (397 samples, 14.32%)</title><rect x="14.5330%" y="373" width="14.3166%" height="15" fill="rgb(222,29,6)" fg:x="403" fg:w="397"/><text x="14.7830%" y="383.50">serde_cbor::de::Deseri..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (396 samples, 14.28%)</title><rect x="14.5691%" y="357" width="14.2806%" height="15" fill="rgb(221,189,43)" fg:x="404" fg:w="396"/><text x="14.8191%" y="367.50">&lt;serde_json::value::de..</text></g><g><title>serde::de::SeqAccess::next_element (191 samples, 6.89%)</title><rect x="21.9618%" y="341" width="6.8878%" height="15" fill="rgb(207,36,27)" fg:x="609" fg:w="191"/><text x="22.2118%" y="351.50">serde::de..</text></g><g><title>&lt;serde_cbor::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (191 samples, 6.89%)</title><rect x="21.9618%" y="325" width="6.8878%" height="15" fill="rgb(217,90,24)" fg:x="609" fg:w="191"/><text x="22.2118%" y="335.50">&lt;serde_cb..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (81 samples, 2.92%)</title><rect x="25.9286%" y="309" width="2.9210%" height="15" fill="rgb(224,66,35)" fg:x="719" fg:w="81"/><text x="26.1786%" y="319.50">&lt;c..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="28.8136%" y="293" width="0.0361%" height="15" fill="rgb(221,13,50)" fg:x="799" fg:w="1"/><text x="29.0636%" y="303.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="28.8136%" y="277" width="0.0361%" height="15" fill="rgb(236,68,49)" fg:x="799" fg:w="1"/><text x="29.0636%" y="287.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="28.8136%" y="261" width="0.0361%" height="15" fill="rgb(229,146,28)" fg:x="799" fg:w="1"/><text x="29.0636%" y="271.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="28.8136%" y="245" width="0.0361%" height="15" fill="rgb(225,31,38)" fg:x="799" fg:w="1"/><text x="29.0636%" y="255.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="28.8136%" y="229" width="0.0361%" height="15" fill="rgb(250,208,3)" fg:x="799" fg:w="1"/><text x="29.0636%" y="239.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.04%)</title><rect x="28.8136%" y="213" width="0.0361%" height="15" fill="rgb(246,54,23)" fg:x="799" fg:w="1"/><text x="29.0636%" y="223.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="28.8136%" y="197" width="0.0361%" height="15" fill="rgb(243,76,11)" fg:x="799" fg:w="1"/><text x="29.0636%" y="207.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="28.8136%" y="181" width="0.0361%" height="15" fill="rgb(245,21,50)" fg:x="799" fg:w="1"/><text x="29.0636%" y="191.50"></text></g><g><title>account_process_tick (1 samples, 0.04%)</title><rect x="28.8136%" y="165" width="0.0361%" height="15" fill="rgb(228,9,43)" fg:x="799" fg:w="1"/><text x="29.0636%" y="175.50"></text></g><g><title>account_user_time (1 samples, 0.04%)</title><rect x="28.8136%" y="149" width="0.0361%" height="15" fill="rgb(208,100,47)" fg:x="799" fg:w="1"/><text x="29.0636%" y="159.50"></text></g><g><title>__cgroup_account_cputime_field (1 samples, 0.04%)</title><rect x="28.8136%" y="133" width="0.0361%" height="15" fill="rgb(232,26,8)" fg:x="799" fg:w="1"/><text x="29.0636%" y="143.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="28.8496%" y="357" width="0.0361%" height="15" fill="rgb(216,166,38)" fg:x="800" fg:w="1"/><text x="29.0996%" y="367.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.11%)</title><rect x="28.9578%" y="341" width="0.1082%" height="15" fill="rgb(251,202,51)" fg:x="803" fg:w="3"/><text x="29.2078%" y="351.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (2 samples, 0.07%)</title><rect x="28.9939%" y="325" width="0.0721%" height="15" fill="rgb(254,216,34)" fg:x="804" fg:w="2"/><text x="29.2439%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (2 samples, 0.07%)</title><rect x="28.9939%" y="309" width="0.0721%" height="15" fill="rgb(251,32,27)" fg:x="804" fg:w="2"/><text x="29.2439%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.07%)</title><rect x="28.9939%" y="293" width="0.0721%" height="15" fill="rgb(208,127,28)" fg:x="804" fg:w="2"/><text x="29.2439%" y="303.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (2 samples, 0.07%)</title><rect x="28.9939%" y="277" width="0.0721%" height="15" fill="rgb(224,137,22)" fg:x="804" fg:w="2"/><text x="29.2439%" y="287.50"></text></g><g><title>serde::de::MapAccess::next_entry (1 samples, 0.04%)</title><rect x="29.0660%" y="341" width="0.0361%" height="15" fill="rgb(254,70,32)" fg:x="806" fg:w="1"/><text x="29.3160%" y="351.50"></text></g><g><title>serde::de::MapAccess::next_entry_seed (1 samples, 0.04%)</title><rect x="29.0660%" y="325" width="0.0361%" height="15" fill="rgb(229,75,37)" fg:x="806" fg:w="1"/><text x="29.3160%" y="335.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.04%)</title><rect x="29.0660%" y="309" width="0.0361%" height="15" fill="rgb(252,64,23)" fg:x="806" fg:w="1"/><text x="29.3160%" y="319.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.04%)</title><rect x="29.1021%" y="341" width="0.0361%" height="15" fill="rgb(232,162,48)" fg:x="807" fg:w="1"/><text x="29.3521%" y="351.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.04%)</title><rect x="29.1021%" y="325" width="0.0361%" height="15" fill="rgb(246,160,12)" fg:x="807" fg:w="1"/><text x="29.3521%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.04%)</title><rect x="29.1021%" y="309" width="0.0361%" height="15" fill="rgb(247,166,0)" fg:x="807" fg:w="1"/><text x="29.3521%" y="319.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (1 samples, 0.04%)</title><rect x="29.1021%" y="293" width="0.0361%" height="15" fill="rgb(249,219,21)" fg:x="807" fg:w="1"/><text x="29.3521%" y="303.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.04%)</title><rect x="29.1021%" y="277" width="0.0361%" height="15" fill="rgb(205,209,3)" fg:x="807" fg:w="1"/><text x="29.3521%" y="287.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (1 samples, 0.04%)</title><rect x="29.1021%" y="261" width="0.0361%" height="15" fill="rgb(243,44,1)" fg:x="807" fg:w="1"/><text x="29.3521%" y="271.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (1 samples, 0.04%)</title><rect x="29.1021%" y="245" width="0.0361%" height="15" fill="rgb(206,159,16)" fg:x="807" fg:w="1"/><text x="29.3521%" y="255.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (1 samples, 0.04%)</title><rect x="29.1021%" y="229" width="0.0361%" height="15" fill="rgb(244,77,30)" fg:x="807" fg:w="1"/><text x="29.3521%" y="239.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (1 samples, 0.04%)</title><rect x="29.1021%" y="213" width="0.0361%" height="15" fill="rgb(218,69,12)" fg:x="807" fg:w="1"/><text x="29.3521%" y="223.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.07%)</title><rect x="29.1381%" y="181" width="0.0721%" height="15" fill="rgb(212,87,7)" fg:x="808" fg:w="2"/><text x="29.3881%" y="191.50"></text></g><g><title>tcache_get (2 samples, 0.07%)</title><rect x="29.1381%" y="165" width="0.0721%" height="15" fill="rgb(245,114,25)" fg:x="808" fg:w="2"/><text x="29.3881%" y="175.50"></text></g><g><title>tcache_get_n (2 samples, 0.07%)</title><rect x="29.1381%" y="149" width="0.0721%" height="15" fill="rgb(210,61,42)" fg:x="808" fg:w="2"/><text x="29.3881%" y="159.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map (11 samples, 0.40%)</title><rect x="28.8496%" y="405" width="0.3967%" height="15" fill="rgb(211,52,33)" fg:x="800" fg:w="11"/><text x="29.0996%" y="415.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (11 samples, 0.40%)</title><rect x="28.8496%" y="389" width="0.3967%" height="15" fill="rgb(234,58,33)" fg:x="800" fg:w="11"/><text x="29.0996%" y="399.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map::_{{closure}} (11 samples, 0.40%)</title><rect x="28.8496%" y="373" width="0.3967%" height="15" fill="rgb(220,115,36)" fg:x="800" fg:w="11"/><text x="29.0996%" y="383.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (10 samples, 0.36%)</title><rect x="28.8857%" y="357" width="0.3606%" height="15" fill="rgb(243,153,54)" fg:x="801" fg:w="10"/><text x="29.1357%" y="367.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (3 samples, 0.11%)</title><rect x="29.1381%" y="341" width="0.1082%" height="15" fill="rgb(251,47,18)" fg:x="808" fg:w="3"/><text x="29.3881%" y="351.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.11%)</title><rect x="29.1381%" y="325" width="0.1082%" height="15" fill="rgb(242,102,42)" fg:x="808" fg:w="3"/><text x="29.3881%" y="335.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (3 samples, 0.11%)</title><rect x="29.1381%" y="309" width="0.1082%" height="15" fill="rgb(234,31,38)" fg:x="808" fg:w="3"/><text x="29.3881%" y="319.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (3 samples, 0.11%)</title><rect x="29.1381%" y="293" width="0.1082%" height="15" fill="rgb(221,117,51)" fg:x="808" fg:w="3"/><text x="29.3881%" y="303.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (3 samples, 0.11%)</title><rect x="29.1381%" y="277" width="0.1082%" height="15" fill="rgb(212,20,18)" fg:x="808" fg:w="3"/><text x="29.3881%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (3 samples, 0.11%)</title><rect x="29.1381%" y="261" width="0.1082%" height="15" fill="rgb(245,133,36)" fg:x="808" fg:w="3"/><text x="29.3881%" y="271.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (3 samples, 0.11%)</title><rect x="29.1381%" y="245" width="0.1082%" height="15" fill="rgb(212,6,19)" fg:x="808" fg:w="3"/><text x="29.3881%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="29.1381%" y="229" width="0.1082%" height="15" fill="rgb(218,1,36)" fg:x="808" fg:w="3"/><text x="29.3881%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="29.1381%" y="213" width="0.1082%" height="15" fill="rgb(246,84,54)" fg:x="808" fg:w="3"/><text x="29.3881%" y="223.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="29.1381%" y="197" width="0.1082%" height="15" fill="rgb(242,110,6)" fg:x="808" fg:w="3"/><text x="29.3881%" y="207.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="29.2102%" y="181" width="0.0361%" height="15" fill="rgb(214,47,5)" fg:x="810" fg:w="1"/><text x="29.4602%" y="191.50"></text></g><g><title>serde::de::MapAccess::next_entry (444 samples, 16.01%)</title><rect x="13.2708%" y="517" width="16.0115%" height="15" fill="rgb(218,159,25)" fg:x="368" fg:w="444"/><text x="13.5208%" y="527.50">serde::de::MapAccess::nex..</text></g><g><title>serde::de::MapAccess::next_entry_seed (444 samples, 16.01%)</title><rect x="13.2708%" y="501" width="16.0115%" height="15" fill="rgb(215,211,28)" fg:x="368" fg:w="444"/><text x="13.5208%" y="511.50">serde::de::MapAccess::nex..</text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (419 samples, 15.11%)</title><rect x="14.1724%" y="485" width="15.1100%" height="15" fill="rgb(238,59,32)" fg:x="393" fg:w="419"/><text x="14.4224%" y="495.50">&lt;serde_cbor::de::MapAcc..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (419 samples, 15.11%)</title><rect x="14.1724%" y="469" width="15.1100%" height="15" fill="rgb(226,82,3)" fg:x="393" fg:w="419"/><text x="14.4224%" y="479.50">&lt;core::marker::PhantomD..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (419 samples, 15.11%)</title><rect x="14.1724%" y="453" width="15.1100%" height="15" fill="rgb(240,164,32)" fg:x="393" fg:w="419"/><text x="14.4224%" y="463.50">serde_json::value::de::..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (419 samples, 15.11%)</title><rect x="14.1724%" y="437" width="15.1100%" height="15" fill="rgb(232,46,7)" fg:x="393" fg:w="419"/><text x="14.4224%" y="447.50">&lt;&amp;mut serde_cbor::de::D..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (410 samples, 14.79%)</title><rect x="14.4969%" y="421" width="14.7854%" height="15" fill="rgb(229,129,53)" fg:x="402" fg:w="410"/><text x="14.7469%" y="431.50">serde_cbor::de::Deseria..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u16 (1 samples, 0.04%)</title><rect x="29.2463%" y="405" width="0.0361%" height="15" fill="rgb(234,188,29)" fg:x="811" fg:w="1"/><text x="29.4963%" y="415.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (1 samples, 0.04%)</title><rect x="29.2463%" y="389" width="0.0361%" height="15" fill="rgb(246,141,4)" fg:x="811" fg:w="1"/><text x="29.4963%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.04%)</title><rect x="29.2824%" y="453" width="0.0361%" height="15" fill="rgb(229,23,39)" fg:x="812" fg:w="1"/><text x="29.5324%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.04%)</title><rect x="29.2824%" y="437" width="0.0361%" height="15" fill="rgb(206,12,3)" fg:x="812" fg:w="1"/><text x="29.5324%" y="447.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.18%)</title><rect x="29.3545%" y="357" width="0.1803%" height="15" fill="rgb(252,226,20)" fg:x="814" fg:w="5"/><text x="29.6045%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (7 samples, 0.25%)</title><rect x="29.3184%" y="421" width="0.2524%" height="15" fill="rgb(216,123,35)" fg:x="813" fg:w="7"/><text x="29.5684%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (7 samples, 0.25%)</title><rect x="29.3184%" y="405" width="0.2524%" height="15" fill="rgb(212,68,40)" fg:x="813" fg:w="7"/><text x="29.5684%" y="415.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (7 samples, 0.25%)</title><rect x="29.3184%" y="389" width="0.2524%" height="15" fill="rgb(254,125,32)" fg:x="813" fg:w="7"/><text x="29.5684%" y="399.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (7 samples, 0.25%)</title><rect x="29.3184%" y="373" width="0.2524%" height="15" fill="rgb(253,97,22)" fg:x="813" fg:w="7"/><text x="29.5684%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (1 samples, 0.04%)</title><rect x="29.5348%" y="357" width="0.0361%" height="15" fill="rgb(241,101,14)" fg:x="819" fg:w="1"/><text x="29.7848%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (9 samples, 0.32%)</title><rect x="29.2824%" y="485" width="0.3246%" height="15" fill="rgb(238,103,29)" fg:x="812" fg:w="9"/><text x="29.5324%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (9 samples, 0.32%)</title><rect x="29.2824%" y="469" width="0.3246%" height="15" fill="rgb(233,195,47)" fg:x="812" fg:w="9"/><text x="29.5324%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (8 samples, 0.29%)</title><rect x="29.3184%" y="453" width="0.2885%" height="15" fill="rgb(246,218,30)" fg:x="813" fg:w="8"/><text x="29.5684%" y="463.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (8 samples, 0.29%)</title><rect x="29.3184%" y="437" width="0.2885%" height="15" fill="rgb(219,145,47)" fg:x="813" fg:w="8"/><text x="29.5684%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="29.5709%" y="421" width="0.0361%" height="15" fill="rgb(243,12,26)" fg:x="820" fg:w="1"/><text x="29.8209%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="29.5709%" y="405" width="0.0361%" height="15" fill="rgb(214,87,16)" fg:x="820" fg:w="1"/><text x="29.8209%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.04%)</title><rect x="29.5709%" y="389" width="0.0361%" height="15" fill="rgb(208,99,42)" fg:x="820" fg:w="1"/><text x="29.8209%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::DormantMut,K,V,NodeType&gt;,HandleType&gt;::awaken (1 samples, 0.04%)</title><rect x="29.8233%" y="453" width="0.0361%" height="15" fill="rgb(253,99,2)" fg:x="827" fg:w="1"/><text x="30.0733%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (3 samples, 0.11%)</title><rect x="29.8594%" y="437" width="0.1082%" height="15" fill="rgb(220,168,23)" fg:x="828" fg:w="3"/><text x="30.1094%" y="447.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (3 samples, 0.11%)</title><rect x="29.8594%" y="421" width="0.1082%" height="15" fill="rgb(242,38,24)" fg:x="828" fg:w="3"/><text x="30.1094%" y="431.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.11%)</title><rect x="29.8594%" y="405" width="0.1082%" height="15" fill="rgb(225,182,9)" fg:x="828" fg:w="3"/><text x="30.1094%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (5 samples, 0.18%)</title><rect x="29.8233%" y="469" width="0.1803%" height="15" fill="rgb(243,178,37)" fg:x="827" fg:w="5"/><text x="30.0733%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (4 samples, 0.14%)</title><rect x="29.8594%" y="453" width="0.1442%" height="15" fill="rgb(232,139,19)" fg:x="828" fg:w="4"/><text x="30.1094%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.04%)</title><rect x="29.9675%" y="437" width="0.0361%" height="15" fill="rgb(225,201,24)" fg:x="831" fg:w="1"/><text x="30.2175%" y="447.50"></text></g><g><title>mmap_payload_storage::payload::Payload::from_bytes (468 samples, 16.88%)</title><rect x="13.1626%" y="725" width="16.8770%" height="15" fill="rgb(221,47,46)" fg:x="365" fg:w="468"/><text x="13.4126%" y="735.50">mmap_payload_storage::payl..</text></g><g><title>serde_cbor::de::from_slice (468 samples, 16.88%)</title><rect x="13.1626%" y="709" width="16.8770%" height="15" fill="rgb(249,23,13)" fg:x="365" fg:w="468"/><text x="13.4126%" y="719.50">serde_cbor::de::from_slice</text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::de::Deserialize for mmap_payload_storage::payload::Payload&gt;::deserialize (468 samples, 16.88%)</title><rect x="13.1626%" y="693" width="16.8770%" height="15" fill="rgb(219,9,5)" fg:x="365" fg:w="468"/><text x="13.4126%" y="703.50">mmap_payload_storage::payl..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (468 samples, 16.88%)</title><rect x="13.1626%" y="677" width="16.8770%" height="15" fill="rgb(254,171,16)" fg:x="365" fg:w="468"/><text x="13.4126%" y="687.50">&lt;&amp;mut serde_cbor::de::Dese..</text></g><g><title>&lt;mmap_payload_storage::payload::_::&lt;impl serde::de::Deserialize for mmap_payload_storage::payload::Payload&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_newtype_struct (468 samples, 16.88%)</title><rect x="13.1626%" y="661" width="16.8770%" height="15" fill="rgb(230,171,20)" fg:x="365" fg:w="468"/><text x="13.4126%" y="671.50">&lt;mmap_payload_storage::pay..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize (468 samples, 16.88%)</title><rect x="13.1626%" y="645" width="16.8770%" height="15" fill="rgb(210,71,41)" fg:x="365" fg:w="468"/><text x="13.4126%" y="655.50">&lt;serde_json::map::Map&lt;allo..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (468 samples, 16.88%)</title><rect x="13.1626%" y="629" width="16.8770%" height="15" fill="rgb(206,173,20)" fg:x="365" fg:w="468"/><text x="13.4126%" y="639.50">&lt;&amp;mut serde_cbor::de::Dese..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (468 samples, 16.88%)</title><rect x="13.1626%" y="613" width="16.8770%" height="15" fill="rgb(233,88,34)" fg:x="365" fg:w="468"/><text x="13.4126%" y="623.50">&lt;&amp;mut serde_cbor::de::Dese..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (468 samples, 16.88%)</title><rect x="13.1626%" y="597" width="16.8770%" height="15" fill="rgb(223,209,46)" fg:x="365" fg:w="468"/><text x="13.4126%" y="607.50">serde_cbor::de::Deserializ..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map (467 samples, 16.84%)</title><rect x="13.1987%" y="581" width="16.8410%" height="15" fill="rgb(250,43,18)" fg:x="366" fg:w="467"/><text x="13.4487%" y="591.50">serde_cbor::de::Deserializ..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (467 samples, 16.84%)</title><rect x="13.1987%" y="565" width="16.8410%" height="15" fill="rgb(208,13,10)" fg:x="366" fg:w="467"/><text x="13.4487%" y="575.50">serde_cbor::de::Deserializ..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map::_{{closure}} (466 samples, 16.80%)</title><rect x="13.2348%" y="549" width="16.8049%" height="15" fill="rgb(212,200,36)" fg:x="367" fg:w="466"/><text x="13.4848%" y="559.50">serde_cbor::de::Deserializ..</text></g><g><title>&lt;&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize::Visitor as serde::de::Visitor&gt;::visit_map (466 samples, 16.80%)</title><rect x="13.2348%" y="533" width="16.8049%" height="15" fill="rgb(225,90,30)" fg:x="367" fg:w="466"/><text x="13.4848%" y="543.50">&lt;&lt;serde_json::map::Map&lt;all..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (21 samples, 0.76%)</title><rect x="29.2824%" y="517" width="0.7573%" height="15" fill="rgb(236,182,39)" fg:x="812" fg:w="21"/><text x="29.5324%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (21 samples, 0.76%)</title><rect x="29.2824%" y="501" width="0.7573%" height="15" fill="rgb(212,144,35)" fg:x="812" fg:w="21"/><text x="29.5324%" y="511.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (12 samples, 0.43%)</title><rect x="29.6069%" y="485" width="0.4327%" height="15" fill="rgb(228,63,44)" fg:x="821" fg:w="12"/><text x="29.8569%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.04%)</title><rect x="30.0036%" y="469" width="0.0361%" height="15" fill="rgb(228,109,6)" fg:x="832" fg:w="1"/><text x="30.2536%" y="479.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.04%)</title><rect x="30.0036%" y="453" width="0.0361%" height="15" fill="rgb(238,117,24)" fg:x="832" fg:w="1"/><text x="30.2536%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.04%)</title><rect x="30.0036%" y="437" width="0.0361%" height="15" fill="rgb(242,26,26)" fg:x="832" fg:w="1"/><text x="30.2536%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.04%)</title><rect x="30.0036%" y="421" width="0.0361%" height="15" fill="rgb(221,92,48)" fg:x="832" fg:w="1"/><text x="30.2536%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="30.0036%" y="405" width="0.0361%" height="15" fill="rgb(209,209,32)" fg:x="832" fg:w="1"/><text x="30.2536%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="30.0036%" y="389" width="0.0361%" height="15" fill="rgb(221,70,22)" fg:x="832" fg:w="1"/><text x="30.2536%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="30.0036%" y="373" width="0.0361%" height="15" fill="rgb(248,145,5)" fg:x="832" fg:w="1"/><text x="30.2536%" y="383.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="30.0036%" y="357" width="0.0361%" height="15" fill="rgb(226,116,26)" fg:x="832" fg:w="1"/><text x="30.2536%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.04%)</title><rect x="30.0397%" y="677" width="0.0361%" height="15" fill="rgb(244,5,17)" fg:x="833" fg:w="1"/><text x="30.2897%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="30.0397%" y="661" width="0.0361%" height="15" fill="rgb(252,159,33)" fg:x="833" fg:w="1"/><text x="30.2897%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.04%)</title><rect x="30.0397%" y="645" width="0.0361%" height="15" fill="rgb(206,71,0)" fg:x="833" fg:w="1"/><text x="30.2897%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.04%)</title><rect x="30.0397%" y="629" width="0.0361%" height="15" fill="rgb(233,118,54)" fg:x="833" fg:w="1"/><text x="30.2897%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="30.0397%" y="613" width="0.0361%" height="15" fill="rgb(234,83,48)" fg:x="833" fg:w="1"/><text x="30.2897%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="30.0397%" y="597" width="0.0361%" height="15" fill="rgb(228,3,54)" fg:x="833" fg:w="1"/><text x="30.2897%" y="607.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="30.0397%" y="581" width="0.0361%" height="15" fill="rgb(226,155,13)" fg:x="833" fg:w="1"/><text x="30.2897%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="30.0397%" y="565" width="0.0361%" height="15" fill="rgb(241,28,37)" fg:x="833" fg:w="1"/><text x="30.2897%" y="575.50"></text></g><g><title>lz4_flex::block::decompress::duplicate (1 samples, 0.04%)</title><rect x="30.1118%" y="661" width="0.0361%" height="15" fill="rgb(233,93,10)" fg:x="835" fg:w="1"/><text x="30.3618%" y="671.50"></text></g><g><title>lz4_flex::block::decompress::wild_copy_from_src_16 (1 samples, 0.04%)</title><rect x="30.1118%" y="645" width="0.0361%" height="15" fill="rgb(225,113,19)" fg:x="835" fg:w="1"/><text x="30.3618%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="30.1118%" y="629" width="0.0361%" height="15" fill="rgb(241,2,18)" fg:x="835" fg:w="1"/><text x="30.3618%" y="639.50"></text></g><g><title>lz4_flex::block::decompress::decompress (10 samples, 0.36%)</title><rect x="30.0397%" y="693" width="0.3606%" height="15" fill="rgb(228,207,21)" fg:x="833" fg:w="10"/><text x="30.2897%" y="703.50"></text></g><g><title>lz4_flex::block::decompress::decompress_internal (9 samples, 0.32%)</title><rect x="30.0757%" y="677" width="0.3246%" height="15" fill="rgb(213,211,35)" fg:x="834" fg:w="9"/><text x="30.3257%" y="687.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::slice_copy (7 samples, 0.25%)</title><rect x="30.1479%" y="661" width="0.2524%" height="15" fill="rgb(209,83,10)" fg:x="836" fg:w="7"/><text x="30.3979%" y="671.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::wild_copy_from_src (7 samples, 0.25%)</title><rect x="30.1479%" y="645" width="0.2524%" height="15" fill="rgb(209,164,1)" fg:x="836" fg:w="7"/><text x="30.3979%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.25%)</title><rect x="30.1479%" y="629" width="0.2524%" height="15" fill="rgb(213,184,43)" fg:x="836" fg:w="7"/><text x="30.3979%" y="639.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::decompress (18 samples, 0.65%)</title><rect x="30.0397%" y="725" width="0.6491%" height="15" fill="rgb(231,61,34)" fg:x="833" fg:w="18"/><text x="30.2897%" y="735.50"></text></g><g><title>lz4_flex::block::decompress::decompress_size_prepended (18 samples, 0.65%)</title><rect x="30.0397%" y="709" width="0.6491%" height="15" fill="rgb(235,75,3)" fg:x="833" fg:w="18"/><text x="30.2897%" y="719.50"></text></g><g><title>lz4_flex::block::uncompressed_size (8 samples, 0.29%)</title><rect x="30.4003%" y="693" width="0.2885%" height="15" fill="rgb(220,106,47)" fg:x="843" fg:w="8"/><text x="30.6503%" y="703.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_pointer (1 samples, 0.04%)</title><rect x="30.6888%" y="725" width="0.0361%" height="15" fill="rgb(210,196,33)" fg:x="851" fg:w="1"/><text x="30.9388%" y="735.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::get (1 samples, 0.04%)</title><rect x="30.6888%" y="709" width="0.0361%" height="15" fill="rgb(229,154,42)" fg:x="851" fg:w="1"/><text x="30.9388%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.04%)</title><rect x="30.6888%" y="693" width="0.0361%" height="15" fill="rgb(228,114,26)" fg:x="851" fg:w="1"/><text x="30.9388%" y="703.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::get::_{{closure}} (1 samples, 0.04%)</title><rect x="30.6888%" y="677" width="0.0361%" height="15" fill="rgb(208,144,1)" fg:x="851" fg:w="1"/><text x="30.9388%" y="687.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (2 samples, 0.07%)</title><rect x="30.7248%" y="693" width="0.0721%" height="15" fill="rgb(239,112,37)" fg:x="852" fg:w="2"/><text x="30.9748%" y="703.50"></text></g><g><title>&lt;mmap_payload_storage::slotted_page::SlotHeader as core::clone::Clone&gt;::clone (2 samples, 0.07%)</title><rect x="30.7248%" y="677" width="0.0721%" height="15" fill="rgb(210,96,50)" fg:x="852" fg:w="2"/><text x="30.9748%" y="687.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (2 samples, 0.07%)</title><rect x="30.7248%" y="661" width="0.0721%" height="15" fill="rgb(222,178,2)" fg:x="852" fg:w="2"/><text x="30.9748%" y="671.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::get_value (3 samples, 0.11%)</title><rect x="30.7248%" y="725" width="0.1082%" height="15" fill="rgb(226,74,18)" fg:x="852" fg:w="3"/><text x="30.9748%" y="735.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::get_slot (3 samples, 0.11%)</title><rect x="30.7248%" y="709" width="0.1082%" height="15" fill="rgb(225,67,54)" fg:x="852" fg:w="3"/><text x="30.9748%" y="719.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::get_slot_ref (1 samples, 0.04%)</title><rect x="30.7970%" y="693" width="0.0361%" height="15" fill="rgb(251,92,32)" fg:x="854" fg:w="1"/><text x="31.0470%" y="703.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (521 samples, 18.79%)</title><rect x="12.0808%" y="773" width="18.7883%" height="15" fill="rgb(228,149,22)" fg:x="335" fg:w="521"/><text x="12.3308%" y="783.50">criterion::bencher::Bencher&lt;M..</text></g><g><title>storage_bench::random_data_bench::_{{closure}}::_{{closure}} (521 samples, 18.79%)</title><rect x="12.0808%" y="757" width="18.7883%" height="15" fill="rgb(243,54,13)" fg:x="335" fg:w="521"/><text x="12.3308%" y="767.50">storage_bench::random_data_be..</text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_payload (491 samples, 17.71%)</title><rect x="13.1626%" y="741" width="17.7065%" height="15" fill="rgb(243,180,28)" fg:x="365" fg:w="491"/><text x="13.4126%" y="751.50">mmap_payload_storage::payloa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.04%)</title><rect x="30.8330%" y="725" width="0.0361%" height="15" fill="rgb(208,167,24)" fg:x="855" fg:w="1"/><text x="31.0830%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.04%)</title><rect x="30.8330%" y="709" width="0.0361%" height="15" fill="rgb(245,73,45)" fg:x="855" fg:w="1"/><text x="31.0830%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.04%)</title><rect x="30.8330%" y="693" width="0.0361%" height="15" fill="rgb(237,203,48)" fg:x="855" fg:w="1"/><text x="31.0830%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.04%)</title><rect x="30.8330%" y="677" width="0.0361%" height="15" fill="rgb(211,197,16)" fg:x="855" fg:w="1"/><text x="31.0830%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="30.8330%" y="661" width="0.0361%" height="15" fill="rgb(243,99,51)" fg:x="855" fg:w="1"/><text x="31.0830%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="30.8330%" y="645" width="0.0361%" height="15" fill="rgb(215,123,29)" fg:x="855" fg:w="1"/><text x="31.0830%" y="655.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.04%)</title><rect x="30.8330%" y="629" width="0.0361%" height="15" fill="rgb(239,186,37)" fg:x="855" fg:w="1"/><text x="31.0830%" y="639.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.04%)</title><rect x="30.8330%" y="613" width="0.0361%" height="15" fill="rgb(252,136,39)" fg:x="855" fg:w="1"/><text x="31.0830%" y="623.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::nonzero_trailing_zeros (1 samples, 0.04%)</title><rect x="30.8330%" y="597" width="0.0361%" height="15" fill="rgb(223,213,32)" fg:x="855" fg:w="1"/><text x="31.0830%" y="607.50"></text></g><g><title>core::num::nonzero::NonZero&lt;u16&gt;::trailing_zeros (1 samples, 0.04%)</title><rect x="30.8330%" y="581" width="0.0361%" height="15" fill="rgb(233,115,5)" fg:x="855" fg:w="1"/><text x="31.0830%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.04%)</title><rect x="30.9052%" y="693" width="0.0361%" height="15" fill="rgb(207,226,44)" fg:x="857" fg:w="1"/><text x="31.1552%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="30.9052%" y="677" width="0.0361%" height="15" fill="rgb(208,126,0)" fg:x="857" fg:w="1"/><text x="31.1552%" y="687.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::set (2 samples, 0.07%)</title><rect x="30.9052%" y="725" width="0.0721%" height="15" fill="rgb(244,66,21)" fg:x="857" fg:w="2"/><text x="31.1552%" y="735.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::persist_pointer (2 samples, 0.07%)</title><rect x="30.9052%" y="709" width="0.0721%" height="15" fill="rgb(222,97,12)" fg:x="857" fg:w="2"/><text x="31.1552%" y="719.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="30.9412%" y="693" width="0.0361%" height="15" fill="rgb(219,213,19)" fg:x="858" fg:w="1"/><text x="31.1912%" y="703.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="30.9412%" y="677" width="0.0361%" height="15" fill="rgb(252,169,30)" fg:x="858" fg:w="1"/><text x="31.1912%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_map (2 samples, 0.07%)</title><rect x="31.0133%" y="645" width="0.0721%" height="15" fill="rgb(206,32,51)" fg:x="860" fg:w="2"/><text x="31.2633%" y="655.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::serialize_collection (2 samples, 0.07%)</title><rect x="31.0133%" y="629" width="0.0721%" height="15" fill="rgb(250,172,42)" fg:x="860" fg:w="2"/><text x="31.2633%" y="639.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (2 samples, 0.07%)</title><rect x="31.0133%" y="613" width="0.0721%" height="15" fill="rgb(209,34,43)" fg:x="860" fg:w="2"/><text x="31.2633%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.0494%" y="597" width="0.0361%" height="15" fill="rgb(223,11,35)" fg:x="861" fg:w="1"/><text x="31.2994%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.04%)</title><rect x="31.0494%" y="581" width="0.0361%" height="15" fill="rgb(251,219,26)" fg:x="861" fg:w="1"/><text x="31.2994%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="31.0494%" y="565" width="0.0361%" height="15" fill="rgb(231,119,3)" fg:x="861" fg:w="1"/><text x="31.2994%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.04%)</title><rect x="31.0494%" y="549" width="0.0361%" height="15" fill="rgb(216,97,11)" fg:x="861" fg:w="1"/><text x="31.2994%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="31.0494%" y="533" width="0.0361%" height="15" fill="rgb(223,59,9)" fg:x="861" fg:w="1"/><text x="31.2994%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="31.0494%" y="517" width="0.0361%" height="15" fill="rgb(233,93,31)" fg:x="861" fg:w="1"/><text x="31.2994%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.04%)</title><rect x="31.0494%" y="501" width="0.0361%" height="15" fill="rgb(239,81,33)" fg:x="861" fg:w="1"/><text x="31.2994%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.04%)</title><rect x="31.0494%" y="485" width="0.0361%" height="15" fill="rgb(213,120,34)" fg:x="861" fg:w="1"/><text x="31.2994%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.04%)</title><rect x="31.0494%" y="469" width="0.0361%" height="15" fill="rgb(243,49,53)" fg:x="861" fg:w="1"/><text x="31.2994%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.04%)</title><rect x="31.0855%" y="597" width="0.0361%" height="15" fill="rgb(247,216,33)" fg:x="862" fg:w="1"/><text x="31.3355%" y="607.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.04%)</title><rect x="31.0855%" y="581" width="0.0361%" height="15" fill="rgb(226,26,14)" fg:x="862" fg:w="1"/><text x="31.3355%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (1 samples, 0.04%)</title><rect x="31.0855%" y="565" width="0.0361%" height="15" fill="rgb(215,49,53)" fg:x="862" fg:w="1"/><text x="31.3355%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (1 samples, 0.04%)</title><rect x="31.0855%" y="549" width="0.0361%" height="15" fill="rgb(245,162,40)" fg:x="862" fg:w="1"/><text x="31.3355%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="31.0855%" y="533" width="0.0361%" height="15" fill="rgb(229,68,17)" fg:x="862" fg:w="1"/><text x="31.3355%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.04%)</title><rect x="31.0855%" y="517" width="0.0361%" height="15" fill="rgb(213,182,10)" fg:x="862" fg:w="1"/><text x="31.3355%" y="527.50"></text></g><g><title>core::slice::index::get_noubcheck (1 samples, 0.04%)</title><rect x="31.0855%" y="501" width="0.0361%" height="15" fill="rgb(245,125,30)" fg:x="862" fg:w="1"/><text x="31.3355%" y="511.50"></text></g><g><title>&lt;serde_json::map::Iter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="31.0855%" y="645" width="0.0721%" height="15" fill="rgb(232,202,2)" fg:x="862" fg:w="2"/><text x="31.3355%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="31.0855%" y="629" width="0.0721%" height="15" fill="rgb(237,140,51)" fg:x="862" fg:w="2"/><text x="31.3355%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (2 samples, 0.07%)</title><rect x="31.0855%" y="613" width="0.0721%" height="15" fill="rgb(236,157,25)" fg:x="862" fg:w="2"/><text x="31.3355%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (1 samples, 0.04%)</title><rect x="31.1215%" y="597" width="0.0361%" height="15" fill="rgb(219,209,0)" fg:x="863" fg:w="1"/><text x="31.3715%" y="607.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.1937%" y="581" width="0.0361%" height="15" fill="rgb(240,116,54)" fg:x="865" fg:w="1"/><text x="31.4437%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.1937%" y="565" width="0.0361%" height="15" fill="rgb(216,10,36)" fg:x="865" fg:w="1"/><text x="31.4437%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.04%)</title><rect x="31.1937%" y="549" width="0.0361%" height="15" fill="rgb(222,72,44)" fg:x="865" fg:w="1"/><text x="31.4437%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="31.1937%" y="533" width="0.0361%" height="15" fill="rgb(232,159,9)" fg:x="865" fg:w="1"/><text x="31.4437%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.04%)</title><rect x="31.1937%" y="517" width="0.0361%" height="15" fill="rgb(210,39,32)" fg:x="865" fg:w="1"/><text x="31.4437%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="31.1937%" y="501" width="0.0361%" height="15" fill="rgb(216,194,45)" fg:x="865" fg:w="1"/><text x="31.4437%" y="511.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="31.1937%" y="485" width="0.0361%" height="15" fill="rgb(218,18,35)" fg:x="865" fg:w="1"/><text x="31.4437%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="31.2297%" y="581" width="0.0361%" height="15" fill="rgb(207,83,51)" fg:x="866" fg:w="1"/><text x="31.4797%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="31.2658%" y="581" width="0.0361%" height="15" fill="rgb(225,63,43)" fg:x="867" fg:w="1"/><text x="31.5158%" y="591.50"></text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_key (10 samples, 0.36%)</title><rect x="31.1576%" y="629" width="0.3606%" height="15" fill="rgb(207,57,36)" fg:x="864" fg:w="10"/><text x="31.4076%" y="639.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (10 samples, 0.36%)</title><rect x="31.1576%" y="613" width="0.3606%" height="15" fill="rgb(216,99,33)" fg:x="864" fg:w="10"/><text x="31.4076%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (10 samples, 0.36%)</title><rect x="31.1576%" y="597" width="0.3606%" height="15" fill="rgb(225,42,16)" fg:x="864" fg:w="10"/><text x="31.4076%" y="607.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (6 samples, 0.22%)</title><rect x="31.3018%" y="581" width="0.2164%" height="15" fill="rgb(220,201,45)" fg:x="868" fg:w="6"/><text x="31.5518%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (5 samples, 0.18%)</title><rect x="31.3379%" y="565" width="0.1803%" height="15" fill="rgb(225,33,4)" fg:x="869" fg:w="5"/><text x="31.5879%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (5 samples, 0.18%)</title><rect x="31.3379%" y="549" width="0.1803%" height="15" fill="rgb(224,33,50)" fg:x="869" fg:w="5"/><text x="31.5879%" y="559.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (5 samples, 0.18%)</title><rect x="31.3379%" y="533" width="0.1803%" height="15" fill="rgb(246,198,51)" fg:x="869" fg:w="5"/><text x="31.5879%" y="543.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (5 samples, 0.18%)</title><rect x="31.3379%" y="517" width="0.1803%" height="15" fill="rgb(205,22,4)" fg:x="869" fg:w="5"/><text x="31.5879%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (5 samples, 0.18%)</title><rect x="31.3379%" y="501" width="0.1803%" height="15" fill="rgb(206,3,8)" fg:x="869" fg:w="5"/><text x="31.5879%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.14%)</title><rect x="31.3740%" y="485" width="0.1442%" height="15" fill="rgb(251,23,15)" fg:x="870" fg:w="4"/><text x="31.6240%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.14%)</title><rect x="31.3740%" y="469" width="0.1442%" height="15" fill="rgb(252,88,28)" fg:x="870" fg:w="4"/><text x="31.6240%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.14%)</title><rect x="31.3740%" y="453" width="0.1442%" height="15" fill="rgb(212,127,14)" fg:x="870" fg:w="4"/><text x="31.6240%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.14%)</title><rect x="31.3740%" y="437" width="0.1442%" height="15" fill="rgb(247,145,37)" fg:x="870" fg:w="4"/><text x="31.6240%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.14%)</title><rect x="31.3740%" y="421" width="0.1442%" height="15" fill="rgb(209,117,53)" fg:x="870" fg:w="4"/><text x="31.6240%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4 samples, 0.14%)</title><rect x="31.3740%" y="405" width="0.1442%" height="15" fill="rgb(212,90,42)" fg:x="870" fg:w="4"/><text x="31.6240%" y="415.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (1 samples, 0.04%)</title><rect x="31.5182%" y="613" width="0.0361%" height="15" fill="rgb(218,164,37)" fg:x="874" fg:w="1"/><text x="31.7682%" y="623.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (1 samples, 0.04%)</title><rect x="31.5182%" y="597" width="0.0361%" height="15" fill="rgb(246,65,34)" fg:x="874" fg:w="1"/><text x="31.7682%" y="607.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (1 samples, 0.04%)</title><rect x="31.5182%" y="581" width="0.0361%" height="15" fill="rgb(231,100,33)" fg:x="874" fg:w="1"/><text x="31.7682%" y="591.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.5182%" y="565" width="0.0361%" height="15" fill="rgb(228,126,14)" fg:x="874" fg:w="1"/><text x="31.7682%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.5182%" y="549" width="0.0361%" height="15" fill="rgb(215,173,21)" fg:x="874" fg:w="1"/><text x="31.7682%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_map (1 samples, 0.04%)</title><rect x="31.5543%" y="597" width="0.0361%" height="15" fill="rgb(210,6,40)" fg:x="875" fg:w="1"/><text x="31.8043%" y="607.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::serialize_collection (1 samples, 0.04%)</title><rect x="31.5543%" y="581" width="0.0361%" height="15" fill="rgb(212,48,18)" fg:x="875" fg:w="1"/><text x="31.8043%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (1 samples, 0.04%)</title><rect x="31.5543%" y="565" width="0.0361%" height="15" fill="rgb(230,214,11)" fg:x="875" fg:w="1"/><text x="31.8043%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (1 samples, 0.04%)</title><rect x="31.5543%" y="549" width="0.0361%" height="15" fill="rgb(254,105,39)" fg:x="875" fg:w="1"/><text x="31.8043%" y="559.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (1 samples, 0.04%)</title><rect x="31.5543%" y="533" width="0.0361%" height="15" fill="rgb(245,158,5)" fg:x="875" fg:w="1"/><text x="31.8043%" y="543.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (1 samples, 0.04%)</title><rect x="31.5543%" y="517" width="0.0361%" height="15" fill="rgb(249,208,11)" fg:x="875" fg:w="1"/><text x="31.8043%" y="527.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.5543%" y="501" width="0.0361%" height="15" fill="rgb(210,39,28)" fg:x="875" fg:w="1"/><text x="31.8043%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.5543%" y="485" width="0.0361%" height="15" fill="rgb(211,56,53)" fg:x="875" fg:w="1"/><text x="31.8043%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.04%)</title><rect x="31.5543%" y="469" width="0.0361%" height="15" fill="rgb(226,201,30)" fg:x="875" fg:w="1"/><text x="31.8043%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="31.5543%" y="453" width="0.0361%" height="15" fill="rgb(239,101,34)" fg:x="875" fg:w="1"/><text x="31.8043%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.04%)</title><rect x="31.5543%" y="437" width="0.0361%" height="15" fill="rgb(226,209,5)" fg:x="875" fg:w="1"/><text x="31.8043%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="31.5543%" y="421" width="0.0361%" height="15" fill="rgb(250,105,47)" fg:x="875" fg:w="1"/><text x="31.8043%" y="431.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.5903%" y="581" width="0.0361%" height="15" fill="rgb(230,72,3)" fg:x="876" fg:w="1"/><text x="31.8403%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (1 samples, 0.04%)</title><rect x="31.5903%" y="565" width="0.0361%" height="15" fill="rgb(232,218,39)" fg:x="876" fg:w="1"/><text x="31.8403%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.04%)</title><rect x="31.5903%" y="549" width="0.0361%" height="15" fill="rgb(248,166,6)" fg:x="876" fg:w="1"/><text x="31.8403%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.04%)</title><rect x="31.5903%" y="533" width="0.0361%" height="15" fill="rgb(247,89,20)" fg:x="876" fg:w="1"/><text x="31.8403%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.04%)</title><rect x="31.5903%" y="517" width="0.0361%" height="15" fill="rgb(248,130,54)" fg:x="876" fg:w="1"/><text x="31.8403%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="31.5903%" y="501" width="0.0361%" height="15" fill="rgb(234,196,4)" fg:x="876" fg:w="1"/><text x="31.8403%" y="511.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="31.5903%" y="485" width="0.0361%" height="15" fill="rgb(250,143,31)" fg:x="876" fg:w="1"/><text x="31.8403%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.04%)</title><rect x="31.6264%" y="437" width="0.0361%" height="15" fill="rgb(211,110,34)" fg:x="877" fg:w="1"/><text x="31.8764%" y="447.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (3 samples, 0.11%)</title><rect x="31.5903%" y="597" width="0.1082%" height="15" fill="rgb(215,124,48)" fg:x="876" fg:w="3"/><text x="31.8403%" y="607.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (2 samples, 0.07%)</title><rect x="31.6264%" y="581" width="0.0721%" height="15" fill="rgb(216,46,13)" fg:x="877" fg:w="2"/><text x="31.8764%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (2 samples, 0.07%)</title><rect x="31.6264%" y="565" width="0.0721%" height="15" fill="rgb(205,184,25)" fg:x="877" fg:w="2"/><text x="31.8764%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (2 samples, 0.07%)</title><rect x="31.6264%" y="549" width="0.0721%" height="15" fill="rgb(228,1,10)" fg:x="877" fg:w="2"/><text x="31.8764%" y="559.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (2 samples, 0.07%)</title><rect x="31.6264%" y="533" width="0.0721%" height="15" fill="rgb(213,116,27)" fg:x="877" fg:w="2"/><text x="31.8764%" y="543.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (2 samples, 0.07%)</title><rect x="31.6264%" y="517" width="0.0721%" height="15" fill="rgb(241,95,50)" fg:x="877" fg:w="2"/><text x="31.8764%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (2 samples, 0.07%)</title><rect x="31.6264%" y="501" width="0.0721%" height="15" fill="rgb(238,48,32)" fg:x="877" fg:w="2"/><text x="31.8764%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.07%)</title><rect x="31.6264%" y="485" width="0.0721%" height="15" fill="rgb(235,113,49)" fg:x="877" fg:w="2"/><text x="31.8764%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.07%)</title><rect x="31.6264%" y="469" width="0.0721%" height="15" fill="rgb(205,127,43)" fg:x="877" fg:w="2"/><text x="31.8764%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.07%)</title><rect x="31.6264%" y="453" width="0.0721%" height="15" fill="rgb(250,162,2)" fg:x="877" fg:w="2"/><text x="31.8764%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="31.6625%" y="437" width="0.0361%" height="15" fill="rgb(220,13,41)" fg:x="878" fg:w="1"/><text x="31.9125%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="31.6625%" y="421" width="0.0361%" height="15" fill="rgb(249,221,25)" fg:x="878" fg:w="1"/><text x="31.9125%" y="431.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="31.7346%" y="229" width="0.0721%" height="15" fill="rgb(215,208,19)" fg:x="880" fg:w="2"/><text x="31.9846%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_seq (5 samples, 0.18%)</title><rect x="31.6985%" y="565" width="0.1803%" height="15" fill="rgb(236,175,2)" fg:x="879" fg:w="5"/><text x="31.9485%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::serialize_collection (5 samples, 0.18%)</title><rect x="31.6985%" y="549" width="0.1803%" height="15" fill="rgb(241,52,2)" fg:x="879" fg:w="5"/><text x="31.9485%" y="559.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (5 samples, 0.18%)</title><rect x="31.6985%" y="533" width="0.1803%" height="15" fill="rgb(248,140,14)" fg:x="879" fg:w="5"/><text x="31.9485%" y="543.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (5 samples, 0.18%)</title><rect x="31.6985%" y="517" width="0.1803%" height="15" fill="rgb(253,22,42)" fg:x="879" fg:w="5"/><text x="31.9485%" y="527.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (5 samples, 0.18%)</title><rect x="31.6985%" y="501" width="0.1803%" height="15" fill="rgb(234,61,47)" fg:x="879" fg:w="5"/><text x="31.9485%" y="511.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (5 samples, 0.18%)</title><rect x="31.6985%" y="485" width="0.1803%" height="15" fill="rgb(208,226,15)" fg:x="879" fg:w="5"/><text x="31.9485%" y="495.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (5 samples, 0.18%)</title><rect x="31.6985%" y="469" width="0.1803%" height="15" fill="rgb(217,221,4)" fg:x="879" fg:w="5"/><text x="31.9485%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (5 samples, 0.18%)</title><rect x="31.6985%" y="453" width="0.1803%" height="15" fill="rgb(212,174,34)" fg:x="879" fg:w="5"/><text x="31.9485%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.18%)</title><rect x="31.6985%" y="437" width="0.1803%" height="15" fill="rgb(253,83,4)" fg:x="879" fg:w="5"/><text x="31.9485%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.18%)</title><rect x="31.6985%" y="421" width="0.1803%" height="15" fill="rgb(250,195,49)" fg:x="879" fg:w="5"/><text x="31.9485%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.18%)</title><rect x="31.6985%" y="405" width="0.1803%" height="15" fill="rgb(241,192,25)" fg:x="879" fg:w="5"/><text x="31.9485%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.18%)</title><rect x="31.6985%" y="389" width="0.1803%" height="15" fill="rgb(208,124,10)" fg:x="879" fg:w="5"/><text x="31.9485%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.18%)</title><rect x="31.6985%" y="373" width="0.1803%" height="15" fill="rgb(222,33,0)" fg:x="879" fg:w="5"/><text x="31.9485%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.18%)</title><rect x="31.6985%" y="357" width="0.1803%" height="15" fill="rgb(234,209,28)" fg:x="879" fg:w="5"/><text x="31.9485%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.18%)</title><rect x="31.6985%" y="341" width="0.1803%" height="15" fill="rgb(224,11,23)" fg:x="879" fg:w="5"/><text x="31.9485%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.18%)</title><rect x="31.6985%" y="325" width="0.1803%" height="15" fill="rgb(232,99,1)" fg:x="879" fg:w="5"/><text x="31.9485%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.18%)</title><rect x="31.6985%" y="309" width="0.1803%" height="15" fill="rgb(237,95,45)" fg:x="879" fg:w="5"/><text x="31.9485%" y="319.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.18%)</title><rect x="31.6985%" y="293" width="0.1803%" height="15" fill="rgb(208,109,11)" fg:x="879" fg:w="5"/><text x="31.9485%" y="303.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.18%)</title><rect x="31.6985%" y="277" width="0.1803%" height="15" fill="rgb(216,190,48)" fg:x="879" fg:w="5"/><text x="31.9485%" y="287.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.18%)</title><rect x="31.6985%" y="261" width="0.1803%" height="15" fill="rgb(251,171,36)" fg:x="879" fg:w="5"/><text x="31.9485%" y="271.50"></text></g><g><title>_int_realloc (4 samples, 0.14%)</title><rect x="31.7346%" y="245" width="0.1442%" height="15" fill="rgb(230,62,22)" fg:x="880" fg:w="4"/><text x="31.9846%" y="255.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="31.8067%" y="229" width="0.0721%" height="15" fill="rgb(225,114,35)" fg:x="882" fg:w="2"/><text x="32.0567%" y="239.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (15 samples, 0.54%)</title><rect x="31.8788%" y="533" width="0.5409%" height="15" fill="rgb(215,118,42)" fg:x="884" fg:w="15"/><text x="32.1288%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.07%)</title><rect x="33.6098%" y="325" width="0.0721%" height="15" fill="rgb(243,119,21)" fg:x="932" fg:w="2"/><text x="33.8598%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2 samples, 0.07%)</title><rect x="33.6098%" y="309" width="0.0721%" height="15" fill="rgb(252,177,53)" fg:x="932" fg:w="2"/><text x="33.8598%" y="319.50"></text></g><g><title>__GI_memcpy (1 samples, 0.04%)</title><rect x="33.7901%" y="197" width="0.0361%" height="15" fill="rgb(237,209,29)" fg:x="937" fg:w="1"/><text x="34.0401%" y="207.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="33.7901%" y="181" width="0.0361%" height="15" fill="rgb(212,65,23)" fg:x="937" fg:w="1"/><text x="34.0401%" y="191.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="33.8262%" y="197" width="0.0721%" height="15" fill="rgb(230,222,46)" fg:x="938" fg:w="2"/><text x="34.0762%" y="207.50"></text></g><g><title>_int_malloc (8 samples, 0.29%)</title><rect x="33.8983%" y="197" width="0.2885%" height="15" fill="rgb(215,135,32)" fg:x="940" fg:w="8"/><text x="34.1483%" y="207.50"></text></g><g><title>malloc_consolidate (4 samples, 0.14%)</title><rect x="34.0426%" y="181" width="0.1442%" height="15" fill="rgb(246,101,22)" fg:x="944" fg:w="4"/><text x="34.2926%" y="191.50"></text></g><g><title>_int_realloc (13 samples, 0.47%)</title><rect x="33.7541%" y="213" width="0.4688%" height="15" fill="rgb(206,107,13)" fg:x="936" fg:w="13"/><text x="34.0041%" y="223.50"></text></g><g><title>unlink_chunk (1 samples, 0.04%)</title><rect x="34.1868%" y="197" width="0.0361%" height="15" fill="rgb(250,100,44)" fg:x="948" fg:w="1"/><text x="34.4368%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.54%)</title><rect x="33.7180%" y="293" width="0.5409%" height="15" fill="rgb(231,147,38)" fg:x="935" fg:w="15"/><text x="33.9680%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.54%)</title><rect x="33.7180%" y="277" width="0.5409%" height="15" fill="rgb(229,8,40)" fg:x="935" fg:w="15"/><text x="33.9680%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.54%)</title><rect x="33.7180%" y="261" width="0.5409%" height="15" fill="rgb(221,135,30)" fg:x="935" fg:w="15"/><text x="33.9680%" y="271.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.54%)</title><rect x="33.7180%" y="245" width="0.5409%" height="15" fill="rgb(249,193,18)" fg:x="935" fg:w="15"/><text x="33.9680%" y="255.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.54%)</title><rect x="33.7180%" y="229" width="0.5409%" height="15" fill="rgb(209,133,39)" fg:x="935" fg:w="15"/><text x="33.9680%" y="239.50"></text></g><g><title>musable (1 samples, 0.04%)</title><rect x="34.2229%" y="213" width="0.0361%" height="15" fill="rgb(232,100,14)" fg:x="949" fg:w="1"/><text x="34.4729%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (19 samples, 0.69%)</title><rect x="33.6098%" y="357" width="0.6852%" height="15" fill="rgb(224,185,1)" fg:x="932" fg:w="19"/><text x="33.8598%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (19 samples, 0.69%)</title><rect x="33.6098%" y="341" width="0.6852%" height="15" fill="rgb(223,139,8)" fg:x="932" fg:w="19"/><text x="33.8598%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.61%)</title><rect x="33.6819%" y="325" width="0.6131%" height="15" fill="rgb(232,213,38)" fg:x="934" fg:w="17"/><text x="33.9319%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (17 samples, 0.61%)</title><rect x="33.6819%" y="309" width="0.6131%" height="15" fill="rgb(207,94,22)" fg:x="934" fg:w="17"/><text x="33.9319%" y="319.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="34.2589%" y="293" width="0.0361%" height="15" fill="rgb(219,183,54)" fg:x="950" fg:w="1"/><text x="34.5089%" y="303.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="34.2589%" y="277" width="0.0361%" height="15" fill="rgb(216,185,54)" fg:x="950" fg:w="1"/><text x="34.5089%" y="287.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="34.2589%" y="261" width="0.0361%" height="15" fill="rgb(254,217,39)" fg:x="950" fg:w="1"/><text x="34.5089%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.83%)</title><rect x="34.2950%" y="357" width="0.8294%" height="15" fill="rgb(240,178,23)" fg:x="951" fg:w="23"/><text x="34.5450%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (23 samples, 0.83%)</title><rect x="34.2950%" y="341" width="0.8294%" height="15" fill="rgb(218,11,47)" fg:x="951" fg:w="23"/><text x="34.5450%" y="351.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (47 samples, 1.69%)</title><rect x="33.4656%" y="437" width="1.6949%" height="15" fill="rgb(218,51,51)" fg:x="928" fg:w="47"/><text x="33.7156%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (46 samples, 1.66%)</title><rect x="33.5016%" y="421" width="1.6589%" height="15" fill="rgb(238,126,27)" fg:x="929" fg:w="46"/><text x="33.7516%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (46 samples, 1.66%)</title><rect x="33.5016%" y="405" width="1.6589%" height="15" fill="rgb(249,202,22)" fg:x="929" fg:w="46"/><text x="33.7516%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 1.66%)</title><rect x="33.5016%" y="389" width="1.6589%" height="15" fill="rgb(254,195,49)" fg:x="929" fg:w="46"/><text x="33.7516%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (46 samples, 1.66%)</title><rect x="33.5016%" y="373" width="1.6589%" height="15" fill="rgb(208,123,14)" fg:x="929" fg:w="46"/><text x="33.7516%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="35.1244%" y="357" width="0.0361%" height="15" fill="rgb(224,200,8)" fg:x="974" fg:w="1"/><text x="35.3744%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="35.1605%" y="437" width="0.0361%" height="15" fill="rgb(217,61,36)" fg:x="975" fg:w="1"/><text x="35.4105%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.14%)</title><rect x="35.1965%" y="437" width="0.1442%" height="15" fill="rgb(206,35,45)" fg:x="976" fg:w="4"/><text x="35.4465%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="35.1965%" y="421" width="0.1442%" height="15" fill="rgb(217,65,33)" fg:x="976" fg:w="4"/><text x="35.4465%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (4 samples, 0.14%)</title><rect x="36.3866%" y="309" width="0.1442%" height="15" fill="rgb(222,158,48)" fg:x="1009" fg:w="4"/><text x="36.6366%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (2 samples, 0.07%)</title><rect x="36.4587%" y="293" width="0.0721%" height="15" fill="rgb(254,2,54)" fg:x="1011" fg:w="2"/><text x="36.7087%" y="303.50"></text></g><g><title>__GI_memcpy (2 samples, 0.07%)</title><rect x="36.6390%" y="181" width="0.0721%" height="15" fill="rgb(250,143,38)" fg:x="1016" fg:w="2"/><text x="36.8890%" y="191.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="36.6390%" y="165" width="0.0721%" height="15" fill="rgb(248,25,0)" fg:x="1016" fg:w="2"/><text x="36.8890%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.25%)</title><rect x="36.5308%" y="277" width="0.2524%" height="15" fill="rgb(206,152,27)" fg:x="1013" fg:w="7"/><text x="36.7808%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.22%)</title><rect x="36.5669%" y="261" width="0.2164%" height="15" fill="rgb(240,77,30)" fg:x="1014" fg:w="6"/><text x="36.8169%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.22%)</title><rect x="36.5669%" y="245" width="0.2164%" height="15" fill="rgb(231,5,3)" fg:x="1014" fg:w="6"/><text x="36.8169%" y="255.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.22%)</title><rect x="36.5669%" y="229" width="0.2164%" height="15" fill="rgb(207,226,32)" fg:x="1014" fg:w="6"/><text x="36.8169%" y="239.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.22%)</title><rect x="36.5669%" y="213" width="0.2164%" height="15" fill="rgb(222,207,47)" fg:x="1014" fg:w="6"/><text x="36.8169%" y="223.50"></text></g><g><title>_int_realloc (6 samples, 0.22%)</title><rect x="36.5669%" y="197" width="0.2164%" height="15" fill="rgb(229,115,45)" fg:x="1014" fg:w="6"/><text x="36.8169%" y="207.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="36.7111%" y="181" width="0.0721%" height="15" fill="rgb(224,191,6)" fg:x="1018" fg:w="2"/><text x="36.9611%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (13 samples, 0.47%)</title><rect x="36.3505%" y="341" width="0.4688%" height="15" fill="rgb(230,227,24)" fg:x="1008" fg:w="13"/><text x="36.6005%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (12 samples, 0.43%)</title><rect x="36.3866%" y="325" width="0.4327%" height="15" fill="rgb(228,80,19)" fg:x="1009" fg:w="12"/><text x="36.6366%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (8 samples, 0.29%)</title><rect x="36.5308%" y="309" width="0.2885%" height="15" fill="rgb(247,229,0)" fg:x="1013" fg:w="8"/><text x="36.7808%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.29%)</title><rect x="36.5308%" y="293" width="0.2885%" height="15" fill="rgb(237,194,15)" fg:x="1013" fg:w="8"/><text x="36.7808%" y="303.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="36.7833%" y="277" width="0.0361%" height="15" fill="rgb(219,203,20)" fg:x="1020" fg:w="1"/><text x="37.0333%" y="287.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="36.7833%" y="261" width="0.0361%" height="15" fill="rgb(234,128,8)" fg:x="1020" fg:w="1"/><text x="37.0333%" y="271.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="36.7833%" y="245" width="0.0361%" height="15" fill="rgb(248,202,8)" fg:x="1020" fg:w="1"/><text x="37.0333%" y="255.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (40 samples, 1.44%)</title><rect x="35.8817%" y="421" width="1.4425%" height="15" fill="rgb(206,104,37)" fg:x="995" fg:w="40"/><text x="36.1317%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (35 samples, 1.26%)</title><rect x="36.0620%" y="405" width="1.2622%" height="15" fill="rgb(223,8,27)" fg:x="1000" fg:w="35"/><text x="36.3120%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (33 samples, 1.19%)</title><rect x="36.1342%" y="389" width="1.1900%" height="15" fill="rgb(216,217,28)" fg:x="1002" fg:w="33"/><text x="36.3842%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (33 samples, 1.19%)</title><rect x="36.1342%" y="373" width="1.1900%" height="15" fill="rgb(249,199,1)" fg:x="1002" fg:w="33"/><text x="36.3842%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (33 samples, 1.19%)</title><rect x="36.1342%" y="357" width="1.1900%" height="15" fill="rgb(240,85,17)" fg:x="1002" fg:w="33"/><text x="36.3842%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.50%)</title><rect x="36.8193%" y="341" width="0.5049%" height="15" fill="rgb(206,108,45)" fg:x="1021" fg:w="14"/><text x="37.0693%" y="351.50"></text></g><g><title>__memcpy_avx_unaligned_erms (13 samples, 0.47%)</title><rect x="36.8554%" y="325" width="0.4688%" height="15" fill="rgb(245,210,41)" fg:x="1022" fg:w="13"/><text x="37.1054%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.11%)</title><rect x="37.3242%" y="421" width="0.1082%" height="15" fill="rgb(206,13,37)" fg:x="1035" fg:w="3"/><text x="37.5742%" y="431.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (134 samples, 4.83%)</title><rect x="32.6361%" y="469" width="4.8323%" height="15" fill="rgb(250,61,18)" fg:x="905" fg:w="134"/><text x="32.8861%" y="479.50">serde_..</text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (120 samples, 4.33%)</title><rect x="33.1410%" y="453" width="4.3274%" height="15" fill="rgb(235,172,48)" fg:x="919" fg:w="120"/><text x="33.3910%" y="463.50">serde..</text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (59 samples, 2.13%)</title><rect x="35.3408%" y="437" width="2.1277%" height="15" fill="rgb(249,201,17)" fg:x="980" fg:w="59"/><text x="35.5908%" y="447.50">s..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.04%)</title><rect x="37.4324%" y="421" width="0.0361%" height="15" fill="rgb(219,208,6)" fg:x="1038" fg:w="1"/><text x="37.6824%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="37.4324%" y="405" width="0.0361%" height="15" fill="rgb(248,31,23)" fg:x="1038" fg:w="1"/><text x="37.6824%" y="415.50"></text></g><g><title>mmap_payload_storage::payload::Payload::to_bytes (202 samples, 7.28%)</title><rect x="30.9773%" y="725" width="7.2845%" height="15" fill="rgb(245,15,42)" fg:x="859" fg:w="202"/><text x="31.2273%" y="735.50">mmap_paylo..</text></g><g><title>serde_cbor::ser::to_vec (202 samples, 7.28%)</title><rect x="30.9773%" y="709" width="7.2845%" height="15" fill="rgb(222,217,39)" fg:x="859" fg:w="202"/><text x="31.2273%" y="719.50">serde_cbor..</text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::ser::Serialize for mmap_payload_storage::payload::Payload&gt;::serialize (202 samples, 7.28%)</title><rect x="30.9773%" y="693" width="7.2845%" height="15" fill="rgb(210,219,27)" fg:x="859" fg:w="202"/><text x="31.2273%" y="703.50">mmap_paylo..</text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_newtype_struct (202 samples, 7.28%)</title><rect x="30.9773%" y="677" width="7.2845%" height="15" fill="rgb(252,166,36)" fg:x="859" fg:w="202"/><text x="31.2273%" y="687.50">&lt;&amp;mut serd..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::ser::Serialize&gt;::serialize (202 samples, 7.28%)</title><rect x="30.9773%" y="661" width="7.2845%" height="15" fill="rgb(245,132,34)" fg:x="859" fg:w="202"/><text x="31.2273%" y="671.50">&lt;serde_jso..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (197 samples, 7.10%)</title><rect x="31.1576%" y="645" width="7.1042%" height="15" fill="rgb(236,54,3)" fg:x="864" fg:w="197"/><text x="31.4076%" y="655.50">serde::ser..</text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_value (187 samples, 6.74%)</title><rect x="31.5182%" y="629" width="6.7436%" height="15" fill="rgb(241,173,43)" fg:x="874" fg:w="187"/><text x="31.7682%" y="639.50">&lt;serde_cb..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (186 samples, 6.71%)</title><rect x="31.5543%" y="613" width="6.7075%" height="15" fill="rgb(215,190,9)" fg:x="875" fg:w="186"/><text x="31.8043%" y="623.50">serde_jso..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (182 samples, 6.56%)</title><rect x="31.6985%" y="597" width="6.5633%" height="15" fill="rgb(242,101,16)" fg:x="879" fg:w="182"/><text x="31.9485%" y="607.50">serde::se..</text></g><g><title>serde::ser::Serializer::collect_seq (182 samples, 6.56%)</title><rect x="31.6985%" y="581" width="6.5633%" height="15" fill="rgb(223,190,21)" fg:x="879" fg:w="182"/><text x="31.9485%" y="591.50">serde::se..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (177 samples, 6.38%)</title><rect x="31.8788%" y="565" width="6.3830%" height="15" fill="rgb(215,228,25)" fg:x="884" fg:w="177"/><text x="32.1288%" y="575.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (177 samples, 6.38%)</title><rect x="31.8788%" y="549" width="6.3830%" height="15" fill="rgb(225,36,22)" fg:x="884" fg:w="177"/><text x="32.1288%" y="559.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (162 samples, 5.84%)</title><rect x="32.4198%" y="533" width="5.8420%" height="15" fill="rgb(251,106,46)" fg:x="899" fg:w="162"/><text x="32.6698%" y="543.50">core::i..</text></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (162 samples, 5.84%)</title><rect x="32.4198%" y="517" width="5.8420%" height="15" fill="rgb(208,90,1)" fg:x="899" fg:w="162"/><text x="32.6698%" y="527.50">serde::..</text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeSeq&gt;::serialize_element (162 samples, 5.84%)</title><rect x="32.4198%" y="501" width="5.8420%" height="15" fill="rgb(243,10,4)" fg:x="899" fg:w="162"/><text x="32.6698%" y="511.50">&lt;serde_..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (162 samples, 5.84%)</title><rect x="32.4198%" y="485" width="5.8420%" height="15" fill="rgb(212,137,27)" fg:x="899" fg:w="162"/><text x="32.6698%" y="495.50">serde::..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (22 samples, 0.79%)</title><rect x="37.4684%" y="469" width="0.7934%" height="15" fill="rgb(231,220,49)" fg:x="1039" fg:w="22"/><text x="37.7184%" y="479.50"></text></g><g><title>&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (9 samples, 0.32%)</title><rect x="37.9373%" y="453" width="0.3246%" height="15" fill="rgb(237,96,20)" fg:x="1052" fg:w="9"/><text x="38.1873%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.04%)</title><rect x="38.2618%" y="677" width="0.0361%" height="15" fill="rgb(239,229,30)" fg:x="1061" fg:w="1"/><text x="38.5118%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.04%)</title><rect x="38.2618%" y="661" width="0.0361%" height="15" fill="rgb(219,65,33)" fg:x="1061" fg:w="1"/><text x="38.5118%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (1 samples, 0.04%)</title><rect x="38.2618%" y="645" width="0.0361%" height="15" fill="rgb(243,134,7)" fg:x="1061" fg:w="1"/><text x="38.5118%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_unchecked (1 samples, 0.04%)</title><rect x="38.2618%" y="629" width="0.0361%" height="15" fill="rgb(216,177,54)" fg:x="1061" fg:w="1"/><text x="38.5118%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (1 samples, 0.04%)</title><rect x="38.2618%" y="613" width="0.0361%" height="15" fill="rgb(211,160,20)" fg:x="1061" fg:w="1"/><text x="38.5118%" y="623.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.04%)</title><rect x="38.2618%" y="597" width="0.0361%" height="15" fill="rgb(239,85,39)" fg:x="1061" fg:w="1"/><text x="38.5118%" y="607.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.04%)</title><rect x="38.2618%" y="581" width="0.0361%" height="15" fill="rgb(232,125,22)" fg:x="1061" fg:w="1"/><text x="38.5118%" y="591.50"></text></g><g><title>_int_realloc (1 samples, 0.04%)</title><rect x="38.2618%" y="565" width="0.0361%" height="15" fill="rgb(244,57,34)" fg:x="1061" fg:w="1"/><text x="38.5118%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.11%)</title><rect x="38.2979%" y="677" width="0.1082%" height="15" fill="rgb(214,203,32)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="38.2979%" y="661" width="0.1082%" height="15" fill="rgb(207,58,43)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="38.2979%" y="645" width="0.1082%" height="15" fill="rgb(215,193,15)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.11%)</title><rect x="38.2979%" y="629" width="0.1082%" height="15" fill="rgb(232,15,44)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="38.2979%" y="613" width="0.1082%" height="15" fill="rgb(212,3,48)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="38.2979%" y="597" width="0.1082%" height="15" fill="rgb(218,128,7)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="607.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="38.2979%" y="581" width="0.1082%" height="15" fill="rgb(226,216,39)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="591.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.11%)</title><rect x="38.2979%" y="565" width="0.1082%" height="15" fill="rgb(243,47,51)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="575.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="38.2979%" y="549" width="0.1082%" height="15" fill="rgb(241,183,40)" fg:x="1062" fg:w="3"/><text x="38.5479%" y="559.50"></text></g><g><title>unlink_chunk (2 samples, 0.07%)</title><rect x="38.3339%" y="533" width="0.0721%" height="15" fill="rgb(231,217,32)" fg:x="1063" fg:w="2"/><text x="38.5839%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.04%)</title><rect x="38.4061%" y="677" width="0.0361%" height="15" fill="rgb(229,61,38)" fg:x="1065" fg:w="1"/><text x="38.6561%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="38.4782%" y="661" width="0.0361%" height="15" fill="rgb(225,210,5)" fg:x="1067" fg:w="1"/><text x="38.7282%" y="671.50"></text></g><g><title>lz4_flex::block::compress::get_batch (5 samples, 0.18%)</title><rect x="40.4616%" y="629" width="0.1803%" height="15" fill="rgb(231,79,45)" fg:x="1122" fg:w="5"/><text x="40.7116%" y="639.50"></text></g><g><title>lz4_flex::block::compress::read_u32_ptr (5 samples, 0.18%)</title><rect x="40.4616%" y="613" width="0.1803%" height="15" fill="rgb(224,100,7)" fg:x="1122" fg:w="5"/><text x="40.7116%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.18%)</title><rect x="40.4616%" y="597" width="0.1803%" height="15" fill="rgb(241,198,18)" fg:x="1122" fg:w="5"/><text x="40.7116%" y="607.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::get_hash_at (7 samples, 0.25%)</title><rect x="40.4616%" y="645" width="0.2524%" height="15" fill="rgb(252,97,53)" fg:x="1122" fg:w="7"/><text x="40.7116%" y="655.50"></text></g><g><title>lz4_flex::block::hashtable::hash (2 samples, 0.07%)</title><rect x="40.6419%" y="629" width="0.0721%" height="15" fill="rgb(220,88,7)" fg:x="1127" fg:w="2"/><text x="40.8919%" y="639.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_mul (2 samples, 0.07%)</title><rect x="40.6419%" y="613" width="0.0721%" height="15" fill="rgb(213,176,14)" fg:x="1127" fg:w="2"/><text x="40.8919%" y="623.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::put_at (2 samples, 0.07%)</title><rect x="40.7140%" y="645" width="0.0721%" height="15" fill="rgb(246,73,7)" fg:x="1129" fg:w="2"/><text x="40.9640%" y="655.50"></text></g><g><title>lz4_flex::block::compress::backtrack_match (1 samples, 0.04%)</title><rect x="40.7862%" y="645" width="0.0361%" height="15" fill="rgb(245,64,36)" fg:x="1131" fg:w="1"/><text x="41.0362%" y="655.50"></text></g><g><title>lz4_flex::block::compress::compress_internal (65 samples, 2.34%)</title><rect x="38.5142%" y="661" width="2.3440%" height="15" fill="rgb(245,80,10)" fg:x="1068" fg:w="65"/><text x="38.7642%" y="671.50">l..</text></g><g><title>lz4_flex::block::compress::copy_literals_wild (1 samples, 0.04%)</title><rect x="40.8222%" y="645" width="0.0361%" height="15" fill="rgb(232,107,50)" fg:x="1132" fg:w="1"/><text x="41.0722%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="40.8222%" y="629" width="0.0361%" height="15" fill="rgb(253,3,0)" fg:x="1132" fg:w="1"/><text x="41.0722%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="40.8222%" y="613" width="0.0361%" height="15" fill="rgb(212,99,53)" fg:x="1132" fg:w="1"/><text x="41.0722%" y="623.50"></text></g><g><title>__libc_calloc (3 samples, 0.11%)</title><rect x="40.8583%" y="533" width="0.1082%" height="15" fill="rgb(249,111,54)" fg:x="1133" fg:w="3"/><text x="41.1083%" y="543.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="40.9304%" y="517" width="0.0361%" height="15" fill="rgb(249,55,30)" fg:x="1135" fg:w="1"/><text x="41.1804%" y="527.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::compress (85 samples, 3.07%)</title><rect x="38.2618%" y="725" width="3.0653%" height="15" fill="rgb(237,47,42)" fg:x="1061" fg:w="85"/><text x="38.5118%" y="735.50">mma..</text></g><g><title>lz4_flex::block::compress::compress_prepend_size (85 samples, 3.07%)</title><rect x="38.2618%" y="709" width="3.0653%" height="15" fill="rgb(211,20,18)" fg:x="1061" fg:w="85"/><text x="38.5118%" y="719.50">lz4..</text></g><g><title>lz4_flex::block::compress::compress_into_vec_with_dict (85 samples, 3.07%)</title><rect x="38.2618%" y="693" width="3.0653%" height="15" fill="rgb(231,203,46)" fg:x="1061" fg:w="85"/><text x="38.5118%" y="703.50">lz4..</text></g><g><title>lz4_flex::block::compress::compress_into_sink_with_dict (80 samples, 2.88%)</title><rect x="38.4421%" y="677" width="2.8850%" height="15" fill="rgb(237,142,3)" fg:x="1066" fg:w="80"/><text x="38.6921%" y="687.50">lz..</text></g><g><title>lz4_flex::block::hashtable::HashTable4KU16::new (13 samples, 0.47%)</title><rect x="40.8583%" y="661" width="0.4688%" height="15" fill="rgb(241,107,1)" fg:x="1133" fg:w="13"/><text x="41.1083%" y="671.50"></text></g><g><title>alloc::vec::from_elem (13 samples, 0.47%)</title><rect x="40.8583%" y="645" width="0.4688%" height="15" fill="rgb(229,83,13)" fg:x="1133" fg:w="13"/><text x="41.1083%" y="655.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (13 samples, 0.47%)</title><rect x="40.8583%" y="629" width="0.4688%" height="15" fill="rgb(241,91,40)" fg:x="1133" fg:w="13"/><text x="41.1083%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (13 samples, 0.47%)</title><rect x="40.8583%" y="613" width="0.4688%" height="15" fill="rgb(225,3,45)" fg:x="1133" fg:w="13"/><text x="41.1083%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (13 samples, 0.47%)</title><rect x="40.8583%" y="597" width="0.4688%" height="15" fill="rgb(244,223,14)" fg:x="1133" fg:w="13"/><text x="41.1083%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (13 samples, 0.47%)</title><rect x="40.8583%" y="581" width="0.4688%" height="15" fill="rgb(224,124,37)" fg:x="1133" fg:w="13"/><text x="41.1083%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.47%)</title><rect x="40.8583%" y="565" width="0.4688%" height="15" fill="rgb(251,171,30)" fg:x="1133" fg:w="13"/><text x="41.1083%" y="575.50"></text></g><g><title>alloc::alloc::alloc_zeroed (13 samples, 0.47%)</title><rect x="40.8583%" y="549" width="0.4688%" height="15" fill="rgb(236,46,54)" fg:x="1133" fg:w="13"/><text x="41.1083%" y="559.50"></text></g><g><title>__memset_avx2_unaligned_erms (10 samples, 0.36%)</title><rect x="40.9665%" y="533" width="0.3606%" height="15" fill="rgb(245,213,5)" fg:x="1136" fg:w="10"/><text x="41.2165%" y="543.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::find_first_fitting_page (1 samples, 0.04%)</title><rect x="41.3271%" y="725" width="0.0361%" height="15" fill="rgb(230,144,27)" fg:x="1146" fg:w="1"/><text x="41.5771%" y="735.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::peek (1 samples, 0.04%)</title><rect x="41.3271%" y="709" width="0.0361%" height="15" fill="rgb(220,86,6)" fg:x="1146" fg:w="1"/><text x="41.5771%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (1 samples, 0.04%)</title><rect x="41.3271%" y="693" width="0.0361%" height="15" fill="rgb(240,20,13)" fg:x="1146" fg:w="1"/><text x="41.5771%" y="703.50"></text></g><g><title>__filemap_get_folio (1 samples, 0.04%)</title><rect x="41.7238%" y="517" width="0.0361%" height="15" fill="rgb(217,89,34)" fg:x="1157" fg:w="1"/><text x="41.9738%" y="527.50"></text></g><g><title>filemap_add_folio (2 samples, 0.07%)</title><rect x="41.7598%" y="469" width="0.0721%" height="15" fill="rgb(229,13,5)" fg:x="1158" fg:w="2"/><text x="42.0098%" y="479.50"></text></g><g><title>__filemap_add_folio (2 samples, 0.07%)</title><rect x="41.7598%" y="453" width="0.0721%" height="15" fill="rgb(244,67,35)" fg:x="1158" fg:w="2"/><text x="42.0098%" y="463.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.04%)</title><rect x="41.7959%" y="437" width="0.0361%" height="15" fill="rgb(221,40,2)" fg:x="1159" fg:w="1"/><text x="42.0459%" y="447.50"></text></g><g><title>try_charge_memcg (1 samples, 0.04%)</title><rect x="41.7959%" y="421" width="0.0361%" height="15" fill="rgb(237,157,21)" fg:x="1159" fg:w="1"/><text x="42.0459%" y="431.50"></text></g><g><title>clear_page_erms (2 samples, 0.07%)</title><rect x="41.9401%" y="389" width="0.0721%" height="15" fill="rgb(222,94,11)" fg:x="1163" fg:w="2"/><text x="42.1901%" y="399.50"></text></g><g><title>filemap_alloc_folio (6 samples, 0.22%)</title><rect x="41.8320%" y="469" width="0.2164%" height="15" fill="rgb(249,113,6)" fg:x="1160" fg:w="6"/><text x="42.0820%" y="479.50"></text></g><g><title>folio_alloc (6 samples, 0.22%)</title><rect x="41.8320%" y="453" width="0.2164%" height="15" fill="rgb(238,137,36)" fg:x="1160" fg:w="6"/><text x="42.0820%" y="463.50"></text></g><g><title>alloc_pages_mpol (6 samples, 0.22%)</title><rect x="41.8320%" y="437" width="0.2164%" height="15" fill="rgb(210,102,26)" fg:x="1160" fg:w="6"/><text x="42.0820%" y="447.50"></text></g><g><title>__alloc_pages (6 samples, 0.22%)</title><rect x="41.8320%" y="421" width="0.2164%" height="15" fill="rgb(218,30,30)" fg:x="1160" fg:w="6"/><text x="42.0820%" y="431.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.14%)</title><rect x="41.9041%" y="405" width="0.1442%" height="15" fill="rgb(214,67,26)" fg:x="1162" fg:w="4"/><text x="42.1541%" y="415.50"></text></g><g><title>rmqueue (1 samples, 0.04%)</title><rect x="42.0123%" y="389" width="0.0361%" height="15" fill="rgb(251,9,53)" fg:x="1165" fg:w="1"/><text x="42.2623%" y="399.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.04%)</title><rect x="42.0123%" y="373" width="0.0361%" height="15" fill="rgb(228,204,25)" fg:x="1165" fg:w="1"/><text x="42.2623%" y="383.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.04%)</title><rect x="42.0123%" y="357" width="0.0361%" height="15" fill="rgb(207,153,8)" fg:x="1165" fg:w="1"/><text x="42.2623%" y="367.50"></text></g><g><title>_raw_read_unlock (1 samples, 0.04%)</title><rect x="42.0844%" y="405" width="0.0361%" height="15" fill="rgb(242,9,16)" fg:x="1167" fg:w="1"/><text x="42.3344%" y="415.50"></text></g><g><title>ext4_map_blocks (2 samples, 0.07%)</title><rect x="42.0844%" y="421" width="0.0721%" height="15" fill="rgb(217,211,10)" fg:x="1167" fg:w="2"/><text x="42.3344%" y="431.50"></text></g><g><title>ext4_es_lookup_extent (1 samples, 0.04%)</title><rect x="42.1204%" y="405" width="0.0361%" height="15" fill="rgb(219,228,52)" fg:x="1168" fg:w="1"/><text x="42.3704%" y="415.50"></text></g><g><title>__do_fault (14 samples, 0.50%)</title><rect x="41.7238%" y="549" width="0.5049%" height="15" fill="rgb(231,92,29)" fg:x="1157" fg:w="14"/><text x="41.9738%" y="559.50"></text></g><g><title>filemap_fault (14 samples, 0.50%)</title><rect x="41.7238%" y="533" width="0.5049%" height="15" fill="rgb(232,8,23)" fg:x="1157" fg:w="14"/><text x="41.9738%" y="543.50"></text></g><g><title>do_sync_mmap_readahead (13 samples, 0.47%)</title><rect x="41.7598%" y="517" width="0.4688%" height="15" fill="rgb(216,211,34)" fg:x="1158" fg:w="13"/><text x="42.0098%" y="527.50"></text></g><g><title>page_cache_ra_order (13 samples, 0.47%)</title><rect x="41.7598%" y="501" width="0.4688%" height="15" fill="rgb(236,151,0)" fg:x="1158" fg:w="13"/><text x="42.0098%" y="511.50"></text></g><g><title>page_cache_ra_unbounded (13 samples, 0.47%)</title><rect x="41.7598%" y="485" width="0.4688%" height="15" fill="rgb(209,168,3)" fg:x="1158" fg:w="13"/><text x="42.0098%" y="495.50"></text></g><g><title>read_pages (5 samples, 0.18%)</title><rect x="42.0483%" y="469" width="0.1803%" height="15" fill="rgb(208,129,28)" fg:x="1166" fg:w="5"/><text x="42.2983%" y="479.50"></text></g><g><title>ext4_readahead (5 samples, 0.18%)</title><rect x="42.0483%" y="453" width="0.1803%" height="15" fill="rgb(229,78,22)" fg:x="1166" fg:w="5"/><text x="42.2983%" y="463.50"></text></g><g><title>ext4_mpage_readpages (5 samples, 0.18%)</title><rect x="42.0483%" y="437" width="0.1803%" height="15" fill="rgb(228,187,13)" fg:x="1166" fg:w="5"/><text x="42.2983%" y="447.50"></text></g><g><title>memset_orig (2 samples, 0.07%)</title><rect x="42.1565%" y="421" width="0.0721%" height="15" fill="rgb(240,119,24)" fg:x="1169" fg:w="2"/><text x="42.4065%" y="431.50"></text></g><g><title>__block_commit_write (1 samples, 0.04%)</title><rect x="42.2286%" y="501" width="0.0361%" height="15" fill="rgb(209,194,42)" fg:x="1171" fg:w="1"/><text x="42.4786%" y="511.50"></text></g><g><title>__dquot_alloc_space (1 samples, 0.04%)</title><rect x="42.3729%" y="453" width="0.0361%" height="15" fill="rgb(247,200,46)" fg:x="1175" fg:w="1"/><text x="42.6229%" y="463.50"></text></g><g><title>ext4_da_get_block_prep (4 samples, 0.14%)</title><rect x="42.3008%" y="485" width="0.1442%" height="15" fill="rgb(218,76,16)" fg:x="1173" fg:w="4"/><text x="42.5508%" y="495.50"></text></g><g><title>ext4_da_map_blocks.constprop.0 (4 samples, 0.14%)</title><rect x="42.3008%" y="469" width="0.1442%" height="15" fill="rgb(225,21,48)" fg:x="1173" fg:w="4"/><text x="42.5508%" y="479.50"></text></g><g><title>ext4_es_lookup_extent (1 samples, 0.04%)</title><rect x="42.4089%" y="453" width="0.0361%" height="15" fill="rgb(239,223,50)" fg:x="1176" fg:w="1"/><text x="42.6589%" y="463.50"></text></g><g><title>folio_create_buffers (2 samples, 0.07%)</title><rect x="42.4450%" y="485" width="0.0721%" height="15" fill="rgb(244,45,21)" fg:x="1177" fg:w="2"/><text x="42.6950%" y="495.50"></text></g><g><title>create_empty_buffers (2 samples, 0.07%)</title><rect x="42.4450%" y="469" width="0.0721%" height="15" fill="rgb(232,33,43)" fg:x="1177" fg:w="2"/><text x="42.6950%" y="479.50"></text></g><g><title>folio_alloc_buffers (2 samples, 0.07%)</title><rect x="42.4450%" y="453" width="0.0721%" height="15" fill="rgb(209,8,3)" fg:x="1177" fg:w="2"/><text x="42.6950%" y="463.50"></text></g><g><title>alloc_buffer_head (2 samples, 0.07%)</title><rect x="42.4450%" y="437" width="0.0721%" height="15" fill="rgb(214,25,53)" fg:x="1177" fg:w="2"/><text x="42.6950%" y="447.50"></text></g><g><title>kmem_cache_alloc (2 samples, 0.07%)</title><rect x="42.4450%" y="421" width="0.0721%" height="15" fill="rgb(254,186,54)" fg:x="1177" fg:w="2"/><text x="42.6950%" y="431.50"></text></g><g><title>__memcg_slab_post_alloc_hook (1 samples, 0.04%)</title><rect x="42.4811%" y="405" width="0.0361%" height="15" fill="rgb(208,174,49)" fg:x="1178" fg:w="1"/><text x="42.7311%" y="415.50"></text></g><g><title>_raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="42.5171%" y="453" width="0.0361%" height="15" fill="rgb(233,191,51)" fg:x="1179" fg:w="1"/><text x="42.7671%" y="463.50"></text></g><g><title>__raw_spin_lock_irqsave (1 samples, 0.04%)</title><rect x="42.5171%" y="437" width="0.0361%" height="15" fill="rgb(222,134,10)" fg:x="1179" fg:w="1"/><text x="42.7671%" y="447.50"></text></g><g><title>__folio_mark_dirty (2 samples, 0.07%)</title><rect x="42.5171%" y="469" width="0.0721%" height="15" fill="rgb(230,226,20)" fg:x="1179" fg:w="2"/><text x="42.7671%" y="479.50"></text></g><g><title>folio_account_dirtied (1 samples, 0.04%)</title><rect x="42.5532%" y="453" width="0.0361%" height="15" fill="rgb(251,111,25)" fg:x="1180" fg:w="1"/><text x="42.8032%" y="463.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.04%)</title><rect x="42.5532%" y="437" width="0.0361%" height="15" fill="rgb(224,40,46)" fg:x="1180" fg:w="1"/><text x="42.8032%" y="447.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.04%)</title><rect x="42.5532%" y="421" width="0.0361%" height="15" fill="rgb(236,108,47)" fg:x="1180" fg:w="1"/><text x="42.8032%" y="431.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.04%)</title><rect x="42.5532%" y="405" width="0.0361%" height="15" fill="rgb(234,93,0)" fg:x="1180" fg:w="1"/><text x="42.8032%" y="415.50"></text></g><g><title>folio_memcg_lock (1 samples, 0.04%)</title><rect x="42.5893%" y="469" width="0.0361%" height="15" fill="rgb(224,213,32)" fg:x="1181" fg:w="1"/><text x="42.8393%" y="479.50"></text></g><g><title>__block_write_begin_int (11 samples, 0.40%)</title><rect x="42.2647%" y="501" width="0.3967%" height="15" fill="rgb(251,11,48)" fg:x="1172" fg:w="11"/><text x="42.5147%" y="511.50"></text></g><g><title>mark_buffer_dirty (4 samples, 0.14%)</title><rect x="42.5171%" y="485" width="0.1442%" height="15" fill="rgb(236,173,5)" fg:x="1179" fg:w="4"/><text x="42.7671%" y="495.50"></text></g><g><title>folio_memcg_unlock (1 samples, 0.04%)</title><rect x="42.6253%" y="469" width="0.0361%" height="15" fill="rgb(230,95,12)" fg:x="1182" fg:w="1"/><text x="42.8753%" y="479.50"></text></g><g><title>do_page_mkwrite (13 samples, 0.47%)</title><rect x="42.2286%" y="549" width="0.4688%" height="15" fill="rgb(232,209,1)" fg:x="1171" fg:w="13"/><text x="42.4786%" y="559.50"></text></g><g><title>ext4_page_mkwrite (13 samples, 0.47%)</title><rect x="42.2286%" y="533" width="0.4688%" height="15" fill="rgb(232,6,1)" fg:x="1171" fg:w="13"/><text x="42.4786%" y="543.50"></text></g><g><title>block_page_mkwrite (13 samples, 0.47%)</title><rect x="42.2286%" y="517" width="0.4688%" height="15" fill="rgb(210,224,50)" fg:x="1171" fg:w="13"/><text x="42.4786%" y="527.50"></text></g><g><title>folio_mark_dirty (1 samples, 0.04%)</title><rect x="42.6614%" y="501" width="0.0361%" height="15" fill="rgb(228,127,35)" fg:x="1183" fg:w="1"/><text x="42.9114%" y="511.50"></text></g><g><title>folio_mapping (1 samples, 0.04%)</title><rect x="42.6614%" y="485" width="0.0361%" height="15" fill="rgb(245,102,45)" fg:x="1183" fg:w="1"/><text x="42.9114%" y="495.50"></text></g><g><title>balance_dirty_pages_ratelimited (1 samples, 0.04%)</title><rect x="42.6974%" y="533" width="0.0361%" height="15" fill="rgb(214,1,49)" fg:x="1184" fg:w="1"/><text x="42.9474%" y="543.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (1 samples, 0.04%)</title><rect x="42.6974%" y="517" width="0.0361%" height="15" fill="rgb(226,163,40)" fg:x="1184" fg:w="1"/><text x="42.9474%" y="527.50"></text></g><g><title>do_user_addr_fault (29 samples, 1.05%)</title><rect x="41.7238%" y="629" width="1.0458%" height="15" fill="rgb(239,212,28)" fg:x="1157" fg:w="29"/><text x="41.9738%" y="639.50"></text></g><g><title>handle_mm_fault (29 samples, 1.05%)</title><rect x="41.7238%" y="613" width="1.0458%" height="15" fill="rgb(220,20,13)" fg:x="1157" fg:w="29"/><text x="41.9738%" y="623.50"></text></g><g><title>__handle_mm_fault (29 samples, 1.05%)</title><rect x="41.7238%" y="597" width="1.0458%" height="15" fill="rgb(210,164,35)" fg:x="1157" fg:w="29"/><text x="41.9738%" y="607.50"></text></g><g><title>handle_pte_fault (29 samples, 1.05%)</title><rect x="41.7238%" y="581" width="1.0458%" height="15" fill="rgb(248,109,41)" fg:x="1157" fg:w="29"/><text x="41.9738%" y="591.50"></text></g><g><title>do_fault (29 samples, 1.05%)</title><rect x="41.7238%" y="565" width="1.0458%" height="15" fill="rgb(238,23,50)" fg:x="1157" fg:w="29"/><text x="41.9738%" y="575.50"></text></g><g><title>fault_dirty_shared_page (2 samples, 0.07%)</title><rect x="42.6974%" y="549" width="0.0721%" height="15" fill="rgb(211,48,49)" fg:x="1184" fg:w="2"/><text x="42.9474%" y="559.50"></text></g><g><title>up_read (1 samples, 0.04%)</title><rect x="42.7335%" y="533" width="0.0361%" height="15" fill="rgb(223,36,21)" fg:x="1185" fg:w="1"/><text x="42.9835%" y="543.50"></text></g><g><title>asm_exc_page_fault (30 samples, 1.08%)</title><rect x="41.7238%" y="661" width="1.0819%" height="15" fill="rgb(207,123,46)" fg:x="1157" fg:w="30"/><text x="41.9738%" y="671.50"></text></g><g><title>exc_page_fault (30 samples, 1.08%)</title><rect x="41.7238%" y="645" width="1.0819%" height="15" fill="rgb(240,218,32)" fg:x="1157" fg:w="30"/><text x="41.9738%" y="655.50"></text></g><g><title>irqentry_exit (1 samples, 0.04%)</title><rect x="42.7696%" y="629" width="0.0361%" height="15" fill="rgb(252,5,43)" fg:x="1186" fg:w="1"/><text x="43.0196%" y="639.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.04%)</title><rect x="42.7696%" y="613" width="0.0361%" height="15" fill="rgb(252,84,19)" fg:x="1186" fg:w="1"/><text x="43.0196%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (42 samples, 1.51%)</title><rect x="41.3992%" y="709" width="1.5146%" height="15" fill="rgb(243,152,39)" fg:x="1148" fg:w="42"/><text x="41.6492%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (42 samples, 1.51%)</title><rect x="41.3992%" y="693" width="1.5146%" height="15" fill="rgb(234,160,15)" fg:x="1148" fg:w="42"/><text x="41.6492%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (42 samples, 1.51%)</title><rect x="41.3992%" y="677" width="1.5146%" height="15" fill="rgb(237,34,20)" fg:x="1148" fg:w="42"/><text x="41.6492%" y="687.50"></text></g><g><title>sync_regs (3 samples, 0.11%)</title><rect x="42.8056%" y="661" width="0.1082%" height="15" fill="rgb(229,97,13)" fg:x="1187" fg:w="3"/><text x="43.0556%" y="671.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::insert_value (45 samples, 1.62%)</title><rect x="41.3631%" y="725" width="1.6228%" height="15" fill="rgb(234,71,50)" fg:x="1147" fg:w="45"/><text x="41.6131%" y="735.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::write_page_header (2 samples, 0.07%)</title><rect x="42.9138%" y="709" width="0.0721%" height="15" fill="rgb(253,155,4)" fg:x="1190" fg:w="2"/><text x="43.1638%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.07%)</title><rect x="42.9138%" y="693" width="0.0721%" height="15" fill="rgb(222,185,37)" fg:x="1190" fg:w="2"/><text x="43.1638%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="42.9138%" y="677" width="0.0721%" height="15" fill="rgb(251,177,13)" fg:x="1190" fg:w="2"/><text x="43.1638%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.04%)</title><rect x="42.9859%" y="709" width="0.0361%" height="15" fill="rgb(250,179,40)" fg:x="1192" fg:w="1"/><text x="43.2359%" y="719.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::change_priority::_{{closure}} (1 samples, 0.04%)</title><rect x="42.9859%" y="693" width="0.0361%" height="15" fill="rgb(242,44,2)" fg:x="1192" fg:w="1"/><text x="43.2359%" y="703.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::up_heapify (1 samples, 0.04%)</title><rect x="42.9859%" y="677" width="0.0361%" height="15" fill="rgb(216,177,13)" fg:x="1192" fg:w="1"/><text x="43.2359%" y="687.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (1 samples, 0.04%)</title><rect x="42.9859%" y="661" width="0.0361%" height="15" fill="rgb(216,106,43)" fg:x="1192" fg:w="1"/><text x="43.2359%" y="671.50"></text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::get_priority_from_position (1 samples, 0.04%)</title><rect x="42.9859%" y="645" width="0.0361%" height="15" fill="rgb(216,183,2)" fg:x="1192" fg:w="1"/><text x="43.2359%" y="655.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (1 samples, 0.04%)</title><rect x="43.0220%" y="661" width="0.0361%" height="15" fill="rgb(249,75,3)" fg:x="1193" fg:w="1"/><text x="43.2720%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="43.0220%" y="645" width="0.0361%" height="15" fill="rgb(219,67,39)" fg:x="1193" fg:w="1"/><text x="43.2720%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="43.0220%" y="629" width="0.0361%" height="15" fill="rgb(253,228,2)" fg:x="1193" fg:w="1"/><text x="43.2720%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="43.0220%" y="613" width="0.0361%" height="15" fill="rgb(235,138,27)" fg:x="1193" fg:w="1"/><text x="43.2720%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.04%)</title><rect x="43.0220%" y="597" width="0.0361%" height="15" fill="rgb(236,97,51)" fg:x="1193" fg:w="1"/><text x="43.2720%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="43.0220%" y="581" width="0.0361%" height="15" fill="rgb(240,80,30)" fg:x="1193" fg:w="1"/><text x="43.2720%" y="591.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::change_priority (3 samples, 0.11%)</title><rect x="42.9859%" y="725" width="0.1082%" height="15" fill="rgb(230,178,19)" fg:x="1192" fg:w="3"/><text x="43.2359%" y="735.50"></text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::change_priority (2 samples, 0.07%)</title><rect x="43.0220%" y="709" width="0.0721%" height="15" fill="rgb(210,190,27)" fg:x="1193" fg:w="2"/><text x="43.2720%" y="719.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_full_mut (2 samples, 0.07%)</title><rect x="43.0220%" y="693" width="0.0721%" height="15" fill="rgb(222,107,31)" fg:x="1193" fg:w="2"/><text x="43.2720%" y="703.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::get_index_of (2 samples, 0.07%)</title><rect x="43.0220%" y="677" width="0.0721%" height="15" fill="rgb(216,127,34)" fg:x="1193" fg:w="2"/><text x="43.2720%" y="687.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::get_index_of (1 samples, 0.04%)</title><rect x="43.0581%" y="661" width="0.0361%" height="15" fill="rgb(234,116,52)" fg:x="1194" fg:w="1"/><text x="43.3081%" y="671.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::get (1 samples, 0.04%)</title><rect x="43.0581%" y="645" width="0.0361%" height="15" fill="rgb(222,124,15)" fg:x="1194" fg:w="1"/><text x="43.3081%" y="655.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (1 samples, 0.04%)</title><rect x="43.0581%" y="629" width="0.0361%" height="15" fill="rgb(231,179,28)" fg:x="1194" fg:w="1"/><text x="43.3081%" y="639.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::find_inner (1 samples, 0.04%)</title><rect x="43.0581%" y="613" width="0.0361%" height="15" fill="rgb(226,93,45)" fg:x="1194" fg:w="1"/><text x="43.3081%" y="623.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner::probe_seq (1 samples, 0.04%)</title><rect x="43.0581%" y="597" width="0.0361%" height="15" fill="rgb(215,8,51)" fg:x="1194" fg:w="1"/><text x="43.3081%" y="607.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::_{{closure}} (1 samples, 0.04%)</title><rect x="43.0941%" y="629" width="0.0361%" height="15" fill="rgb(223,106,5)" fg:x="1195" fg:w="1"/><text x="43.3441%" y="639.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.04%)</title><rect x="43.0941%" y="613" width="0.0361%" height="15" fill="rgb(250,191,5)" fg:x="1195" fg:w="1"/><text x="43.3441%" y="623.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.04%)</title><rect x="43.0941%" y="597" width="0.0361%" height="15" fill="rgb(242,132,44)" fg:x="1195" fg:w="1"/><text x="43.3441%" y="607.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.04%)</title><rect x="43.0941%" y="581" width="0.0361%" height="15" fill="rgb(251,152,29)" fg:x="1195" fg:w="1"/><text x="43.3441%" y="591.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.04%)</title><rect x="43.0941%" y="565" width="0.0361%" height="15" fill="rgb(218,179,5)" fg:x="1195" fg:w="1"/><text x="43.3441%" y="575.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (862 samples, 31.09%)</title><rect x="12.0808%" y="1061" width="31.0855%" height="15" fill="rgb(227,67,19)" fg:x="335" fg:w="862"/><text x="12.3308%" y="1071.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (862 samples, 31.09%)</title><rect x="12.0808%" y="1045" width="31.0855%" height="15" fill="rgb(233,119,31)" fg:x="335" fg:w="862"/><text x="12.3308%" y="1055.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::ben..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (862 samples, 31.09%)</title><rect x="12.0808%" y="1029" width="31.0855%" height="15" fill="rgb(241,120,22)" fg:x="335" fg:w="862"/><text x="12.3308%" y="1039.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run..</text></g><g><title>criterion::routine::Routine::test (862 samples, 31.09%)</title><rect x="12.0808%" y="1013" width="31.0855%" height="15" fill="rgb(224,102,30)" fg:x="335" fg:w="862"/><text x="12.3308%" y="1023.50">criterion::routine::Routine::test</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (862 samples, 31.09%)</title><rect x="12.0808%" y="997" width="31.0855%" height="15" fill="rgb(210,164,37)" fg:x="335" fg:w="862"/><text x="12.3308%" y="1007.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (862 samples, 31.09%)</title><rect x="12.0808%" y="981" width="31.0855%" height="15" fill="rgb(226,191,16)" fg:x="335" fg:w="862"/><text x="12.3308%" y="991.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (862 samples, 31.09%)</title><rect x="12.0808%" y="965" width="31.0855%" height="15" fill="rgb(214,40,45)" fg:x="335" fg:w="862"/><text x="12.3308%" y="975.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (862 samples, 31.09%)</title><rect x="12.0808%" y="949" width="31.0855%" height="15" fill="rgb(244,29,26)" fg:x="335" fg:w="862"/><text x="12.3308%" y="959.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (862 samples, 31.09%)</title><rect x="12.0808%" y="933" width="31.0855%" height="15" fill="rgb(216,16,5)" fg:x="335" fg:w="862"/><text x="12.3308%" y="943.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (862 samples, 31.09%)</title><rect x="12.0808%" y="917" width="31.0855%" height="15" fill="rgb(249,76,35)" fg:x="335" fg:w="862"/><text x="12.3308%" y="927.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (862 samples, 31.09%)</title><rect x="12.0808%" y="901" width="31.0855%" height="15" fill="rgb(207,11,44)" fg:x="335" fg:w="862"/><text x="12.3308%" y="911.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (862 samples, 31.09%)</title><rect x="12.0808%" y="885" width="31.0855%" height="15" fill="rgb(228,190,49)" fg:x="335" fg:w="862"/><text x="12.3308%" y="895.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (862 samples, 31.09%)</title><rect x="12.0808%" y="869" width="31.0855%" height="15" fill="rgb(214,173,12)" fg:x="335" fg:w="862"/><text x="12.3308%" y="879.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (862 samples, 31.09%)</title><rect x="12.0808%" y="853" width="31.0855%" height="15" fill="rgb(218,26,35)" fg:x="335" fg:w="862"/><text x="12.3308%" y="863.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits:..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (862 samples, 31.09%)</title><rect x="12.0808%" y="837" width="31.0855%" height="15" fill="rgb(220,200,19)" fg:x="335" fg:w="862"/><text x="12.3308%" y="847.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (862 samples, 31.09%)</title><rect x="12.0808%" y="821" width="31.0855%" height="15" fill="rgb(239,95,49)" fg:x="335" fg:w="862"/><text x="12.3308%" y="831.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion:..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (862 samples, 31.09%)</title><rect x="12.0808%" y="805" width="31.0855%" height="15" fill="rgb(235,85,53)" fg:x="335" fg:w="862"/><text x="12.3308%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::ben..</text></g><g><title>storage_bench::random_data_bench::_{{closure}} (862 samples, 31.09%)</title><rect x="12.0808%" y="789" width="31.0855%" height="15" fill="rgb(233,133,31)" fg:x="335" fg:w="862"/><text x="12.3308%" y="799.50">storage_bench::random_data_bench::_{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter_batched_ref (341 samples, 12.30%)</title><rect x="30.8691%" y="773" width="12.2972%" height="15" fill="rgb(218,25,20)" fg:x="856" fg:w="341"/><text x="31.1191%" y="783.50">criterion::bencher..</text></g><g><title>storage_bench::random_data_bench::_{{closure}}::_{{closure}} (341 samples, 12.30%)</title><rect x="30.8691%" y="757" width="12.2972%" height="15" fill="rgb(252,210,38)" fg:x="856" fg:w="341"/><text x="31.1191%" y="767.50">storage_bench::ran..</text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::put_payload (341 samples, 12.30%)</title><rect x="30.8691%" y="741" width="12.2972%" height="15" fill="rgb(242,134,21)" fg:x="856" fg:w="341"/><text x="31.1191%" y="751.50">mmap_payload_stora..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2 samples, 0.07%)</title><rect x="43.0941%" y="725" width="0.0721%" height="15" fill="rgb(213,28,48)" fg:x="1195" fg:w="2"/><text x="43.3441%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2 samples, 0.07%)</title><rect x="43.0941%" y="709" width="0.0721%" height="15" fill="rgb(250,196,2)" fg:x="1195" fg:w="2"/><text x="43.3441%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2 samples, 0.07%)</title><rect x="43.0941%" y="693" width="0.0721%" height="15" fill="rgb(227,5,17)" fg:x="1195" fg:w="2"/><text x="43.3441%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.07%)</title><rect x="43.0941%" y="677" width="0.0721%" height="15" fill="rgb(221,226,24)" fg:x="1195" fg:w="2"/><text x="43.3441%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.07%)</title><rect x="43.0941%" y="661" width="0.0721%" height="15" fill="rgb(211,5,48)" fg:x="1195" fg:w="2"/><text x="43.3441%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.07%)</title><rect x="43.0941%" y="645" width="0.0721%" height="15" fill="rgb(219,150,6)" fg:x="1195" fg:w="2"/><text x="43.3441%" y="655.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.04%)</title><rect x="43.1302%" y="629" width="0.0361%" height="15" fill="rgb(251,46,16)" fg:x="1196" fg:w="1"/><text x="43.3802%" y="639.50"></text></g><g><title>storage_bench::random_data_bench (882 samples, 31.81%)</title><rect x="11.3956%" y="1077" width="31.8067%" height="15" fill="rgb(220,204,40)" fg:x="316" fg:w="882"/><text x="11.6456%" y="1087.50">storage_bench::random_data_bench</text></g><g><title>mmap_payload_storage::fixtures::empty_storage (1 samples, 0.04%)</title><rect x="43.1662%" y="1061" width="0.0361%" height="15" fill="rgb(211,85,2)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="1071.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::new (1 samples, 0.04%)</title><rect x="43.1662%" y="1045" width="0.0361%" height="15" fill="rgb(229,17,7)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="1055.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::new (1 samples, 0.04%)</title><rect x="43.1662%" y="1029" width="0.0361%" height="15" fill="rgb(239,72,28)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="1039.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::write_header (1 samples, 0.04%)</title><rect x="43.1662%" y="1013" width="0.0361%" height="15" fill="rgb(230,47,54)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="1023.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.04%)</title><rect x="43.1662%" y="997" width="0.0361%" height="15" fill="rgb(214,50,8)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="1007.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="43.1662%" y="981" width="0.0361%" height="15" fill="rgb(216,198,43)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="991.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="965" width="0.0361%" height="15" fill="rgb(234,20,35)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="975.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="949" width="0.0361%" height="15" fill="rgb(254,45,19)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="959.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="933" width="0.0361%" height="15" fill="rgb(219,14,44)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="943.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="917" width="0.0361%" height="15" fill="rgb(217,220,26)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="927.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="901" width="0.0361%" height="15" fill="rgb(213,158,28)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="911.50"></text></g><g><title>handle_pte_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="885" width="0.0361%" height="15" fill="rgb(252,51,52)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="895.50"></text></g><g><title>do_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="869" width="0.0361%" height="15" fill="rgb(246,89,16)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="879.50"></text></g><g><title>__do_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="853" width="0.0361%" height="15" fill="rgb(216,158,49)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="863.50"></text></g><g><title>filemap_fault (1 samples, 0.04%)</title><rect x="43.1662%" y="837" width="0.0361%" height="15" fill="rgb(236,107,19)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="847.50"></text></g><g><title>do_sync_mmap_readahead (1 samples, 0.04%)</title><rect x="43.1662%" y="821" width="0.0361%" height="15" fill="rgb(228,185,30)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="831.50"></text></g><g><title>page_cache_ra_order (1 samples, 0.04%)</title><rect x="43.1662%" y="805" width="0.0361%" height="15" fill="rgb(246,134,8)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="815.50"></text></g><g><title>page_cache_ra_unbounded (1 samples, 0.04%)</title><rect x="43.1662%" y="789" width="0.0361%" height="15" fill="rgb(214,143,50)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="799.50"></text></g><g><title>read_pages (1 samples, 0.04%)</title><rect x="43.1662%" y="773" width="0.0361%" height="15" fill="rgb(228,75,8)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="783.50"></text></g><g><title>ext4_readahead (1 samples, 0.04%)</title><rect x="43.1662%" y="757" width="0.0361%" height="15" fill="rgb(207,175,4)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="767.50"></text></g><g><title>ext4_mpage_readpages (1 samples, 0.04%)</title><rect x="43.1662%" y="741" width="0.0361%" height="15" fill="rgb(205,108,24)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="751.50"></text></g><g><title>memset_orig (1 samples, 0.04%)</title><rect x="43.1662%" y="725" width="0.0361%" height="15" fill="rgb(244,120,49)" fg:x="1197" fg:w="1"/><text x="43.4162%" y="735.50"></text></g><g><title>folio_mark_accessed (1 samples, 0.04%)</title><rect x="43.2023%" y="629" width="0.0361%" height="15" fill="rgb(223,47,38)" fg:x="1198" fg:w="1"/><text x="43.4523%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload_storage::PayloadStorage&gt; (2 samples, 0.07%)</title><rect x="43.2023%" y="1061" width="0.0721%" height="15" fill="rgb(229,179,11)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,mmap_payload_storage::slotted_page::SlottedPageMmap&gt;&gt; (2 samples, 0.07%)</title><rect x="43.2023%" y="1045" width="0.0721%" height="15" fill="rgb(231,122,1)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,mmap_payload_storage::slotted_page::SlottedPageMmap,std::hash::random::RandomState&gt;&gt; (2 samples, 0.07%)</title><rect x="43.2023%" y="1029" width="0.0721%" height="15" fill="rgb(245,119,9)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,mmap_payload_storage::slotted_page::SlottedPageMmap)&gt;&gt; (2 samples, 0.07%)</title><rect x="43.2023%" y="1013" width="0.0721%" height="15" fill="rgb(241,163,25)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="1023.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="43.2023%" y="997" width="0.0721%" height="15" fill="rgb(217,214,3)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (2 samples, 0.07%)</title><rect x="43.2023%" y="981" width="0.0721%" height="15" fill="rgb(240,86,28)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="991.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (2 samples, 0.07%)</title><rect x="43.2023%" y="965" width="0.0721%" height="15" fill="rgb(215,47,9)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="975.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.07%)</title><rect x="43.2023%" y="949" width="0.0721%" height="15" fill="rgb(252,25,45)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="959.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.07%)</title><rect x="43.2023%" y="933" width="0.0721%" height="15" fill="rgb(251,164,9)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,mmap_payload_storage::slotted_page::SlottedPageMmap)&gt; (2 samples, 0.07%)</title><rect x="43.2023%" y="917" width="0.0721%" height="15" fill="rgb(233,194,0)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::slotted_page::SlottedPageMmap&gt; (2 samples, 0.07%)</title><rect x="43.2023%" y="901" width="0.0721%" height="15" fill="rgb(249,111,24)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::MmapMut&gt; (2 samples, 0.07%)</title><rect x="43.2023%" y="885" width="0.0721%" height="15" fill="rgb(250,223,3)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (2 samples, 0.07%)</title><rect x="43.2023%" y="869" width="0.0721%" height="15" fill="rgb(236,178,37)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="879.50"></text></g><g><title>__GI_munmap (2 samples, 0.07%)</title><rect x="43.2023%" y="853" width="0.0721%" height="15" fill="rgb(241,158,50)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="863.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="43.2023%" y="837" width="0.0721%" height="15" fill="rgb(213,121,41)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="847.50"></text></g><g><title>do_syscall_64 (2 samples, 0.07%)</title><rect x="43.2023%" y="821" width="0.0721%" height="15" fill="rgb(240,92,3)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="831.50"></text></g><g><title>x64_sys_call (2 samples, 0.07%)</title><rect x="43.2023%" y="805" width="0.0721%" height="15" fill="rgb(205,123,3)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="815.50"></text></g><g><title>__x64_sys_munmap (2 samples, 0.07%)</title><rect x="43.2023%" y="789" width="0.0721%" height="15" fill="rgb(205,97,47)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="799.50"></text></g><g><title>__vm_munmap (2 samples, 0.07%)</title><rect x="43.2023%" y="773" width="0.0721%" height="15" fill="rgb(247,152,14)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="783.50"></text></g><g><title>do_vmi_munmap (2 samples, 0.07%)</title><rect x="43.2023%" y="757" width="0.0721%" height="15" fill="rgb(248,195,53)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="767.50"></text></g><g><title>do_vmi_align_munmap (2 samples, 0.07%)</title><rect x="43.2023%" y="741" width="0.0721%" height="15" fill="rgb(226,201,16)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="751.50"></text></g><g><title>unmap_region (2 samples, 0.07%)</title><rect x="43.2023%" y="725" width="0.0721%" height="15" fill="rgb(205,98,0)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="735.50"></text></g><g><title>unmap_vmas (2 samples, 0.07%)</title><rect x="43.2023%" y="709" width="0.0721%" height="15" fill="rgb(214,191,48)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="719.50"></text></g><g><title>unmap_single_vma (2 samples, 0.07%)</title><rect x="43.2023%" y="693" width="0.0721%" height="15" fill="rgb(237,112,39)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="703.50"></text></g><g><title>unmap_page_range (2 samples, 0.07%)</title><rect x="43.2023%" y="677" width="0.0721%" height="15" fill="rgb(247,203,27)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="687.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.07%)</title><rect x="43.2023%" y="661" width="0.0721%" height="15" fill="rgb(235,124,28)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="671.50"></text></g><g><title>zap_pte_range (2 samples, 0.07%)</title><rect x="43.2023%" y="645" width="0.0721%" height="15" fill="rgb(208,207,46)" fg:x="1198" fg:w="2"/><text x="43.4523%" y="655.50"></text></g><g><title>tlb_flush_rmaps (1 samples, 0.04%)</title><rect x="43.2384%" y="629" width="0.0361%" height="15" fill="rgb(234,176,4)" fg:x="1199" fg:w="1"/><text x="43.4884%" y="639.50"></text></g><g><title>tlb_flush_rmap_batch (1 samples, 0.04%)</title><rect x="43.2384%" y="613" width="0.0361%" height="15" fill="rgb(230,133,28)" fg:x="1199" fg:w="1"/><text x="43.4884%" y="623.50"></text></g><g><title>folio_remove_rmap_ptes (1 samples, 0.04%)</title><rect x="43.2384%" y="597" width="0.0361%" height="15" fill="rgb(211,137,40)" fg:x="1199" fg:w="1"/><text x="43.4884%" y="607.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.04%)</title><rect x="43.2384%" y="581" width="0.0361%" height="15" fill="rgb(254,35,13)" fg:x="1199" fg:w="1"/><text x="43.4884%" y="591.50"></text></g><g><title>__folio_batch_release (3 samples, 0.11%)</title><rect x="43.2744%" y="725" width="0.1082%" height="15" fill="rgb(225,49,51)" fg:x="1200" fg:w="3"/><text x="43.5244%" y="735.50"></text></g><g><title>release_pages (3 samples, 0.11%)</title><rect x="43.2744%" y="709" width="0.1082%" height="15" fill="rgb(251,10,15)" fg:x="1200" fg:w="3"/><text x="43.5244%" y="719.50"></text></g><g><title>free_unref_page_list (2 samples, 0.07%)</title><rect x="43.3105%" y="693" width="0.0721%" height="15" fill="rgb(228,207,15)" fg:x="1201" fg:w="2"/><text x="43.5605%" y="703.50"></text></g><g><title>free_unref_page_commit (2 samples, 0.07%)</title><rect x="43.3105%" y="677" width="0.0721%" height="15" fill="rgb(241,99,19)" fg:x="1201" fg:w="2"/><text x="43.5605%" y="687.50"></text></g><g><title>free_pcppages_bulk (1 samples, 0.04%)</title><rect x="43.3466%" y="661" width="0.0361%" height="15" fill="rgb(207,104,49)" fg:x="1202" fg:w="1"/><text x="43.5966%" y="671.50"></text></g><g><title>__free_one_page (1 samples, 0.04%)</title><rect x="43.3466%" y="645" width="0.0361%" height="15" fill="rgb(234,99,18)" fg:x="1202" fg:w="1"/><text x="43.5966%" y="655.50"></text></g><g><title>delete_from_page_cache_batch (1 samples, 0.04%)</title><rect x="43.3826%" y="725" width="0.0361%" height="15" fill="rgb(213,191,49)" fg:x="1203" fg:w="1"/><text x="43.6326%" y="735.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="43.4547%" y="629" width="0.0361%" height="15" fill="rgb(210,226,19)" fg:x="1205" fg:w="1"/><text x="43.7047%" y="639.50"></text></g><g><title>__folio_cancel_dirty (1 samples, 0.04%)</title><rect x="43.4908%" y="613" width="0.0361%" height="15" fill="rgb(229,97,18)" fg:x="1206" fg:w="1"/><text x="43.7408%" y="623.50"></text></g><g><title>folio_account_cleaned (1 samples, 0.04%)</title><rect x="43.4908%" y="597" width="0.0361%" height="15" fill="rgb(211,167,15)" fg:x="1206" fg:w="1"/><text x="43.7408%" y="607.50"></text></g><g><title>lruvec_stat_mod_folio (1 samples, 0.04%)</title><rect x="43.4908%" y="581" width="0.0361%" height="15" fill="rgb(210,169,34)" fg:x="1206" fg:w="1"/><text x="43.7408%" y="591.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.04%)</title><rect x="43.4908%" y="565" width="0.0361%" height="15" fill="rgb(241,121,31)" fg:x="1206" fg:w="1"/><text x="43.7408%" y="575.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.04%)</title><rect x="43.4908%" y="549" width="0.0361%" height="15" fill="rgb(232,40,11)" fg:x="1206" fg:w="1"/><text x="43.7408%" y="559.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.04%)</title><rect x="43.4908%" y="533" width="0.0361%" height="15" fill="rgb(205,86,26)" fg:x="1206" fg:w="1"/><text x="43.7408%" y="543.50"></text></g><g><title>_raw_spin_unlock (1 samples, 0.04%)</title><rect x="43.5269%" y="613" width="0.0361%" height="15" fill="rgb(231,126,28)" fg:x="1207" fg:w="1"/><text x="43.7769%" y="623.50"></text></g><g><title>free_buffer_head (1 samples, 0.04%)</title><rect x="43.5629%" y="613" width="0.0361%" height="15" fill="rgb(219,221,18)" fg:x="1208" fg:w="1"/><text x="43.8129%" y="623.50"></text></g><g><title>kmem_cache_free (1 samples, 0.04%)</title><rect x="43.5629%" y="597" width="0.0361%" height="15" fill="rgb(211,40,0)" fg:x="1208" fg:w="1"/><text x="43.8129%" y="607.50"></text></g><g><title>__slab_free (1 samples, 0.04%)</title><rect x="43.5629%" y="581" width="0.0361%" height="15" fill="rgb(239,85,43)" fg:x="1208" fg:w="1"/><text x="43.8129%" y="591.50"></text></g><g><title>slab_update_freelist.isra.0 (1 samples, 0.04%)</title><rect x="43.5629%" y="565" width="0.0361%" height="15" fill="rgb(231,55,21)" fg:x="1208" fg:w="1"/><text x="43.8129%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;tempfile::dir::TempDir&gt; (10 samples, 0.36%)</title><rect x="43.2744%" y="1061" width="0.3606%" height="15" fill="rgb(225,184,43)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="1071.50"></text></g><g><title>&lt;tempfile::dir::TempDir as core::ops::drop::Drop&gt;::drop (10 samples, 0.36%)</title><rect x="43.2744%" y="1045" width="0.3606%" height="15" fill="rgb(251,158,41)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="1055.50"></text></g><g><title>std::fs::remove_dir_all (10 samples, 0.36%)</title><rect x="43.2744%" y="1029" width="0.3606%" height="15" fill="rgb(234,159,37)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="1039.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (10 samples, 0.36%)</title><rect x="43.2744%" y="1013" width="0.3606%" height="15" fill="rgb(216,204,22)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="1023.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_modern (10 samples, 0.36%)</title><rect x="43.2744%" y="997" width="0.3606%" height="15" fill="rgb(214,17,3)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="1007.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (10 samples, 0.36%)</title><rect x="43.2744%" y="981" width="0.3606%" height="15" fill="rgb(212,111,17)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="991.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (10 samples, 0.36%)</title><rect x="43.2744%" y="965" width="0.3606%" height="15" fill="rgb(221,157,24)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="975.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (10 samples, 0.36%)</title><rect x="43.2744%" y="949" width="0.3606%" height="15" fill="rgb(252,16,13)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="959.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_modern::_{{closure}} (10 samples, 0.36%)</title><rect x="43.2744%" y="933" width="0.3606%" height="15" fill="rgb(221,62,2)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="943.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (10 samples, 0.36%)</title><rect x="43.2744%" y="917" width="0.3606%" height="15" fill="rgb(247,87,22)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="927.50"></text></g><g><title>__GI_unlinkat (10 samples, 0.36%)</title><rect x="43.2744%" y="901" width="0.3606%" height="15" fill="rgb(215,73,9)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="911.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10 samples, 0.36%)</title><rect x="43.2744%" y="885" width="0.3606%" height="15" fill="rgb(207,175,33)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="895.50"></text></g><g><title>do_syscall_64 (10 samples, 0.36%)</title><rect x="43.2744%" y="869" width="0.3606%" height="15" fill="rgb(243,129,54)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="879.50"></text></g><g><title>x64_sys_call (10 samples, 0.36%)</title><rect x="43.2744%" y="853" width="0.3606%" height="15" fill="rgb(227,119,45)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="863.50"></text></g><g><title>__x64_sys_unlinkat (10 samples, 0.36%)</title><rect x="43.2744%" y="837" width="0.3606%" height="15" fill="rgb(205,109,36)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="847.50"></text></g><g><title>do_unlinkat (10 samples, 0.36%)</title><rect x="43.2744%" y="821" width="0.3606%" height="15" fill="rgb(205,6,39)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="831.50"></text></g><g><title>iput (10 samples, 0.36%)</title><rect x="43.2744%" y="805" width="0.3606%" height="15" fill="rgb(221,32,16)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="815.50"></text></g><g><title>evict (10 samples, 0.36%)</title><rect x="43.2744%" y="789" width="0.3606%" height="15" fill="rgb(228,144,50)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="799.50"></text></g><g><title>ext4_evict_inode (10 samples, 0.36%)</title><rect x="43.2744%" y="773" width="0.3606%" height="15" fill="rgb(229,201,53)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="783.50"></text></g><g><title>truncate_inode_pages_final (10 samples, 0.36%)</title><rect x="43.2744%" y="757" width="0.3606%" height="15" fill="rgb(249,153,27)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="767.50"></text></g><g><title>truncate_inode_pages_range (10 samples, 0.36%)</title><rect x="43.2744%" y="741" width="0.3606%" height="15" fill="rgb(227,106,25)" fg:x="1200" fg:w="10"/><text x="43.5244%" y="751.50"></text></g><g><title>truncate_cleanup_folio (6 samples, 0.22%)</title><rect x="43.4187%" y="725" width="0.2164%" height="15" fill="rgb(230,65,29)" fg:x="1204" fg:w="6"/><text x="43.6687%" y="735.50"></text></g><g><title>ext4_invalidate_folio (6 samples, 0.22%)</title><rect x="43.4187%" y="709" width="0.2164%" height="15" fill="rgb(221,57,46)" fg:x="1204" fg:w="6"/><text x="43.6687%" y="719.50"></text></g><g><title>block_invalidate_folio (5 samples, 0.18%)</title><rect x="43.4547%" y="693" width="0.1803%" height="15" fill="rgb(229,161,17)" fg:x="1205" fg:w="5"/><text x="43.7047%" y="703.50"></text></g><g><title>filemap_release_folio (5 samples, 0.18%)</title><rect x="43.4547%" y="677" width="0.1803%" height="15" fill="rgb(222,213,11)" fg:x="1205" fg:w="5"/><text x="43.7047%" y="687.50"></text></g><g><title>ext4_release_folio (5 samples, 0.18%)</title><rect x="43.4547%" y="661" width="0.1803%" height="15" fill="rgb(235,35,13)" fg:x="1205" fg:w="5"/><text x="43.7047%" y="671.50"></text></g><g><title>jbd2_journal_try_to_free_buffers (5 samples, 0.18%)</title><rect x="43.4547%" y="645" width="0.1803%" height="15" fill="rgb(233,158,34)" fg:x="1205" fg:w="5"/><text x="43.7047%" y="655.50"></text></g><g><title>try_to_free_buffers (4 samples, 0.14%)</title><rect x="43.4908%" y="629" width="0.1442%" height="15" fill="rgb(215,151,48)" fg:x="1206" fg:w="4"/><text x="43.7408%" y="639.50"></text></g><g><title>inode_to_bdi (1 samples, 0.04%)</title><rect x="43.5990%" y="613" width="0.0361%" height="15" fill="rgb(229,84,14)" fg:x="1209" fg:w="1"/><text x="43.8490%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (1 samples, 0.04%)</title><rect x="44.0317%" y="629" width="0.0361%" height="15" fill="rgb(229,68,14)" fg:x="1221" fg:w="1"/><text x="44.2817%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.04%)</title><rect x="44.1760%" y="597" width="0.0361%" height="15" fill="rgb(243,106,26)" fg:x="1225" fg:w="1"/><text x="44.4260%" y="607.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.04%)</title><rect x="44.1760%" y="581" width="0.0361%" height="15" fill="rgb(206,45,38)" fg:x="1225" fg:w="1"/><text x="44.4260%" y="591.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="44.1760%" y="565" width="0.0361%" height="15" fill="rgb(226,6,15)" fg:x="1225" fg:w="1"/><text x="44.4260%" y="575.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="44.1760%" y="549" width="0.0361%" height="15" fill="rgb(232,22,54)" fg:x="1225" fg:w="1"/><text x="44.4260%" y="559.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="44.1760%" y="533" width="0.0361%" height="15" fill="rgb(229,222,32)" fg:x="1225" fg:w="1"/><text x="44.4260%" y="543.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="44.1760%" y="517" width="0.0361%" height="15" fill="rgb(228,62,29)" fg:x="1225" fg:w="1"/><text x="44.4260%" y="527.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="44.1760%" y="501" width="0.0361%" height="15" fill="rgb(251,103,34)" fg:x="1225" fg:w="1"/><text x="44.4260%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="44.2481%" y="565" width="0.0361%" height="15" fill="rgb(233,12,30)" fg:x="1227" fg:w="1"/><text x="44.4981%" y="575.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="45.0054%" y="517" width="0.0361%" height="15" fill="rgb(238,52,0)" fg:x="1248" fg:w="1"/><text x="45.2554%" y="527.50"></text></g><g><title>tcache_put (2 samples, 0.07%)</title><rect x="45.0415%" y="517" width="0.0721%" height="15" fill="rgb(223,98,5)" fg:x="1249" fg:w="2"/><text x="45.2915%" y="527.50"></text></g><g><title>_int_malloc (16 samples, 0.58%)</title><rect x="44.6087%" y="533" width="0.5770%" height="15" fill="rgb(228,75,37)" fg:x="1237" fg:w="16"/><text x="44.8587%" y="543.50"></text></g><g><title>unlink_chunk (2 samples, 0.07%)</title><rect x="45.1136%" y="517" width="0.0721%" height="15" fill="rgb(205,115,49)" fg:x="1251" fg:w="2"/><text x="45.3636%" y="527.50"></text></g><g><title>checked_request2size (3 samples, 0.11%)</title><rect x="45.1857%" y="533" width="0.1082%" height="15" fill="rgb(250,154,43)" fg:x="1253" fg:w="3"/><text x="45.4357%" y="543.50"></text></g><g><title>__GI___libc_malloc (29 samples, 1.05%)</title><rect x="44.3924%" y="549" width="1.0458%" height="15" fill="rgb(226,43,29)" fg:x="1231" fg:w="29"/><text x="44.6424%" y="559.50"></text></g><g><title>tcache_get (4 samples, 0.14%)</title><rect x="45.2939%" y="533" width="0.1442%" height="15" fill="rgb(249,228,39)" fg:x="1256" fg:w="4"/><text x="45.5439%" y="543.50"></text></g><g><title>tcache_get_n (4 samples, 0.14%)</title><rect x="45.2939%" y="517" width="0.1442%" height="15" fill="rgb(216,79,43)" fg:x="1256" fg:w="4"/><text x="45.5439%" y="527.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="45.4382%" y="549" width="0.0361%" height="15" fill="rgb(228,95,12)" fg:x="1260" fg:w="1"/><text x="45.6882%" y="559.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="45.4382%" y="533" width="0.0361%" height="15" fill="rgb(249,221,15)" fg:x="1260" fg:w="1"/><text x="45.6882%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (35 samples, 1.26%)</title><rect x="44.2842%" y="565" width="1.2622%" height="15" fill="rgb(233,34,13)" fg:x="1228" fg:w="35"/><text x="44.5342%" y="575.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.07%)</title><rect x="45.4742%" y="549" width="0.0721%" height="15" fill="rgb(214,103,39)" fg:x="1261" fg:w="2"/><text x="45.7242%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (43 samples, 1.55%)</title><rect x="44.0678%" y="629" width="1.5507%" height="15" fill="rgb(251,126,39)" fg:x="1222" fg:w="43"/><text x="44.3178%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (43 samples, 1.55%)</title><rect x="44.0678%" y="613" width="1.5507%" height="15" fill="rgb(214,216,36)" fg:x="1222" fg:w="43"/><text x="44.3178%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (39 samples, 1.41%)</title><rect x="44.2120%" y="597" width="1.4064%" height="15" fill="rgb(220,221,8)" fg:x="1226" fg:w="39"/><text x="44.4620%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (39 samples, 1.41%)</title><rect x="44.2120%" y="581" width="1.4064%" height="15" fill="rgb(240,216,3)" fg:x="1226" fg:w="39"/><text x="44.4620%" y="591.50"></text></g><g><title>core::cmp::max (2 samples, 0.07%)</title><rect x="45.5463%" y="565" width="0.0721%" height="15" fill="rgb(232,218,17)" fg:x="1263" fg:w="2"/><text x="45.7963%" y="575.50"></text></g><g><title>core::cmp::Ord::max (2 samples, 0.07%)</title><rect x="45.5463%" y="549" width="0.0721%" height="15" fill="rgb(229,163,45)" fg:x="1263" fg:w="2"/><text x="45.7963%" y="559.50"></text></g><g><title>core::cmp::max_by (2 samples, 0.07%)</title><rect x="45.5463%" y="533" width="0.0721%" height="15" fill="rgb(231,110,42)" fg:x="1263" fg:w="2"/><text x="45.7963%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.32%)</title><rect x="45.6185%" y="629" width="0.3246%" height="15" fill="rgb(208,170,48)" fg:x="1265" fg:w="9"/><text x="45.8685%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.32%)</title><rect x="45.6185%" y="613" width="0.3246%" height="15" fill="rgb(239,116,25)" fg:x="1265" fg:w="9"/><text x="45.8685%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (59 samples, 2.13%)</title><rect x="43.8514%" y="709" width="2.1277%" height="15" fill="rgb(219,200,50)" fg:x="1216" fg:w="59"/><text x="44.1014%" y="719.50">&lt;..</text></g><g><title>alloc::string::String::push_str (56 samples, 2.02%)</title><rect x="43.9596%" y="693" width="2.0195%" height="15" fill="rgb(245,200,0)" fg:x="1219" fg:w="56"/><text x="44.2096%" y="703.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (56 samples, 2.02%)</title><rect x="43.9596%" y="677" width="2.0195%" height="15" fill="rgb(245,119,33)" fg:x="1219" fg:w="56"/><text x="44.2096%" y="687.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (56 samples, 2.02%)</title><rect x="43.9596%" y="661" width="2.0195%" height="15" fill="rgb(231,125,12)" fg:x="1219" fg:w="56"/><text x="44.2096%" y="671.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (56 samples, 2.02%)</title><rect x="43.9596%" y="645" width="2.0195%" height="15" fill="rgb(216,96,41)" fg:x="1219" fg:w="56"/><text x="44.2096%" y="655.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="45.9430%" y="629" width="0.0361%" height="15" fill="rgb(248,43,45)" fg:x="1274" fg:w="1"/><text x="46.1930%" y="639.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.04%)</title><rect x="45.9791%" y="709" width="0.0361%" height="15" fill="rgb(217,222,7)" fg:x="1275" fg:w="1"/><text x="46.2291%" y="719.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (72 samples, 2.60%)</title><rect x="43.7793%" y="725" width="2.5965%" height="15" fill="rgb(233,28,6)" fg:x="1214" fg:w="72"/><text x="44.0293%" y="735.50">&lt;&amp;..</text></g><g><title>core::fmt::Formatter::pad (10 samples, 0.36%)</title><rect x="46.0151%" y="709" width="0.3606%" height="15" fill="rgb(231,218,15)" fg:x="1276" fg:w="10"/><text x="46.2651%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (1 samples, 0.04%)</title><rect x="46.3397%" y="693" width="0.0361%" height="15" fill="rgb(226,171,48)" fg:x="1285" fg:w="1"/><text x="46.5897%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.04%)</title><rect x="46.3397%" y="677" width="0.0361%" height="15" fill="rgb(235,201,9)" fg:x="1285" fg:w="1"/><text x="46.5897%" y="687.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (77 samples, 2.78%)</title><rect x="43.6711%" y="741" width="2.7768%" height="15" fill="rgb(217,80,15)" fg:x="1211" fg:w="77"/><text x="43.9211%" y="751.50">&lt;T..</text></g><g><title>core::fmt::Formatter::new (2 samples, 0.07%)</title><rect x="46.3758%" y="725" width="0.0721%" height="15" fill="rgb(219,152,8)" fg:x="1286" fg:w="2"/><text x="46.6258%" y="735.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (2 samples, 0.07%)</title><rect x="46.5200%" y="677" width="0.0721%" height="15" fill="rgb(243,107,38)" fg:x="1290" fg:w="2"/><text x="46.7700%" y="687.50"></text></g><g><title>core::slice::ascii::is_ascii (2 samples, 0.07%)</title><rect x="46.5200%" y="661" width="0.0721%" height="15" fill="rgb(231,17,5)" fg:x="1290" fg:w="2"/><text x="46.7700%" y="671.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (11 samples, 0.40%)</title><rect x="46.4479%" y="693" width="0.3967%" height="15" fill="rgb(209,25,54)" fg:x="1288" fg:w="11"/><text x="46.6979%" y="703.50"></text></g><g><title>core::str::converts::from_utf8 (7 samples, 0.25%)</title><rect x="46.5921%" y="677" width="0.2524%" height="15" fill="rgb(219,0,2)" fg:x="1292" fg:w="7"/><text x="46.8421%" y="687.50"></text></g><g><title>core::str::validations::run_utf8_validation (4 samples, 0.14%)</title><rect x="46.7003%" y="661" width="0.1442%" height="15" fill="rgb(246,9,5)" fg:x="1295" fg:w="4"/><text x="46.9503%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="46.8806%" y="661" width="0.0361%" height="15" fill="rgb(226,159,4)" fg:x="1300" fg:w="1"/><text x="47.1306%" y="671.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.04%)</title><rect x="46.8806%" y="645" width="0.0361%" height="15" fill="rgb(219,175,34)" fg:x="1300" fg:w="1"/><text x="47.1306%" y="655.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.04%)</title><rect x="46.8806%" y="629" width="0.0361%" height="15" fill="rgb(236,10,46)" fg:x="1300" fg:w="1"/><text x="47.1306%" y="639.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="46.8806%" y="613" width="0.0361%" height="15" fill="rgb(240,211,16)" fg:x="1300" fg:w="1"/><text x="47.1306%" y="623.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="46.8806%" y="597" width="0.0361%" height="15" fill="rgb(205,3,43)" fg:x="1300" fg:w="1"/><text x="47.1306%" y="607.50"></text></g><g><title>core::slice::index::get_offset_len_mut_noubcheck (1 samples, 0.04%)</title><rect x="46.8806%" y="581" width="0.0361%" height="15" fill="rgb(245,7,22)" fg:x="1300" fg:w="1"/><text x="47.1306%" y="591.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (1 samples, 0.04%)</title><rect x="46.8806%" y="565" width="0.0361%" height="15" fill="rgb(239,132,32)" fg:x="1300" fg:w="1"/><text x="47.1306%" y="575.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (9 samples, 0.32%)</title><rect x="46.9167%" y="661" width="0.3246%" height="15" fill="rgb(228,202,34)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="671.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (9 samples, 0.32%)</title><rect x="46.9167%" y="645" width="0.3246%" height="15" fill="rgb(254,200,22)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (9 samples, 0.32%)</title><rect x="46.9167%" y="629" width="0.3246%" height="15" fill="rgb(219,10,39)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="639.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_buf (9 samples, 0.32%)</title><rect x="46.9167%" y="613" width="0.3246%" height="15" fill="rgb(226,210,39)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="623.50"></text></g><g><title>core::io::borrowed_buf::BorrowedCursor::append (9 samples, 0.32%)</title><rect x="46.9167%" y="597" width="0.3246%" height="15" fill="rgb(208,219,16)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="607.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::copy_from_slice (9 samples, 0.32%)</title><rect x="46.9167%" y="581" width="0.3246%" height="15" fill="rgb(216,158,51)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="591.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9 samples, 0.32%)</title><rect x="46.9167%" y="565" width="0.3246%" height="15" fill="rgb(233,14,44)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="575.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.32%)</title><rect x="46.9167%" y="549" width="0.3246%" height="15" fill="rgb(237,97,39)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.32%)</title><rect x="46.9167%" y="533" width="0.3246%" height="15" fill="rgb(218,198,43)" fg:x="1301" fg:w="9"/><text x="47.1667%" y="543.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.11%)</title><rect x="47.1331%" y="517" width="0.1082%" height="15" fill="rgb(231,104,20)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="527.50"></text></g><g><title>exc_page_fault (3 samples, 0.11%)</title><rect x="47.1331%" y="501" width="0.1082%" height="15" fill="rgb(254,36,13)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="511.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.11%)</title><rect x="47.1331%" y="485" width="0.1082%" height="15" fill="rgb(248,14,50)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="495.50"></text></g><g><title>handle_mm_fault (3 samples, 0.11%)</title><rect x="47.1331%" y="469" width="0.1082%" height="15" fill="rgb(217,107,29)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="479.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.11%)</title><rect x="47.1331%" y="453" width="0.1082%" height="15" fill="rgb(251,169,33)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="463.50"></text></g><g><title>handle_pte_fault (3 samples, 0.11%)</title><rect x="47.1331%" y="437" width="0.1082%" height="15" fill="rgb(217,108,32)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="447.50"></text></g><g><title>do_fault (3 samples, 0.11%)</title><rect x="47.1331%" y="421" width="0.1082%" height="15" fill="rgb(219,66,42)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="431.50"></text></g><g><title>do_read_fault (3 samples, 0.11%)</title><rect x="47.1331%" y="405" width="0.1082%" height="15" fill="rgb(206,180,7)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="415.50"></text></g><g><title>filemap_map_pages (3 samples, 0.11%)</title><rect x="47.1331%" y="389" width="0.1082%" height="15" fill="rgb(208,226,31)" fg:x="1307" fg:w="3"/><text x="47.3831%" y="399.50"></text></g><g><title>next_uptodate_folio (1 samples, 0.04%)</title><rect x="47.2052%" y="373" width="0.0361%" height="15" fill="rgb(218,26,49)" fg:x="1309" fg:w="1"/><text x="47.4552%" y="383.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.04%)</title><rect x="48.0346%" y="629" width="0.0361%" height="15" fill="rgb(233,197,48)" fg:x="1332" fg:w="1"/><text x="48.2846%" y="639.50"></text></g><g><title>core::cmp::PartialOrd::gt (2 samples, 0.07%)</title><rect x="48.0707%" y="629" width="0.0721%" height="15" fill="rgb(252,181,51)" fg:x="1333" fg:w="2"/><text x="48.3207%" y="639.50"></text></g><g><title>csv_core::reader::Dfa::get_output (14 samples, 0.50%)</title><rect x="48.1428%" y="629" width="0.5049%" height="15" fill="rgb(253,90,19)" fg:x="1335" fg:w="14"/><text x="48.3928%" y="639.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (109 samples, 3.93%)</title><rect x="46.4479%" y="725" width="3.9308%" height="15" fill="rgb(215,171,30)" fg:x="1288" fg:w="109"/><text x="46.6979%" y="735.50">csv:..</text></g><g><title>csv::string_record::StringRecord::read (109 samples, 3.93%)</title><rect x="46.4479%" y="709" width="3.9308%" height="15" fill="rgb(214,222,9)" fg:x="1288" fg:w="109"/><text x="46.6979%" y="719.50">csv:..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (98 samples, 3.53%)</title><rect x="46.8446%" y="693" width="3.5341%" height="15" fill="rgb(223,3,22)" fg:x="1299" fg:w="98"/><text x="47.0946%" y="703.50">csv..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (98 samples, 3.53%)</title><rect x="46.8446%" y="677" width="3.5341%" height="15" fill="rgb(225,196,46)" fg:x="1299" fg:w="98"/><text x="47.0946%" y="687.50">csv..</text></g><g><title>csv_core::reader::Reader::read_record (87 samples, 3.14%)</title><rect x="47.2413%" y="661" width="3.1374%" height="15" fill="rgb(209,110,37)" fg:x="1310" fg:w="87"/><text x="47.4913%" y="671.50">csv..</text></g><g><title>csv_core::reader::Reader::read_record_dfa (87 samples, 3.14%)</title><rect x="47.2413%" y="645" width="3.1374%" height="15" fill="rgb(249,89,12)" fg:x="1310" fg:w="87"/><text x="47.4913%" y="655.50">csv..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (48 samples, 1.73%)</title><rect x="48.6477%" y="629" width="1.7310%" height="15" fill="rgb(226,27,33)" fg:x="1349" fg:w="48"/><text x="48.8977%" y="639.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.04%)</title><rect x="50.3787%" y="693" width="0.0361%" height="15" fill="rgb(213,82,22)" fg:x="1397" fg:w="1"/><text x="50.6287%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="50.4147%" y="613" width="0.0721%" height="15" fill="rgb(248,140,0)" fg:x="1398" fg:w="2"/><text x="50.6647%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="50.4147%" y="597" width="0.0721%" height="15" fill="rgb(228,106,3)" fg:x="1398" fg:w="2"/><text x="50.6647%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.07%)</title><rect x="50.4147%" y="581" width="0.0721%" height="15" fill="rgb(209,23,37)" fg:x="1398" fg:w="2"/><text x="50.6647%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="50.4147%" y="565" width="0.0721%" height="15" fill="rgb(241,93,50)" fg:x="1398" fg:w="2"/><text x="50.6647%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="50.4147%" y="549" width="0.0721%" height="15" fill="rgb(253,46,43)" fg:x="1398" fg:w="2"/><text x="50.6647%" y="559.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="50.4147%" y="533" width="0.0721%" height="15" fill="rgb(226,206,43)" fg:x="1398" fg:w="2"/><text x="50.6647%" y="543.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="50.4508%" y="517" width="0.0361%" height="15" fill="rgb(217,54,7)" fg:x="1399" fg:w="1"/><text x="50.7008%" y="527.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="50.4508%" y="501" width="0.0361%" height="15" fill="rgb(223,5,52)" fg:x="1399" fg:w="1"/><text x="50.7008%" y="511.50"></text></g><g><title>tcache_get_n (1 samples, 0.04%)</title><rect x="50.4508%" y="485" width="0.0361%" height="15" fill="rgb(206,52,46)" fg:x="1399" fg:w="1"/><text x="50.7008%" y="495.50"></text></g><g><title>&lt;csv::byte_record::Bounds as core::clone::Clone&gt;::clone (6 samples, 0.22%)</title><rect x="50.4147%" y="693" width="0.2164%" height="15" fill="rgb(253,136,11)" fg:x="1398" fg:w="6"/><text x="50.6647%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.22%)</title><rect x="50.4147%" y="677" width="0.2164%" height="15" fill="rgb(208,106,33)" fg:x="1398" fg:w="6"/><text x="50.6647%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.22%)</title><rect x="50.4147%" y="661" width="0.2164%" height="15" fill="rgb(206,54,4)" fg:x="1398" fg:w="6"/><text x="50.6647%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.22%)</title><rect x="50.4147%" y="645" width="0.2164%" height="15" fill="rgb(213,3,15)" fg:x="1398" fg:w="6"/><text x="50.6647%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.22%)</title><rect x="50.4147%" y="629" width="0.2164%" height="15" fill="rgb(252,211,39)" fg:x="1398" fg:w="6"/><text x="50.6647%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.14%)</title><rect x="50.4868%" y="613" width="0.1442%" height="15" fill="rgb(223,6,36)" fg:x="1400" fg:w="4"/><text x="50.7368%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="50.4868%" y="597" width="0.1442%" height="15" fill="rgb(252,169,45)" fg:x="1400" fg:w="4"/><text x="50.7368%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.14%)</title><rect x="50.4868%" y="581" width="0.1442%" height="15" fill="rgb(212,48,26)" fg:x="1400" fg:w="4"/><text x="50.7368%" y="591.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="50.6311%" y="533" width="0.0361%" height="15" fill="rgb(251,102,48)" fg:x="1404" fg:w="1"/><text x="50.8811%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.07%)</title><rect x="50.6311%" y="693" width="0.0721%" height="15" fill="rgb(243,208,16)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="50.6311%" y="677" width="0.0721%" height="15" fill="rgb(219,96,24)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="50.6311%" y="661" width="0.0721%" height="15" fill="rgb(219,33,29)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="50.6311%" y="645" width="0.0721%" height="15" fill="rgb(223,176,5)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="50.6311%" y="629" width="0.0721%" height="15" fill="rgb(228,140,14)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="50.6311%" y="613" width="0.0721%" height="15" fill="rgb(217,179,31)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.07%)</title><rect x="50.6311%" y="597" width="0.0721%" height="15" fill="rgb(230,9,30)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="50.6311%" y="581" width="0.0721%" height="15" fill="rgb(230,136,20)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="50.6311%" y="565" width="0.0721%" height="15" fill="rgb(215,210,22)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="575.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="50.6311%" y="549" width="0.0721%" height="15" fill="rgb(218,43,5)" fg:x="1404" fg:w="2"/><text x="50.8811%" y="559.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="50.6671%" y="533" width="0.0361%" height="15" fill="rgb(216,11,5)" fg:x="1405" fg:w="1"/><text x="50.9171%" y="543.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (119 samples, 4.29%)</title><rect x="46.4479%" y="741" width="4.2914%" height="15" fill="rgb(209,82,29)" fg:x="1288" fg:w="119"/><text x="46.6979%" y="751.50">&lt;csv:..</text></g><g><title>csv::string_record::StringRecord::clone_truncated (10 samples, 0.36%)</title><rect x="50.3787%" y="725" width="0.3606%" height="15" fill="rgb(244,115,12)" fg:x="1397" fg:w="10"/><text x="50.6287%" y="735.50"></text></g><g><title>csv::byte_record::ByteRecord::clone_truncated (10 samples, 0.36%)</title><rect x="50.3787%" y="709" width="0.3606%" height="15" fill="rgb(222,82,18)" fg:x="1397" fg:w="10"/><text x="50.6287%" y="719.50"></text></g><g><title>csv::byte_record::ByteRecord::new (1 samples, 0.04%)</title><rect x="50.7032%" y="693" width="0.0361%" height="15" fill="rgb(249,227,8)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="703.50"></text></g><g><title>csv::byte_record::ByteRecord::with_capacity (1 samples, 0.04%)</title><rect x="50.7032%" y="677" width="0.0361%" height="15" fill="rgb(253,141,45)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.04%)</title><rect x="50.7032%" y="661" width="0.0361%" height="15" fill="rgb(234,184,4)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="671.50"></text></g><g><title>alloc::alloc::exchange_malloc (1 samples, 0.04%)</title><rect x="50.7032%" y="645" width="0.0361%" height="15" fill="rgb(218,194,23)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="50.7032%" y="629" width="0.0361%" height="15" fill="rgb(235,66,41)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="50.7032%" y="613" width="0.0361%" height="15" fill="rgb(245,217,1)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="50.7032%" y="597" width="0.0361%" height="15" fill="rgb(229,91,1)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="607.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="50.7032%" y="581" width="0.0361%" height="15" fill="rgb(207,101,30)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="591.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="50.7032%" y="565" width="0.0361%" height="15" fill="rgb(223,82,49)" fg:x="1406" fg:w="1"/><text x="50.9532%" y="575.50"></text></g><g><title>_int_malloc (11 samples, 0.40%)</title><rect x="51.2081%" y="501" width="0.3967%" height="15" fill="rgb(218,167,17)" fg:x="1420" fg:w="11"/><text x="51.4581%" y="511.50"></text></g><g><title>unlink_chunk (2 samples, 0.07%)</title><rect x="51.5326%" y="485" width="0.0721%" height="15" fill="rgb(208,103,14)" fg:x="1429" fg:w="2"/><text x="51.7826%" y="495.50"></text></g><g><title>checked_request2size (4 samples, 0.14%)</title><rect x="51.6048%" y="501" width="0.1442%" height="15" fill="rgb(238,20,8)" fg:x="1431" fg:w="4"/><text x="51.8548%" y="511.50"></text></g><g><title>__GI___libc_malloc (30 samples, 1.08%)</title><rect x="50.8475%" y="517" width="1.0819%" height="15" fill="rgb(218,80,54)" fg:x="1410" fg:w="30"/><text x="51.0975%" y="527.50"></text></g><g><title>tcache_get (5 samples, 0.18%)</title><rect x="51.7490%" y="501" width="0.1803%" height="15" fill="rgb(240,144,17)" fg:x="1435" fg:w="5"/><text x="51.9990%" y="511.50"></text></g><g><title>tcache_get_n (5 samples, 0.18%)</title><rect x="51.7490%" y="485" width="0.1803%" height="15" fill="rgb(245,27,50)" fg:x="1435" fg:w="5"/><text x="51.9990%" y="495.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="51.9293%" y="517" width="0.0361%" height="15" fill="rgb(251,51,7)" fg:x="1440" fg:w="1"/><text x="52.1793%" y="527.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="51.9293%" y="501" width="0.0361%" height="15" fill="rgb(245,217,29)" fg:x="1440" fg:w="1"/><text x="52.1793%" y="511.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="51.9654%" y="517" width="0.0361%" height="15" fill="rgb(221,176,29)" fg:x="1441" fg:w="1"/><text x="52.2154%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (36 samples, 1.30%)</title><rect x="50.7393%" y="613" width="1.2982%" height="15" fill="rgb(212,180,24)" fg:x="1407" fg:w="36"/><text x="50.9893%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (36 samples, 1.30%)</title><rect x="50.7393%" y="597" width="1.2982%" height="15" fill="rgb(254,24,2)" fg:x="1407" fg:w="36"/><text x="50.9893%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (36 samples, 1.30%)</title><rect x="50.7393%" y="581" width="1.2982%" height="15" fill="rgb(230,100,2)" fg:x="1407" fg:w="36"/><text x="50.9893%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 1.26%)</title><rect x="50.7753%" y="565" width="1.2622%" height="15" fill="rgb(219,142,25)" fg:x="1408" fg:w="35"/><text x="51.0253%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 1.26%)</title><rect x="50.7753%" y="549" width="1.2622%" height="15" fill="rgb(240,73,43)" fg:x="1408" fg:w="35"/><text x="51.0253%" y="559.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 1.26%)</title><rect x="50.7753%" y="533" width="1.2622%" height="15" fill="rgb(214,114,15)" fg:x="1408" fg:w="35"/><text x="51.0253%" y="543.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.04%)</title><rect x="52.0014%" y="517" width="0.0361%" height="15" fill="rgb(207,130,4)" fg:x="1442" fg:w="1"/><text x="52.2514%" y="527.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (43 samples, 1.55%)</title><rect x="50.7393%" y="741" width="1.5507%" height="15" fill="rgb(221,25,40)" fg:x="1407" fg:w="43"/><text x="50.9893%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (43 samples, 1.55%)</title><rect x="50.7393%" y="725" width="1.5507%" height="15" fill="rgb(241,184,7)" fg:x="1407" fg:w="43"/><text x="50.9893%" y="735.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (43 samples, 1.55%)</title><rect x="50.7393%" y="709" width="1.5507%" height="15" fill="rgb(235,159,4)" fg:x="1407" fg:w="43"/><text x="50.9893%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (43 samples, 1.55%)</title><rect x="50.7393%" y="693" width="1.5507%" height="15" fill="rgb(214,87,48)" fg:x="1407" fg:w="43"/><text x="50.9893%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (43 samples, 1.55%)</title><rect x="50.7393%" y="677" width="1.5507%" height="15" fill="rgb(246,198,24)" fg:x="1407" fg:w="43"/><text x="50.9893%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (43 samples, 1.55%)</title><rect x="50.7393%" y="661" width="1.5507%" height="15" fill="rgb(209,66,40)" fg:x="1407" fg:w="43"/><text x="50.9893%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (43 samples, 1.55%)</title><rect x="50.7393%" y="645" width="1.5507%" height="15" fill="rgb(233,147,39)" fg:x="1407" fg:w="43"/><text x="50.9893%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (43 samples, 1.55%)</title><rect x="50.7393%" y="629" width="1.5507%" height="15" fill="rgb(231,145,52)" fg:x="1407" fg:w="43"/><text x="50.9893%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (7 samples, 0.25%)</title><rect x="52.0375%" y="613" width="0.2524%" height="15" fill="rgb(206,20,26)" fg:x="1443" fg:w="7"/><text x="52.2875%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.25%)</title><rect x="52.0375%" y="597" width="0.2524%" height="15" fill="rgb(238,220,4)" fg:x="1443" fg:w="7"/><text x="52.2875%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.25%)</title><rect x="52.0375%" y="581" width="0.2524%" height="15" fill="rgb(252,195,42)" fg:x="1443" fg:w="7"/><text x="52.2875%" y="591.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="52.2539%" y="565" width="0.0361%" height="15" fill="rgb(209,10,6)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="575.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="52.2539%" y="549" width="0.0361%" height="15" fill="rgb(229,3,52)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="559.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="52.2539%" y="533" width="0.0361%" height="15" fill="rgb(253,49,37)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="543.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="52.2539%" y="517" width="0.0361%" height="15" fill="rgb(240,103,49)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="527.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="52.2539%" y="501" width="0.0361%" height="15" fill="rgb(250,182,30)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="511.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.04%)</title><rect x="52.2539%" y="485" width="0.0361%" height="15" fill="rgb(248,8,30)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="495.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="52.2539%" y="469" width="0.0361%" height="15" fill="rgb(237,120,30)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="479.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="52.2539%" y="453" width="0.0361%" height="15" fill="rgb(221,146,34)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="463.50"></text></g><g><title>scheduler_tick (1 samples, 0.04%)</title><rect x="52.2539%" y="437" width="0.0361%" height="15" fill="rgb(242,55,13)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="447.50"></text></g><g><title>task_tick_fair (1 samples, 0.04%)</title><rect x="52.2539%" y="421" width="0.0361%" height="15" fill="rgb(242,112,31)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="431.50"></text></g><g><title>update_load_avg (1 samples, 0.04%)</title><rect x="52.2539%" y="405" width="0.0361%" height="15" fill="rgb(249,192,27)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="415.50"></text></g><g><title>__update_load_avg_cfs_rq (1 samples, 0.04%)</title><rect x="52.2539%" y="389" width="0.0361%" height="15" fill="rgb(208,204,44)" fg:x="1449" fg:w="1"/><text x="52.5039%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.04%)</title><rect x="52.2899%" y="741" width="0.0361%" height="15" fill="rgb(208,93,54)" fg:x="1450" fg:w="1"/><text x="52.5399%" y="751.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="52.3260%" y="693" width="0.0361%" height="15" fill="rgb(242,1,31)" fg:x="1451" fg:w="1"/><text x="52.5760%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="52.3260%" y="677" width="0.0361%" height="15" fill="rgb(241,83,25)" fg:x="1451" fg:w="1"/><text x="52.5760%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="52.3260%" y="661" width="0.0361%" height="15" fill="rgb(205,169,50)" fg:x="1451" fg:w="1"/><text x="52.5760%" y="671.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="52.3260%" y="645" width="0.0361%" height="15" fill="rgb(239,186,37)" fg:x="1451" fg:w="1"/><text x="52.5760%" y="655.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="52.3260%" y="629" width="0.0361%" height="15" fill="rgb(205,221,10)" fg:x="1451" fg:w="1"/><text x="52.5760%" y="639.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="52.3260%" y="613" width="0.0361%" height="15" fill="rgb(218,196,15)" fg:x="1451" fg:w="1"/><text x="52.5760%" y="623.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="52.3621%" y="581" width="0.0361%" height="15" fill="rgb(218,196,35)" fg:x="1452" fg:w="1"/><text x="52.6121%" y="591.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="52.3621%" y="565" width="0.0361%" height="15" fill="rgb(233,63,24)" fg:x="1452" fg:w="1"/><text x="52.6121%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="52.3621%" y="677" width="0.0721%" height="15" fill="rgb(225,8,4)" fg:x="1452" fg:w="2"/><text x="52.6121%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="52.3621%" y="661" width="0.0721%" height="15" fill="rgb(234,105,35)" fg:x="1452" fg:w="2"/><text x="52.6121%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="52.3621%" y="645" width="0.0721%" height="15" fill="rgb(236,21,32)" fg:x="1452" fg:w="2"/><text x="52.6121%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="52.3621%" y="629" width="0.0721%" height="15" fill="rgb(228,109,6)" fg:x="1452" fg:w="2"/><text x="52.6121%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="52.3621%" y="613" width="0.0721%" height="15" fill="rgb(229,215,31)" fg:x="1452" fg:w="2"/><text x="52.6121%" y="623.50"></text></g><g><title>__GI___libc_free (2 samples, 0.07%)</title><rect x="52.3621%" y="597" width="0.0721%" height="15" fill="rgb(221,52,54)" fg:x="1452" fg:w="2"/><text x="52.6121%" y="607.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.04%)</title><rect x="52.3981%" y="581" width="0.0361%" height="15" fill="rgb(252,129,43)" fg:x="1453" fg:w="1"/><text x="52.6481%" y="591.50"></text></g><g><title>malloc_consolidate (1 samples, 0.04%)</title><rect x="52.3981%" y="565" width="0.0361%" height="15" fill="rgb(248,183,27)" fg:x="1453" fg:w="1"/><text x="52.6481%" y="575.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.11%)</title><rect x="52.5063%" y="565" width="0.1082%" height="15" fill="rgb(250,0,22)" fg:x="1456" fg:w="3"/><text x="52.7563%" y="575.50"></text></g><g><title>malloc_consolidate (3 samples, 0.11%)</title><rect x="52.5063%" y="549" width="0.1082%" height="15" fill="rgb(213,166,10)" fg:x="1456" fg:w="3"/><text x="52.7563%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::string_record::StringRecord&gt; (9 samples, 0.32%)</title><rect x="52.3260%" y="741" width="0.3246%" height="15" fill="rgb(207,163,36)" fg:x="1451" fg:w="9"/><text x="52.5760%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecord&gt; (9 samples, 0.32%)</title><rect x="52.3260%" y="725" width="0.3246%" height="15" fill="rgb(208,122,22)" fg:x="1451" fg:w="9"/><text x="52.5760%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;csv::byte_record::ByteRecordInner&gt;&gt; (9 samples, 0.32%)</title><rect x="52.3260%" y="709" width="0.3246%" height="15" fill="rgb(207,104,49)" fg:x="1451" fg:w="9"/><text x="52.5760%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecordInner&gt; (8 samples, 0.29%)</title><rect x="52.3621%" y="693" width="0.2885%" height="15" fill="rgb(248,211,50)" fg:x="1452" fg:w="8"/><text x="52.6121%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::Bounds&gt; (6 samples, 0.22%)</title><rect x="52.4342%" y="677" width="0.2164%" height="15" fill="rgb(217,13,45)" fg:x="1454" fg:w="6"/><text x="52.6842%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (6 samples, 0.22%)</title><rect x="52.4342%" y="661" width="0.2164%" height="15" fill="rgb(211,216,49)" fg:x="1454" fg:w="6"/><text x="52.6842%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (6 samples, 0.22%)</title><rect x="52.4342%" y="645" width="0.2164%" height="15" fill="rgb(221,58,53)" fg:x="1454" fg:w="6"/><text x="52.6842%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.22%)</title><rect x="52.4342%" y="629" width="0.2164%" height="15" fill="rgb(220,112,41)" fg:x="1454" fg:w="6"/><text x="52.6842%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.22%)</title><rect x="52.4342%" y="613" width="0.2164%" height="15" fill="rgb(236,38,28)" fg:x="1454" fg:w="6"/><text x="52.6842%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.22%)</title><rect x="52.4342%" y="597" width="0.2164%" height="15" fill="rgb(227,195,22)" fg:x="1454" fg:w="6"/><text x="52.6842%" y="607.50"></text></g><g><title>__GI___libc_free (6 samples, 0.22%)</title><rect x="52.4342%" y="581" width="0.2164%" height="15" fill="rgb(214,55,33)" fg:x="1454" fg:w="6"/><text x="52.6842%" y="591.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.04%)</title><rect x="52.6145%" y="565" width="0.0361%" height="15" fill="rgb(248,80,13)" fg:x="1459" fg:w="1"/><text x="52.8645%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (2 samples, 0.07%)</title><rect x="53.0472%" y="597" width="0.0721%" height="15" fill="rgb(238,52,6)" fg:x="1471" fg:w="2"/><text x="53.2972%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (2 samples, 0.07%)</title><rect x="53.0472%" y="581" width="0.0721%" height="15" fill="rgb(224,198,47)" fg:x="1471" fg:w="2"/><text x="53.2972%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="53.0472%" y="565" width="0.0721%" height="15" fill="rgb(233,171,20)" fg:x="1471" fg:w="2"/><text x="53.2972%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="53.0472%" y="549" width="0.0721%" height="15" fill="rgb(241,30,25)" fg:x="1471" fg:w="2"/><text x="53.2972%" y="559.50"></text></g><g><title>__GI___libc_free (2 samples, 0.07%)</title><rect x="53.0472%" y="533" width="0.0721%" height="15" fill="rgb(207,171,38)" fg:x="1471" fg:w="2"/><text x="53.2972%" y="543.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="53.0833%" y="517" width="0.0361%" height="15" fill="rgb(234,70,1)" fg:x="1472" fg:w="1"/><text x="53.3333%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (3 samples, 0.11%)</title><rect x="53.0472%" y="613" width="0.1082%" height="15" fill="rgb(232,178,18)" fg:x="1471" fg:w="3"/><text x="53.2972%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::take_front (1 samples, 0.04%)</title><rect x="53.1194%" y="597" width="0.0361%" height="15" fill="rgb(241,78,40)" fg:x="1473" fg:w="1"/><text x="53.3694%" y="607.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.04%)</title><rect x="53.1194%" y="581" width="0.0361%" height="15" fill="rgb(222,35,25)" fg:x="1473" fg:w="1"/><text x="53.3694%" y="591.50"></text></g><g><title>core::mem::replace (1 samples, 0.04%)</title><rect x="53.1194%" y="565" width="0.0361%" height="15" fill="rgb(207,92,16)" fg:x="1473" fg:w="1"/><text x="53.3694%" y="575.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="53.1194%" y="549" width="0.0361%" height="15" fill="rgb(216,59,51)" fg:x="1473" fg:w="1"/><text x="53.3694%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (3 samples, 0.11%)</title><rect x="53.1915%" y="533" width="0.1082%" height="15" fill="rgb(213,80,28)" fg:x="1475" fg:w="3"/><text x="53.4415%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.04%)</title><rect x="53.2636%" y="517" width="0.0361%" height="15" fill="rgb(220,93,7)" fg:x="1477" fg:w="1"/><text x="53.5136%" y="527.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.04%)</title><rect x="53.2636%" y="501" width="0.0361%" height="15" fill="rgb(225,24,44)" fg:x="1477" fg:w="1"/><text x="53.5136%" y="511.50"></text></g><g><title>__GI___libc_free (4 samples, 0.14%)</title><rect x="53.3357%" y="485" width="0.1442%" height="15" fill="rgb(243,74,40)" fg:x="1479" fg:w="4"/><text x="53.5857%" y="495.50"></text></g><g><title>_int_free (4 samples, 0.14%)</title><rect x="53.3357%" y="469" width="0.1442%" height="15" fill="rgb(228,39,7)" fg:x="1479" fg:w="4"/><text x="53.5857%" y="479.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="53.4439%" y="453" width="0.0361%" height="15" fill="rgb(227,79,8)" fg:x="1482" fg:w="1"/><text x="53.6939%" y="463.50"></text></g><g><title>irqentry_exit (1 samples, 0.04%)</title><rect x="53.4439%" y="437" width="0.0361%" height="15" fill="rgb(236,58,11)" fg:x="1482" fg:w="1"/><text x="53.6939%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (10 samples, 0.36%)</title><rect x="53.1554%" y="565" width="0.3606%" height="15" fill="rgb(249,63,35)" fg:x="1474" fg:w="10"/><text x="53.4054%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (10 samples, 0.36%)</title><rect x="53.1554%" y="549" width="0.3606%" height="15" fill="rgb(252,114,16)" fg:x="1474" fg:w="10"/><text x="53.4054%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (6 samples, 0.22%)</title><rect x="53.2997%" y="533" width="0.2164%" height="15" fill="rgb(254,151,24)" fg:x="1478" fg:w="6"/><text x="53.5497%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.22%)</title><rect x="53.2997%" y="517" width="0.2164%" height="15" fill="rgb(253,54,39)" fg:x="1478" fg:w="6"/><text x="53.5497%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.22%)</title><rect x="53.2997%" y="501" width="0.2164%" height="15" fill="rgb(243,25,45)" fg:x="1478" fg:w="6"/><text x="53.5497%" y="511.50"></text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="53.4800%" y="485" width="0.0361%" height="15" fill="rgb(234,134,9)" fg:x="1483" fg:w="1"/><text x="53.7300%" y="495.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (18 samples, 0.65%)</title><rect x="52.9030%" y="629" width="0.6491%" height="15" fill="rgb(227,166,31)" fg:x="1467" fg:w="18"/><text x="53.1530%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (11 samples, 0.40%)</title><rect x="53.1554%" y="613" width="0.3967%" height="15" fill="rgb(245,143,41)" fg:x="1474" fg:w="11"/><text x="53.4054%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (11 samples, 0.40%)</title><rect x="53.1554%" y="597" width="0.3967%" height="15" fill="rgb(238,181,32)" fg:x="1474" fg:w="11"/><text x="53.4054%" y="607.50"></text></g><g><title>alloc::collections::btree::mem::replace (11 samples, 0.40%)</title><rect x="53.1554%" y="581" width="0.3967%" height="15" fill="rgb(224,113,18)" fg:x="1474" fg:w="11"/><text x="53.4054%" y="591.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="53.5160%" y="565" width="0.0361%" height="15" fill="rgb(240,229,28)" fg:x="1484" fg:w="1"/><text x="53.7660%" y="575.50"></text></g><g><title>_int_free (33 samples, 1.19%)</title><rect x="54.2373%" y="581" width="1.1900%" height="15" fill="rgb(250,185,3)" fg:x="1504" fg:w="33"/><text x="54.4873%" y="591.50"></text></g><g><title>get_max_fast (2 samples, 0.07%)</title><rect x="55.3552%" y="565" width="0.0721%" height="15" fill="rgb(212,59,25)" fg:x="1535" fg:w="2"/><text x="55.6052%" y="575.50"></text></g><g><title>__GI___libc_free (53 samples, 1.91%)</title><rect x="53.5521%" y="597" width="1.9113%" height="15" fill="rgb(221,87,20)" fg:x="1485" fg:w="53"/><text x="53.8021%" y="607.50">_..</text></g><g><title>sync_regs (1 samples, 0.04%)</title><rect x="55.4273%" y="581" width="0.0361%" height="15" fill="rgb(213,74,28)" fg:x="1537" fg:w="1"/><text x="55.6773%" y="591.50"></text></g><g><title>__rust_dealloc (2 samples, 0.07%)</title><rect x="55.4634%" y="597" width="0.0721%" height="15" fill="rgb(224,132,34)" fg:x="1538" fg:w="2"/><text x="55.7134%" y="607.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="57.3386%" y="469" width="0.0361%" height="15" fill="rgb(222,101,24)" fg:x="1590" fg:w="1"/><text x="57.5886%" y="479.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="57.3386%" y="453" width="0.0361%" height="15" fill="rgb(254,142,4)" fg:x="1590" fg:w="1"/><text x="57.5886%" y="463.50"></text></g><g><title>__common_interrupt (1 samples, 0.04%)</title><rect x="57.3386%" y="437" width="0.0361%" height="15" fill="rgb(230,229,49)" fg:x="1590" fg:w="1"/><text x="57.5886%" y="447.50"></text></g><g><title>handle_fasteoi_irq (1 samples, 0.04%)</title><rect x="57.3386%" y="421" width="0.0361%" height="15" fill="rgb(238,70,47)" fg:x="1590" fg:w="1"/><text x="57.5886%" y="431.50"></text></g><g><title>handle_irq_event (1 samples, 0.04%)</title><rect x="57.3386%" y="405" width="0.0361%" height="15" fill="rgb(231,160,17)" fg:x="1590" fg:w="1"/><text x="57.5886%" y="415.50"></text></g><g><title>__handle_irq_event_percpu (1 samples, 0.04%)</title><rect x="57.3386%" y="389" width="0.0361%" height="15" fill="rgb(218,68,53)" fg:x="1590" fg:w="1"/><text x="57.5886%" y="399.50"></text></g><g><title>i801_isr (1 samples, 0.04%)</title><rect x="57.3386%" y="373" width="0.0361%" height="15" fill="rgb(236,111,10)" fg:x="1590" fg:w="1"/><text x="57.5886%" y="383.50"></text></g><g><title>free_perturb (4 samples, 0.14%)</title><rect x="57.3747%" y="469" width="0.1442%" height="15" fill="rgb(224,34,41)" fg:x="1591" fg:w="4"/><text x="57.6247%" y="479.50"></text></g><g><title>_int_free (38 samples, 1.37%)</title><rect x="56.2928%" y="485" width="1.3704%" height="15" fill="rgb(241,118,19)" fg:x="1561" fg:w="38"/><text x="56.5428%" y="495.50"></text></g><g><title>tcache_put (4 samples, 0.14%)</title><rect x="57.5189%" y="469" width="0.1442%" height="15" fill="rgb(238,129,25)" fg:x="1595" fg:w="4"/><text x="57.7689%" y="479.50"></text></g><g><title>__GI___libc_free (58 samples, 2.09%)</title><rect x="55.6076%" y="501" width="2.0916%" height="15" fill="rgb(238,22,31)" fg:x="1542" fg:w="58"/><text x="55.8576%" y="511.50">_..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="57.6632%" y="485" width="0.0361%" height="15" fill="rgb(222,174,48)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="57.6632%" y="469" width="0.0361%" height="15" fill="rgb(206,152,40)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="479.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="57.6632%" y="453" width="0.0361%" height="15" fill="rgb(218,99,54)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="463.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="57.6632%" y="437" width="0.0361%" height="15" fill="rgb(220,174,26)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="447.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="57.6632%" y="421" width="0.0361%" height="15" fill="rgb(245,116,9)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="431.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.04%)</title><rect x="57.6632%" y="405" width="0.0361%" height="15" fill="rgb(209,72,35)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="415.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="57.6632%" y="389" width="0.0361%" height="15" fill="rgb(226,126,21)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="399.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="57.6632%" y="373" width="0.0361%" height="15" fill="rgb(227,192,1)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="383.50"></text></g><g><title>scheduler_tick (1 samples, 0.04%)</title><rect x="57.6632%" y="357" width="0.0361%" height="15" fill="rgb(237,180,29)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="367.50"></text></g><g><title>task_tick_fair (1 samples, 0.04%)</title><rect x="57.6632%" y="341" width="0.0361%" height="15" fill="rgb(230,197,35)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="351.50"></text></g><g><title>update_cfs_group (1 samples, 0.04%)</title><rect x="57.6632%" y="325" width="0.0361%" height="15" fill="rgb(246,193,31)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="335.50"></text></g><g><title>avg_vruntime (1 samples, 0.04%)</title><rect x="57.6632%" y="309" width="0.0361%" height="15" fill="rgb(241,36,4)" fg:x="1599" fg:w="1"/><text x="57.9132%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (61 samples, 2.20%)</title><rect x="55.5355%" y="597" width="2.1998%" height="15" fill="rgb(241,130,17)" fg:x="1540" fg:w="61"/><text x="55.7855%" y="607.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (61 samples, 2.20%)</title><rect x="55.5355%" y="581" width="2.1998%" height="15" fill="rgb(206,137,32)" fg:x="1540" fg:w="61"/><text x="55.7855%" y="591.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (61 samples, 2.20%)</title><rect x="55.5355%" y="565" width="2.1998%" height="15" fill="rgb(237,228,51)" fg:x="1540" fg:w="61"/><text x="55.7855%" y="575.50">c..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 2.20%)</title><rect x="55.5355%" y="549" width="2.1998%" height="15" fill="rgb(243,6,42)" fg:x="1540" fg:w="61"/><text x="55.7855%" y="559.50">&lt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (59 samples, 2.13%)</title><rect x="55.6076%" y="533" width="2.1277%" height="15" fill="rgb(251,74,28)" fg:x="1542" fg:w="59"/><text x="55.8576%" y="543.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (59 samples, 2.13%)</title><rect x="55.6076%" y="517" width="2.1277%" height="15" fill="rgb(218,20,49)" fg:x="1542" fg:w="59"/><text x="55.8576%" y="527.50">a..</text></g><g><title>__rust_dealloc (1 samples, 0.04%)</title><rect x="57.6992%" y="501" width="0.0361%" height="15" fill="rgb(238,28,14)" fg:x="1600" fg:w="1"/><text x="57.9492%" y="511.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (121 samples, 4.36%)</title><rect x="53.5521%" y="613" width="4.3635%" height="15" fill="rgb(229,40,46)" fg:x="1485" fg:w="121"/><text x="53.8021%" y="623.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (5 samples, 0.18%)</title><rect x="57.7353%" y="597" width="0.1803%" height="15" fill="rgb(244,195,20)" fg:x="1601" fg:w="5"/><text x="57.9853%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.04%)</title><rect x="57.8796%" y="581" width="0.0361%" height="15" fill="rgb(253,56,35)" fg:x="1605" fg:w="1"/><text x="58.1296%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="57.8796%" y="565" width="0.0361%" height="15" fill="rgb(210,149,44)" fg:x="1605" fg:w="1"/><text x="58.1296%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="57.8796%" y="549" width="0.0361%" height="15" fill="rgb(240,135,12)" fg:x="1605" fg:w="1"/><text x="58.1296%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="57.8796%" y="533" width="0.0361%" height="15" fill="rgb(251,24,50)" fg:x="1605" fg:w="1"/><text x="58.1296%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload::Payload&gt; (147 samples, 5.30%)</title><rect x="52.6506%" y="741" width="5.3011%" height="15" fill="rgb(243,200,47)" fg:x="1460" fg:w="147"/><text x="52.9006%" y="751.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (147 samples, 5.30%)</title><rect x="52.6506%" y="725" width="5.3011%" height="15" fill="rgb(224,166,26)" fg:x="1460" fg:w="147"/><text x="52.9006%" y="735.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (147 samples, 5.30%)</title><rect x="52.6506%" y="709" width="5.3011%" height="15" fill="rgb(233,0,47)" fg:x="1460" fg:w="147"/><text x="52.9006%" y="719.50">core::..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (147 samples, 5.30%)</title><rect x="52.6506%" y="693" width="5.3011%" height="15" fill="rgb(253,80,5)" fg:x="1460" fg:w="147"/><text x="52.9006%" y="703.50">&lt;alloc..</text></g><g><title>core::mem::drop (147 samples, 5.30%)</title><rect x="52.6506%" y="677" width="5.3011%" height="15" fill="rgb(214,133,25)" fg:x="1460" fg:w="147"/><text x="52.9006%" y="687.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (147 samples, 5.30%)</title><rect x="52.6506%" y="661" width="5.3011%" height="15" fill="rgb(209,27,14)" fg:x="1460" fg:w="147"/><text x="52.9006%" y="671.50">core::..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (147 samples, 5.30%)</title><rect x="52.6506%" y="645" width="5.3011%" height="15" fill="rgb(219,102,51)" fg:x="1460" fg:w="147"/><text x="52.9006%" y="655.50">&lt;alloc..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (122 samples, 4.40%)</title><rect x="53.5521%" y="629" width="4.3996%" height="15" fill="rgb(237,18,16)" fg:x="1485" fg:w="122"/><text x="53.8021%" y="639.50">alloc..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="57.9156%" y="613" width="0.0361%" height="15" fill="rgb(241,85,17)" fg:x="1606" fg:w="1"/><text x="58.1656%" y="623.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="57.9156%" y="597" width="0.0361%" height="15" fill="rgb(236,90,42)" fg:x="1606" fg:w="1"/><text x="58.1656%" y="607.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (1 samples, 0.04%)</title><rect x="57.9156%" y="581" width="0.0361%" height="15" fill="rgb(249,57,21)" fg:x="1606" fg:w="1"/><text x="58.1656%" y="591.50"></text></g><g><title>csv::string_record::StringRecord::get (2 samples, 0.07%)</title><rect x="57.9517%" y="741" width="0.0721%" height="15" fill="rgb(243,12,36)" fg:x="1607" fg:w="2"/><text x="58.2017%" y="751.50"></text></g><g><title>csv::byte_record::ByteRecord::get (2 samples, 0.07%)</title><rect x="57.9517%" y="725" width="0.0721%" height="15" fill="rgb(253,128,47)" fg:x="1607" fg:w="2"/><text x="58.2017%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.07%)</title><rect x="57.9517%" y="709" width="0.0721%" height="15" fill="rgb(207,33,20)" fg:x="1607" fg:w="2"/><text x="58.2017%" y="719.50"></text></g><g><title>csv::byte_record::ByteRecord::get::_{{closure}} (2 samples, 0.07%)</title><rect x="57.9517%" y="693" width="0.0721%" height="15" fill="rgb(233,215,35)" fg:x="1607" fg:w="2"/><text x="58.2017%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.07%)</title><rect x="57.9517%" y="677" width="0.0721%" height="15" fill="rgb(249,188,52)" fg:x="1607" fg:w="2"/><text x="58.2017%" y="687.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="57.9517%" y="661" width="0.0721%" height="15" fill="rgb(225,12,32)" fg:x="1607" fg:w="2"/><text x="58.2017%" y="671.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="57.9517%" y="645" width="0.0721%" height="15" fill="rgb(247,98,14)" fg:x="1607" fg:w="2"/><text x="58.2017%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.04%)</title><rect x="57.9877%" y="629" width="0.0361%" height="15" fill="rgb(247,219,48)" fg:x="1608" fg:w="1"/><text x="58.2377%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="58.0238%" y="725" width="0.0361%" height="15" fill="rgb(253,60,48)" fg:x="1609" fg:w="1"/><text x="58.2738%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.04%)</title><rect x="58.0238%" y="709" width="0.0361%" height="15" fill="rgb(245,15,52)" fg:x="1609" fg:w="1"/><text x="58.2738%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.04%)</title><rect x="58.0238%" y="693" width="0.0361%" height="15" fill="rgb(220,133,28)" fg:x="1609" fg:w="1"/><text x="58.2738%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.04%)</title><rect x="58.0238%" y="677" width="0.0361%" height="15" fill="rgb(217,180,4)" fg:x="1609" fg:w="1"/><text x="58.2738%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.04%)</title><rect x="58.0238%" y="661" width="0.0361%" height="15" fill="rgb(251,24,1)" fg:x="1609" fg:w="1"/><text x="58.2738%" y="671.50"></text></g><g><title>__GI___libc_free (1 samples, 0.04%)</title><rect x="58.0238%" y="645" width="0.0361%" height="15" fill="rgb(212,185,49)" fg:x="1609" fg:w="1"/><text x="58.2738%" y="655.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="58.0238%" y="629" width="0.0361%" height="15" fill="rgb(215,175,22)" fg:x="1609" fg:w="1"/><text x="58.2738%" y="639.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="58.0238%" y="613" width="0.0361%" height="15" fill="rgb(250,205,14)" fg:x="1609" fg:w="1"/><text x="58.2738%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;serde_json::value::Value&gt;&gt; (1 samples, 0.04%)</title><rect x="58.5647%" y="517" width="0.0361%" height="15" fill="rgb(225,211,22)" fg:x="1624" fg:w="1"/><text x="58.8147%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.14%)</title><rect x="59.8269%" y="357" width="0.1442%" height="15" fill="rgb(251,179,42)" fg:x="1659" fg:w="4"/><text x="60.0769%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="59.9712%" y="357" width="0.0361%" height="15" fill="rgb(208,216,51)" fg:x="1663" fg:w="1"/><text x="60.2212%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="59.9712%" y="341" width="0.0361%" height="15" fill="rgb(235,36,11)" fg:x="1663" fg:w="1"/><text x="60.2212%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.04%)</title><rect x="59.9712%" y="325" width="0.0361%" height="15" fill="rgb(213,189,28)" fg:x="1663" fg:w="1"/><text x="60.2212%" y="335.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (15 samples, 0.54%)</title><rect x="59.8269%" y="373" width="0.5409%" height="15" fill="rgb(227,203,42)" fg:x="1659" fg:w="15"/><text x="60.0769%" y="383.50"></text></g><g><title>serde_cbor::read::SliceRead::end (10 samples, 0.36%)</title><rect x="60.0072%" y="357" width="0.3606%" height="15" fill="rgb(244,72,36)" fg:x="1664" fg:w="10"/><text x="60.2572%" y="367.50"></text></g><g><title>_int_malloc (4 samples, 0.14%)</title><rect x="60.9088%" y="133" width="0.1442%" height="15" fill="rgb(213,53,17)" fg:x="1689" fg:w="4"/><text x="61.1588%" y="143.50"></text></g><g><title>tcache_put (1 samples, 0.04%)</title><rect x="61.0169%" y="117" width="0.0361%" height="15" fill="rgb(207,167,3)" fg:x="1692" fg:w="1"/><text x="61.2669%" y="127.50"></text></g><g><title>__GI___libc_malloc (23 samples, 0.83%)</title><rect x="60.4400%" y="149" width="0.8294%" height="15" fill="rgb(216,98,30)" fg:x="1676" fg:w="23"/><text x="60.6900%" y="159.50"></text></g><g><title>tcache_get (6 samples, 0.22%)</title><rect x="61.0530%" y="133" width="0.2164%" height="15" fill="rgb(236,123,15)" fg:x="1693" fg:w="6"/><text x="61.3030%" y="143.50"></text></g><g><title>tcache_get_n (6 samples, 0.22%)</title><rect x="61.0530%" y="117" width="0.2164%" height="15" fill="rgb(248,81,50)" fg:x="1693" fg:w="6"/><text x="61.3030%" y="127.50"></text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="61.2694%" y="149" width="0.0361%" height="15" fill="rgb(214,120,4)" fg:x="1699" fg:w="1"/><text x="61.5194%" y="159.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="61.2694%" y="133" width="0.0361%" height="15" fill="rgb(208,179,34)" fg:x="1699" fg:w="1"/><text x="61.5194%" y="143.50"></text></g><g><title>__rust_alloc (2 samples, 0.07%)</title><rect x="61.3054%" y="149" width="0.0721%" height="15" fill="rgb(227,140,7)" fg:x="1700" fg:w="2"/><text x="61.5554%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (32 samples, 1.15%)</title><rect x="60.3678%" y="245" width="1.1540%" height="15" fill="rgb(214,22,6)" fg:x="1674" fg:w="32"/><text x="60.6178%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (32 samples, 1.15%)</title><rect x="60.3678%" y="229" width="1.1540%" height="15" fill="rgb(207,137,27)" fg:x="1674" fg:w="32"/><text x="60.6178%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (32 samples, 1.15%)</title><rect x="60.3678%" y="213" width="1.1540%" height="15" fill="rgb(210,8,46)" fg:x="1674" fg:w="32"/><text x="60.6178%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (30 samples, 1.08%)</title><rect x="60.4400%" y="197" width="1.0819%" height="15" fill="rgb(240,16,54)" fg:x="1676" fg:w="30"/><text x="60.6900%" y="207.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (30 samples, 1.08%)</title><rect x="60.4400%" y="181" width="1.0819%" height="15" fill="rgb(211,209,29)" fg:x="1676" fg:w="30"/><text x="60.6900%" y="191.50"></text></g><g><title>alloc::alloc::alloc (30 samples, 1.08%)</title><rect x="60.4400%" y="165" width="1.0819%" height="15" fill="rgb(226,228,24)" fg:x="1676" fg:w="30"/><text x="60.6900%" y="175.50"></text></g><g><title>core::ptr::read_volatile (4 samples, 0.14%)</title><rect x="61.3776%" y="149" width="0.1442%" height="15" fill="rgb(222,84,9)" fg:x="1702" fg:w="4"/><text x="61.6276%" y="159.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="61.4858%" y="133" width="0.0361%" height="15" fill="rgb(234,203,30)" fg:x="1705" fg:w="1"/><text x="61.7358%" y="143.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="61.4858%" y="117" width="0.0361%" height="15" fill="rgb(238,109,14)" fg:x="1705" fg:w="1"/><text x="61.7358%" y="127.50"></text></g><g><title>__common_interrupt (1 samples, 0.04%)</title><rect x="61.4858%" y="101" width="0.0361%" height="15" fill="rgb(233,206,34)" fg:x="1705" fg:w="1"/><text x="61.7358%" y="111.50"></text></g><g><title>handle_fasteoi_irq (1 samples, 0.04%)</title><rect x="61.4858%" y="85" width="0.0361%" height="15" fill="rgb(220,167,47)" fg:x="1705" fg:w="1"/><text x="61.7358%" y="95.50"></text></g><g><title>handle_irq_event (1 samples, 0.04%)</title><rect x="61.4858%" y="69" width="0.0361%" height="15" fill="rgb(238,105,10)" fg:x="1705" fg:w="1"/><text x="61.7358%" y="79.50"></text></g><g><title>__handle_irq_event_percpu (1 samples, 0.04%)</title><rect x="61.4858%" y="53" width="0.0361%" height="15" fill="rgb(213,227,17)" fg:x="1705" fg:w="1"/><text x="61.7358%" y="63.50"></text></g><g><title>native_io_delay (1 samples, 0.04%)</title><rect x="61.4858%" y="37" width="0.0361%" height="15" fill="rgb(217,132,38)" fg:x="1705" fg:w="1"/><text x="61.7358%" y="47.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (35 samples, 1.26%)</title><rect x="60.3678%" y="373" width="1.2622%" height="15" fill="rgb(242,146,4)" fg:x="1674" fg:w="35"/><text x="60.6178%" y="383.50"></text></g><g><title>&lt;serde::de::impls::StringVisitor as serde::de::Visitor&gt;::visit_str (35 samples, 1.26%)</title><rect x="60.3678%" y="357" width="1.2622%" height="15" fill="rgb(212,61,9)" fg:x="1674" fg:w="35"/><text x="60.6178%" y="367.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (35 samples, 1.26%)</title><rect x="60.3678%" y="341" width="1.2622%" height="15" fill="rgb(247,126,22)" fg:x="1674" fg:w="35"/><text x="60.6178%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (35 samples, 1.26%)</title><rect x="60.3678%" y="325" width="1.2622%" height="15" fill="rgb(220,196,2)" fg:x="1674" fg:w="35"/><text x="60.6178%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (35 samples, 1.26%)</title><rect x="60.3678%" y="309" width="1.2622%" height="15" fill="rgb(208,46,4)" fg:x="1674" fg:w="35"/><text x="60.6178%" y="319.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 1.26%)</title><rect x="60.3678%" y="293" width="1.2622%" height="15" fill="rgb(252,104,46)" fg:x="1674" fg:w="35"/><text x="60.6178%" y="303.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 1.26%)</title><rect x="60.3678%" y="277" width="1.2622%" height="15" fill="rgb(237,152,48)" fg:x="1674" fg:w="35"/><text x="60.6178%" y="287.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 1.26%)</title><rect x="60.3678%" y="261" width="1.2622%" height="15" fill="rgb(221,59,37)" fg:x="1674" fg:w="35"/><text x="60.6178%" y="271.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.11%)</title><rect x="61.5218%" y="245" width="0.1082%" height="15" fill="rgb(209,202,51)" fg:x="1706" fg:w="3"/><text x="61.7718%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="61.5218%" y="229" width="0.1082%" height="15" fill="rgb(228,81,30)" fg:x="1706" fg:w="3"/><text x="61.7718%" y="239.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="61.5939%" y="213" width="0.0361%" height="15" fill="rgb(227,42,39)" fg:x="1708" fg:w="1"/><text x="61.8439%" y="223.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.18%)</title><rect x="64.2625%" y="325" width="0.1803%" height="15" fill="rgb(221,26,2)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.18%)</title><rect x="64.2625%" y="309" width="0.1803%" height="15" fill="rgb(254,61,31)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="319.50"></text></g><g><title>irqentry_exit (5 samples, 0.18%)</title><rect x="64.2625%" y="293" width="0.1803%" height="15" fill="rgb(222,173,38)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="303.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.18%)</title><rect x="64.2625%" y="277" width="0.1803%" height="15" fill="rgb(218,50,12)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="287.50"></text></g><g><title>schedule (5 samples, 0.18%)</title><rect x="64.2625%" y="261" width="0.1803%" height="15" fill="rgb(223,88,40)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="271.50"></text></g><g><title>__schedule (5 samples, 0.18%)</title><rect x="64.2625%" y="245" width="0.1803%" height="15" fill="rgb(237,54,19)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="255.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.18%)</title><rect x="64.2625%" y="229" width="0.1803%" height="15" fill="rgb(251,129,25)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="239.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.18%)</title><rect x="64.2625%" y="213" width="0.1803%" height="15" fill="rgb(238,97,19)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="223.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.18%)</title><rect x="64.2625%" y="197" width="0.1803%" height="15" fill="rgb(240,169,18)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="207.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.18%)</title><rect x="64.2625%" y="181" width="0.1803%" height="15" fill="rgb(230,187,49)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="191.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.18%)</title><rect x="64.2625%" y="165" width="0.1803%" height="15" fill="rgb(209,44,26)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="175.50"></text></g><g><title>native_write_msr (5 samples, 0.18%)</title><rect x="64.2625%" y="149" width="0.1803%" height="15" fill="rgb(244,0,6)" fg:x="1782" fg:w="5"/><text x="64.5125%" y="159.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (137 samples, 4.94%)</title><rect x="59.7908%" y="389" width="4.9405%" height="15" fill="rgb(248,18,21)" fg:x="1658" fg:w="137"/><text x="60.0408%" y="399.50">serde_..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (86 samples, 3.10%)</title><rect x="61.6300%" y="373" width="3.1013%" height="15" fill="rgb(245,180,19)" fg:x="1709" fg:w="86"/><text x="61.8800%" y="383.50">ser..</text></g><g><title>core::str::converts::from_utf8 (86 samples, 3.10%)</title><rect x="61.6300%" y="357" width="3.1013%" height="15" fill="rgb(252,118,36)" fg:x="1709" fg:w="86"/><text x="61.8800%" y="367.50">cor..</text></g><g><title>core::str::validations::run_utf8_validation (78 samples, 2.81%)</title><rect x="61.9185%" y="341" width="2.8128%" height="15" fill="rgb(210,224,19)" fg:x="1717" fg:w="78"/><text x="62.1685%" y="351.50">co..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (8 samples, 0.29%)</title><rect x="64.4428%" y="325" width="0.2885%" height="15" fill="rgb(218,30,24)" fg:x="1787" fg:w="8"/><text x="64.6928%" y="335.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (151 samples, 5.45%)</title><rect x="59.3942%" y="469" width="5.4454%" height="15" fill="rgb(219,75,50)" fg:x="1647" fg:w="151"/><text x="59.6442%" y="479.50">&lt;core::..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (151 samples, 5.45%)</title><rect x="59.3942%" y="453" width="5.4454%" height="15" fill="rgb(234,72,50)" fg:x="1647" fg:w="151"/><text x="59.6442%" y="463.50">serde::..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (151 samples, 5.45%)</title><rect x="59.3942%" y="437" width="5.4454%" height="15" fill="rgb(219,100,48)" fg:x="1647" fg:w="151"/><text x="59.6442%" y="447.50">&lt;&amp;mut s..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (151 samples, 5.45%)</title><rect x="59.3942%" y="421" width="5.4454%" height="15" fill="rgb(253,5,41)" fg:x="1647" fg:w="151"/><text x="59.6442%" y="431.50">&lt;&amp;mut s..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (151 samples, 5.45%)</title><rect x="59.3942%" y="405" width="5.4454%" height="15" fill="rgb(247,181,11)" fg:x="1647" fg:w="151"/><text x="59.6442%" y="415.50">serde_c..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (3 samples, 0.11%)</title><rect x="64.7313%" y="389" width="0.1082%" height="15" fill="rgb(222,223,25)" fg:x="1795" fg:w="3"/><text x="64.9813%" y="399.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (3 samples, 0.11%)</title><rect x="64.7313%" y="373" width="0.1082%" height="15" fill="rgb(214,198,28)" fg:x="1795" fg:w="3"/><text x="64.9813%" y="383.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (3 samples, 0.11%)</title><rect x="64.7313%" y="357" width="0.1082%" height="15" fill="rgb(230,46,43)" fg:x="1795" fg:w="3"/><text x="64.9813%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (3 samples, 0.11%)</title><rect x="64.8395%" y="469" width="0.1082%" height="15" fill="rgb(233,65,53)" fg:x="1798" fg:w="3"/><text x="65.0895%" y="479.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (158 samples, 5.70%)</title><rect x="59.3220%" y="485" width="5.6978%" height="15" fill="rgb(221,121,27)" fg:x="1645" fg:w="158"/><text x="59.5720%" y="495.50">&lt;serde_..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::peek (2 samples, 0.07%)</title><rect x="64.9477%" y="469" width="0.0721%" height="15" fill="rgb(247,70,47)" fg:x="1801" fg:w="2"/><text x="65.1977%" y="479.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::peek (2 samples, 0.07%)</title><rect x="64.9477%" y="453" width="0.0721%" height="15" fill="rgb(228,85,35)" fg:x="1801" fg:w="2"/><text x="65.1977%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="65.1641%" y="389" width="0.0721%" height="15" fill="rgb(209,50,18)" fg:x="1807" fg:w="2"/><text x="65.4141%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="65.1641%" y="373" width="0.0721%" height="15" fill="rgb(250,19,35)" fg:x="1807" fg:w="2"/><text x="65.4141%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.04%)</title><rect x="65.2001%" y="357" width="0.0361%" height="15" fill="rgb(253,107,29)" fg:x="1808" fg:w="1"/><text x="65.4501%" y="367.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (9 samples, 0.32%)</title><rect x="65.1641%" y="405" width="0.3246%" height="15" fill="rgb(252,179,29)" fg:x="1807" fg:w="9"/><text x="65.4141%" y="415.50"></text></g><g><title>serde_cbor::read::SliceRead::end (7 samples, 0.25%)</title><rect x="65.2362%" y="389" width="0.2524%" height="15" fill="rgb(238,194,6)" fg:x="1809" fg:w="7"/><text x="65.4862%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (4 samples, 0.14%)</title><rect x="65.3444%" y="373" width="0.1442%" height="15" fill="rgb(238,164,29)" fg:x="1812" fg:w="4"/><text x="65.5944%" y="383.50"></text></g><g><title>_int_malloc (13 samples, 0.47%)</title><rect x="66.3902%" y="149" width="0.4688%" height="15" fill="rgb(224,25,9)" fg:x="1841" fg:w="13"/><text x="66.6402%" y="159.50"></text></g><g><title>tcache_put (3 samples, 0.11%)</title><rect x="66.7508%" y="133" width="0.1082%" height="15" fill="rgb(244,153,23)" fg:x="1851" fg:w="3"/><text x="67.0008%" y="143.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="66.8590%" y="149" width="0.0361%" height="15" fill="rgb(212,203,14)" fg:x="1854" fg:w="1"/><text x="67.1090%" y="159.50"></text></g><g><title>__GI___libc_malloc (49 samples, 1.77%)</title><rect x="65.5247%" y="165" width="1.7670%" height="15" fill="rgb(220,164,20)" fg:x="1817" fg:w="49"/><text x="65.7747%" y="175.50"></text></g><g><title>tcache_get (11 samples, 0.40%)</title><rect x="66.8951%" y="149" width="0.3967%" height="15" fill="rgb(222,203,48)" fg:x="1855" fg:w="11"/><text x="67.1451%" y="159.50"></text></g><g><title>tcache_get_n (11 samples, 0.40%)</title><rect x="66.8951%" y="133" width="0.3967%" height="15" fill="rgb(215,159,22)" fg:x="1855" fg:w="11"/><text x="67.1451%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (51 samples, 1.84%)</title><rect x="65.4886%" y="261" width="1.8392%" height="15" fill="rgb(216,183,47)" fg:x="1816" fg:w="51"/><text x="65.7386%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (51 samples, 1.84%)</title><rect x="65.4886%" y="245" width="1.8392%" height="15" fill="rgb(229,195,25)" fg:x="1816" fg:w="51"/><text x="65.7386%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (51 samples, 1.84%)</title><rect x="65.4886%" y="229" width="1.8392%" height="15" fill="rgb(224,132,51)" fg:x="1816" fg:w="51"/><text x="65.7386%" y="239.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 1.80%)</title><rect x="65.5247%" y="213" width="1.8031%" height="15" fill="rgb(240,63,7)" fg:x="1817" fg:w="50"/><text x="65.7747%" y="223.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 1.80%)</title><rect x="65.5247%" y="197" width="1.8031%" height="15" fill="rgb(249,182,41)" fg:x="1817" fg:w="50"/><text x="65.7747%" y="207.50">a..</text></g><g><title>alloc::alloc::alloc (50 samples, 1.80%)</title><rect x="65.5247%" y="181" width="1.8031%" height="15" fill="rgb(243,47,26)" fg:x="1817" fg:w="50"/><text x="65.7747%" y="191.50">a..</text></g><g><title>__rdl_alloc (1 samples, 0.04%)</title><rect x="67.2917%" y="165" width="0.0361%" height="15" fill="rgb(233,48,2)" fg:x="1866" fg:w="1"/><text x="67.5417%" y="175.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.04%)</title><rect x="67.2917%" y="149" width="0.0361%" height="15" fill="rgb(244,165,34)" fg:x="1866" fg:w="1"/><text x="67.5417%" y="159.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (54 samples, 1.95%)</title><rect x="65.4886%" y="373" width="1.9473%" height="15" fill="rgb(207,89,7)" fg:x="1816" fg:w="54"/><text x="65.7386%" y="383.50">&lt;..</text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (54 samples, 1.95%)</title><rect x="65.4886%" y="357" width="1.9473%" height="15" fill="rgb(244,117,36)" fg:x="1816" fg:w="54"/><text x="65.7386%" y="367.50">a..</text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (54 samples, 1.95%)</title><rect x="65.4886%" y="341" width="1.9473%" height="15" fill="rgb(226,144,34)" fg:x="1816" fg:w="54"/><text x="65.7386%" y="351.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (54 samples, 1.95%)</title><rect x="65.4886%" y="325" width="1.9473%" height="15" fill="rgb(213,23,19)" fg:x="1816" fg:w="54"/><text x="65.7386%" y="335.50">a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (54 samples, 1.95%)</title><rect x="65.4886%" y="309" width="1.9473%" height="15" fill="rgb(217,75,12)" fg:x="1816" fg:w="54"/><text x="65.7386%" y="319.50">a..</text></g><g><title>alloc::slice::hack::to_vec (54 samples, 1.95%)</title><rect x="65.4886%" y="293" width="1.9473%" height="15" fill="rgb(224,159,17)" fg:x="1816" fg:w="54"/><text x="65.7386%" y="303.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (54 samples, 1.95%)</title><rect x="65.4886%" y="277" width="1.9473%" height="15" fill="rgb(217,118,1)" fg:x="1816" fg:w="54"/><text x="65.7386%" y="287.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.11%)</title><rect x="67.3278%" y="261" width="0.1082%" height="15" fill="rgb(232,180,48)" fg:x="1867" fg:w="3"/><text x="67.5778%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="67.3278%" y="245" width="0.1082%" height="15" fill="rgb(230,27,33)" fg:x="1867" fg:w="3"/><text x="67.5778%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="67.3639%" y="229" width="0.0721%" height="15" fill="rgb(205,31,21)" fg:x="1868" fg:w="2"/><text x="67.6139%" y="239.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (55 samples, 1.98%)</title><rect x="65.4886%" y="405" width="1.9834%" height="15" fill="rgb(253,59,4)" fg:x="1816" fg:w="55"/><text x="65.7386%" y="415.50">s..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (55 samples, 1.98%)</title><rect x="65.4886%" y="389" width="1.9834%" height="15" fill="rgb(224,201,9)" fg:x="1816" fg:w="55"/><text x="65.7386%" y="399.50">&lt;..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_string (1 samples, 0.04%)</title><rect x="67.4360%" y="373" width="0.0361%" height="15" fill="rgb(229,206,30)" fg:x="1870" fg:w="1"/><text x="67.6860%" y="383.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (115 samples, 4.15%)</title><rect x="65.0559%" y="421" width="4.1471%" height="15" fill="rgb(212,67,47)" fg:x="1804" fg:w="115"/><text x="65.3059%" y="431.50">serde..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (48 samples, 1.73%)</title><rect x="67.4721%" y="405" width="1.7310%" height="15" fill="rgb(211,96,50)" fg:x="1871" fg:w="48"/><text x="67.7221%" y="415.50"></text></g><g><title>core::str::converts::from_utf8 (45 samples, 1.62%)</title><rect x="67.5802%" y="389" width="1.6228%" height="15" fill="rgb(252,114,18)" fg:x="1874" fg:w="45"/><text x="67.8302%" y="399.50"></text></g><g><title>core::str::validations::run_utf8_validation (36 samples, 1.30%)</title><rect x="67.9048%" y="373" width="1.2982%" height="15" fill="rgb(223,58,37)" fg:x="1883" fg:w="36"/><text x="68.1548%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (3 samples, 0.11%)</title><rect x="69.0948%" y="357" width="0.1082%" height="15" fill="rgb(237,70,4)" fg:x="1916" fg:w="3"/><text x="69.3448%" y="367.50"></text></g><g><title>serde::de::MapAccess::next_entry (303 samples, 10.93%)</title><rect x="58.6008%" y="517" width="10.9268%" height="15" fill="rgb(244,85,46)" fg:x="1625" fg:w="303"/><text x="58.8508%" y="527.50">serde::de::MapAc..</text></g><g><title>serde::de::MapAccess::next_entry_seed (303 samples, 10.93%)</title><rect x="58.6008%" y="501" width="10.9268%" height="15" fill="rgb(223,39,52)" fg:x="1625" fg:w="303"/><text x="58.8508%" y="511.50">serde::de::MapAc..</text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (125 samples, 4.51%)</title><rect x="65.0198%" y="485" width="4.5078%" height="15" fill="rgb(218,200,14)" fg:x="1803" fg:w="125"/><text x="65.2698%" y="495.50">&lt;serd..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (125 samples, 4.51%)</title><rect x="65.0198%" y="469" width="4.5078%" height="15" fill="rgb(208,171,16)" fg:x="1803" fg:w="125"/><text x="65.2698%" y="479.50">&lt;core..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (125 samples, 4.51%)</title><rect x="65.0198%" y="453" width="4.5078%" height="15" fill="rgb(234,200,18)" fg:x="1803" fg:w="125"/><text x="65.2698%" y="463.50">serde..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (125 samples, 4.51%)</title><rect x="65.0198%" y="437" width="4.5078%" height="15" fill="rgb(228,45,11)" fg:x="1803" fg:w="125"/><text x="65.2698%" y="447.50">&lt;&amp;mut..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (9 samples, 0.32%)</title><rect x="69.2030%" y="421" width="0.3246%" height="15" fill="rgb(237,182,11)" fg:x="1919" fg:w="9"/><text x="69.4530%" y="431.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (2 samples, 0.07%)</title><rect x="69.4555%" y="405" width="0.0721%" height="15" fill="rgb(241,175,49)" fg:x="1926" fg:w="2"/><text x="69.7055%" y="415.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (2 samples, 0.07%)</title><rect x="69.4555%" y="389" width="0.0721%" height="15" fill="rgb(247,38,35)" fg:x="1926" fg:w="2"/><text x="69.7055%" y="399.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (2 samples, 0.07%)</title><rect x="69.4555%" y="373" width="0.0721%" height="15" fill="rgb(228,39,49)" fg:x="1926" fg:w="2"/><text x="69.7055%" y="383.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,Type&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="69.9603%" y="469" width="0.0361%" height="15" fill="rgb(226,101,26)" fg:x="1940" fg:w="1"/><text x="70.2103%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (2 samples, 0.07%)</title><rect x="70.1406%" y="453" width="0.0721%" height="15" fill="rgb(206,141,19)" fg:x="1945" fg:w="2"/><text x="70.3906%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (2 samples, 0.07%)</title><rect x="70.1406%" y="437" width="0.0721%" height="15" fill="rgb(211,200,13)" fg:x="1945" fg:w="2"/><text x="70.3906%" y="447.50"></text></g><g><title>__memcmp_avx2_movbe (68 samples, 2.45%)</title><rect x="71.2225%" y="357" width="2.4522%" height="15" fill="rgb(241,121,6)" fg:x="1975" fg:w="68"/><text x="71.4725%" y="367.50">__..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="73.6387%" y="341" width="0.0361%" height="15" fill="rgb(234,221,29)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="351.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="73.6387%" y="325" width="0.0361%" height="15" fill="rgb(229,136,5)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="335.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="73.6387%" y="309" width="0.0361%" height="15" fill="rgb(238,36,11)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="319.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="73.6387%" y="293" width="0.0361%" height="15" fill="rgb(251,55,41)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="303.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="73.6387%" y="277" width="0.0361%" height="15" fill="rgb(242,34,40)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="287.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.04%)</title><rect x="73.6387%" y="261" width="0.0361%" height="15" fill="rgb(215,42,17)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="271.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="73.6387%" y="245" width="0.0361%" height="15" fill="rgb(207,44,46)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="255.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="73.6387%" y="229" width="0.0361%" height="15" fill="rgb(211,206,28)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="239.50"></text></g><g><title>scheduler_tick (1 samples, 0.04%)</title><rect x="73.6387%" y="213" width="0.0361%" height="15" fill="rgb(237,167,16)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="223.50"></text></g><g><title>arch_scale_freq_tick (1 samples, 0.04%)</title><rect x="73.6387%" y="197" width="0.0361%" height="15" fill="rgb(233,66,6)" fg:x="2042" fg:w="1"/><text x="73.8887%" y="207.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="73.6747%" y="357" width="0.0361%" height="15" fill="rgb(246,123,29)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="367.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="73.6747%" y="341" width="0.0361%" height="15" fill="rgb(209,62,40)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="351.50"></text></g><g><title>__common_interrupt (1 samples, 0.04%)</title><rect x="73.6747%" y="325" width="0.0361%" height="15" fill="rgb(218,4,25)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="335.50"></text></g><g><title>handle_fasteoi_irq (1 samples, 0.04%)</title><rect x="73.6747%" y="309" width="0.0361%" height="15" fill="rgb(253,91,49)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="319.50"></text></g><g><title>handle_irq_event (1 samples, 0.04%)</title><rect x="73.6747%" y="293" width="0.0361%" height="15" fill="rgb(228,155,29)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="303.50"></text></g><g><title>__handle_irq_event_percpu (1 samples, 0.04%)</title><rect x="73.6747%" y="277" width="0.0361%" height="15" fill="rgb(243,57,37)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="287.50"></text></g><g><title>i801_isr (1 samples, 0.04%)</title><rect x="73.6747%" y="261" width="0.0361%" height="15" fill="rgb(244,167,17)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="271.50"></text></g><g><title>pci_read_config_word (1 samples, 0.04%)</title><rect x="73.6747%" y="245" width="0.0361%" height="15" fill="rgb(207,181,38)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="255.50"></text></g><g><title>pci_bus_read_config_word (1 samples, 0.04%)</title><rect x="73.6747%" y="229" width="0.0361%" height="15" fill="rgb(211,8,23)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="239.50"></text></g><g><title>pci_read (1 samples, 0.04%)</title><rect x="73.6747%" y="213" width="0.0361%" height="15" fill="rgb(235,11,44)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="223.50"></text></g><g><title>pci_conf1_read (1 samples, 0.04%)</title><rect x="73.6747%" y="197" width="0.0361%" height="15" fill="rgb(248,18,52)" fg:x="2043" fg:w="1"/><text x="73.9247%" y="207.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (97 samples, 3.50%)</title><rect x="70.6455%" y="421" width="3.4980%" height="15" fill="rgb(208,4,7)" fg:x="1959" fg:w="97"/><text x="70.8955%" y="431.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (97 samples, 3.50%)</title><rect x="70.6455%" y="405" width="3.4980%" height="15" fill="rgb(240,17,39)" fg:x="1959" fg:w="97"/><text x="70.8955%" y="415.50">&lt;al..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (97 samples, 3.50%)</title><rect x="70.6455%" y="389" width="3.4980%" height="15" fill="rgb(207,170,3)" fg:x="1959" fg:w="97"/><text x="70.8955%" y="399.50">cor..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (97 samples, 3.50%)</title><rect x="70.6455%" y="373" width="3.4980%" height="15" fill="rgb(236,100,52)" fg:x="1959" fg:w="97"/><text x="70.8955%" y="383.50">&lt;u8..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (12 samples, 0.43%)</title><rect x="73.7108%" y="357" width="0.4327%" height="15" fill="rgb(246,78,51)" fg:x="2044" fg:w="12"/><text x="73.9608%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.14%)</title><rect x="74.1435%" y="421" width="0.1442%" height="15" fill="rgb(211,17,15)" fg:x="2056" fg:w="4"/><text x="74.3935%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.14%)</title><rect x="74.1435%" y="405" width="0.1442%" height="15" fill="rgb(209,59,46)" fg:x="2056" fg:w="4"/><text x="74.3935%" y="415.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.11%)</title><rect x="74.1796%" y="389" width="0.1082%" height="15" fill="rgb(210,92,25)" fg:x="2057" fg:w="3"/><text x="74.4296%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (2 samples, 0.07%)</title><rect x="74.2878%" y="421" width="0.0721%" height="15" fill="rgb(238,174,52)" fg:x="2060" fg:w="2"/><text x="74.5378%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (125 samples, 4.51%)</title><rect x="69.8882%" y="485" width="4.5078%" height="15" fill="rgb(230,73,7)" fg:x="1938" fg:w="125"/><text x="70.1382%" y="495.50">alloc..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (122 samples, 4.40%)</title><rect x="69.9964%" y="469" width="4.3996%" height="15" fill="rgb(243,124,40)" fg:x="1941" fg:w="122"/><text x="70.2464%" y="479.50">alloc..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (116 samples, 4.18%)</title><rect x="70.2128%" y="453" width="4.1832%" height="15" fill="rgb(244,170,11)" fg:x="1947" fg:w="116"/><text x="70.4628%" y="463.50">alloc..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (116 samples, 4.18%)</title><rect x="70.2128%" y="437" width="4.1832%" height="15" fill="rgb(207,114,54)" fg:x="1947" fg:w="116"/><text x="70.4628%" y="447.50">alloc..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="74.3599%" y="421" width="0.0361%" height="15" fill="rgb(205,42,20)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="74.3599%" y="405" width="0.0361%" height="15" fill="rgb(230,30,28)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="415.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="74.3599%" y="389" width="0.0361%" height="15" fill="rgb(205,73,54)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="399.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="74.3599%" y="373" width="0.0361%" height="15" fill="rgb(254,227,23)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="383.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="74.3599%" y="357" width="0.0361%" height="15" fill="rgb(228,202,34)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="367.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.04%)</title><rect x="74.3599%" y="341" width="0.0361%" height="15" fill="rgb(222,225,37)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="351.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="74.3599%" y="325" width="0.0361%" height="15" fill="rgb(221,14,54)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="335.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="74.3599%" y="309" width="0.0361%" height="15" fill="rgb(254,102,2)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="319.50"></text></g><g><title>scheduler_tick (1 samples, 0.04%)</title><rect x="74.3599%" y="293" width="0.0361%" height="15" fill="rgb(232,104,17)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="303.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.04%)</title><rect x="74.3599%" y="277" width="0.0361%" height="15" fill="rgb(250,220,14)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="287.50"></text></g><g><title>x86_pmu_disable (1 samples, 0.04%)</title><rect x="74.3599%" y="261" width="0.0361%" height="15" fill="rgb(241,158,9)" fg:x="2062" fg:w="1"/><text x="74.6099%" y="271.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert::_{{closure}} (1 samples, 0.04%)</title><rect x="75.0090%" y="453" width="0.0361%" height="15" fill="rgb(246,9,43)" fg:x="2080" fg:w="1"/><text x="75.2590%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (1 samples, 0.04%)</title><rect x="75.0090%" y="437" width="0.0361%" height="15" fill="rgb(206,73,33)" fg:x="2080" fg:w="1"/><text x="75.2590%" y="447.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (1 samples, 0.04%)</title><rect x="75.0090%" y="421" width="0.0361%" height="15" fill="rgb(222,79,8)" fg:x="2080" fg:w="1"/><text x="75.2590%" y="431.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.04%)</title><rect x="75.0090%" y="405" width="0.0361%" height="15" fill="rgb(234,8,54)" fg:x="2080" fg:w="1"/><text x="75.2590%" y="415.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="75.0090%" y="389" width="0.0361%" height="15" fill="rgb(209,134,38)" fg:x="2080" fg:w="1"/><text x="75.2590%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::DormantMut,K,V,NodeType&gt;,HandleType&gt;::awaken (2 samples, 0.07%)</title><rect x="75.0451%" y="453" width="0.0721%" height="15" fill="rgb(230,127,29)" fg:x="2081" fg:w="2"/><text x="75.2951%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (1 samples, 0.04%)</title><rect x="75.1172%" y="437" width="0.0361%" height="15" fill="rgb(242,44,41)" fg:x="2083" fg:w="1"/><text x="75.3672%" y="447.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.04%)</title><rect x="75.1172%" y="421" width="0.0361%" height="15" fill="rgb(222,56,43)" fg:x="2083" fg:w="1"/><text x="75.3672%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (2 samples, 0.07%)</title><rect x="75.1172%" y="453" width="0.0721%" height="15" fill="rgb(238,39,47)" fg:x="2083" fg:w="2"/><text x="75.3672%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.04%)</title><rect x="75.1533%" y="437" width="0.0361%" height="15" fill="rgb(226,79,43)" fg:x="2084" fg:w="1"/><text x="75.4033%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (5 samples, 0.18%)</title><rect x="75.3696%" y="405" width="0.1803%" height="15" fill="rgb(242,105,53)" fg:x="2090" fg:w="5"/><text x="75.6196%" y="415.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (9 samples, 0.32%)</title><rect x="75.3696%" y="421" width="0.3246%" height="15" fill="rgb(251,132,46)" fg:x="2090" fg:w="9"/><text x="75.6196%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (4 samples, 0.14%)</title><rect x="75.5499%" y="405" width="0.1442%" height="15" fill="rgb(231,77,14)" fg:x="2095" fg:w="4"/><text x="75.7999%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (10 samples, 0.36%)</title><rect x="75.3696%" y="437" width="0.3606%" height="15" fill="rgb(240,135,9)" fg:x="2090" fg:w="10"/><text x="75.6196%" y="447.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.04%)</title><rect x="75.6942%" y="421" width="0.0361%" height="15" fill="rgb(248,109,14)" fg:x="2099" fg:w="1"/><text x="75.9442%" y="431.50"></text></g><g><title>common_interrupt (1 samples, 0.04%)</title><rect x="75.6942%" y="405" width="0.0361%" height="15" fill="rgb(227,146,52)" fg:x="2099" fg:w="1"/><text x="75.9442%" y="415.50"></text></g><g><title>__common_interrupt (1 samples, 0.04%)</title><rect x="75.6942%" y="389" width="0.0361%" height="15" fill="rgb(232,54,3)" fg:x="2099" fg:w="1"/><text x="75.9442%" y="399.50"></text></g><g><title>handle_fasteoi_irq (1 samples, 0.04%)</title><rect x="75.6942%" y="373" width="0.0361%" height="15" fill="rgb(229,201,43)" fg:x="2099" fg:w="1"/><text x="75.9442%" y="383.50"></text></g><g><title>handle_irq_event (1 samples, 0.04%)</title><rect x="75.6942%" y="357" width="0.0361%" height="15" fill="rgb(252,161,33)" fg:x="2099" fg:w="1"/><text x="75.9442%" y="367.50"></text></g><g><title>__handle_irq_event_percpu (1 samples, 0.04%)</title><rect x="75.6942%" y="341" width="0.0361%" height="15" fill="rgb(226,146,40)" fg:x="2099" fg:w="1"/><text x="75.9442%" y="351.50"></text></g><g><title>native_io_delay (1 samples, 0.04%)</title><rect x="75.6942%" y="325" width="0.0361%" height="15" fill="rgb(219,47,25)" fg:x="2099" fg:w="1"/><text x="75.9442%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (1 samples, 0.04%)</title><rect x="75.7303%" y="421" width="0.0361%" height="15" fill="rgb(250,135,13)" fg:x="2100" fg:w="1"/><text x="75.9803%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::val_area_mut (1 samples, 0.04%)</title><rect x="75.7303%" y="405" width="0.0361%" height="15" fill="rgb(219,229,18)" fg:x="2100" fg:w="1"/><text x="75.9803%" y="415.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="75.7303%" y="389" width="0.0361%" height="15" fill="rgb(217,152,27)" fg:x="2100" fg:w="1"/><text x="75.9803%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="75.7303%" y="373" width="0.0361%" height="15" fill="rgb(225,71,47)" fg:x="2100" fg:w="1"/><text x="75.9803%" y="383.50"></text></g><g><title>core::slice::index::get_offset_len_mut_noubcheck (1 samples, 0.04%)</title><rect x="75.7303%" y="357" width="0.0361%" height="15" fill="rgb(220,139,14)" fg:x="2100" fg:w="1"/><text x="75.9803%" y="367.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (1 samples, 0.04%)</title><rect x="75.7303%" y="341" width="0.0361%" height="15" fill="rgb(247,54,32)" fg:x="2100" fg:w="1"/><text x="75.9803%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (2 samples, 0.07%)</title><rect x="75.7303%" y="437" width="0.0721%" height="15" fill="rgb(252,131,39)" fg:x="2100" fg:w="2"/><text x="75.9803%" y="447.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.04%)</title><rect x="75.7663%" y="421" width="0.0361%" height="15" fill="rgb(210,108,39)" fg:x="2101" fg:w="1"/><text x="76.0163%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.04%)</title><rect x="75.7663%" y="405" width="0.0361%" height="15" fill="rgb(205,23,29)" fg:x="2101" fg:w="1"/><text x="76.0163%" y="415.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.04%)</title><rect x="75.7663%" y="389" width="0.0361%" height="15" fill="rgb(246,139,46)" fg:x="2101" fg:w="1"/><text x="76.0163%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="75.7663%" y="373" width="0.0361%" height="15" fill="rgb(250,81,26)" fg:x="2101" fg:w="1"/><text x="76.0163%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="75.7663%" y="357" width="0.0361%" height="15" fill="rgb(214,104,7)" fg:x="2101" fg:w="1"/><text x="76.0163%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="75.7663%" y="341" width="0.0361%" height="15" fill="rgb(233,189,8)" fg:x="2101" fg:w="1"/><text x="76.0163%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="75.7663%" y="325" width="0.0361%" height="15" fill="rgb(228,141,17)" fg:x="2101" fg:w="1"/><text x="76.0163%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (25 samples, 0.90%)</title><rect x="74.9369%" y="469" width="0.9016%" height="15" fill="rgb(247,157,1)" fg:x="2078" fg:w="25"/><text x="75.1869%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (18 samples, 0.65%)</title><rect x="75.1893%" y="453" width="0.6491%" height="15" fill="rgb(249,225,5)" fg:x="2085" fg:w="18"/><text x="75.4393%" y="463.50"></text></g><g><title>alloc::collections::btree::node::splitpoint (1 samples, 0.04%)</title><rect x="75.8024%" y="437" width="0.0361%" height="15" fill="rgb(242,55,13)" fg:x="2102" fg:w="1"/><text x="76.0524%" y="447.50"></text></g><g><title>mmap_payload_storage::payload::Payload::from_bytes (494 samples, 17.81%)</title><rect x="58.0599%" y="725" width="17.8146%" height="15" fill="rgb(230,49,50)" fg:x="1610" fg:w="494"/><text x="58.3099%" y="735.50">mmap_payload_storage::payloa..</text></g><g><title>serde_cbor::de::from_slice (493 samples, 17.78%)</title><rect x="58.0959%" y="709" width="17.7786%" height="15" fill="rgb(241,111,38)" fg:x="1611" fg:w="493"/><text x="58.3459%" y="719.50">serde_cbor::de::from_slice</text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::de::Deserialize for mmap_payload_storage::payload::Payload&gt;::deserialize (493 samples, 17.78%)</title><rect x="58.0959%" y="693" width="17.7786%" height="15" fill="rgb(252,155,4)" fg:x="1611" fg:w="493"/><text x="58.3459%" y="703.50">mmap_payload_storage::payloa..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (493 samples, 17.78%)</title><rect x="58.0959%" y="677" width="17.7786%" height="15" fill="rgb(212,69,32)" fg:x="1611" fg:w="493"/><text x="58.3459%" y="687.50">&lt;&amp;mut serde_cbor::de::Deseri..</text></g><g><title>&lt;mmap_payload_storage::payload::_::&lt;impl serde::de::Deserialize for mmap_payload_storage::payload::Payload&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_newtype_struct (493 samples, 17.78%)</title><rect x="58.0959%" y="661" width="17.7786%" height="15" fill="rgb(243,107,47)" fg:x="1611" fg:w="493"/><text x="58.3459%" y="671.50">&lt;mmap_payload_storage::paylo..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize (493 samples, 17.78%)</title><rect x="58.0959%" y="645" width="17.7786%" height="15" fill="rgb(247,130,12)" fg:x="1611" fg:w="493"/><text x="58.3459%" y="655.50">&lt;serde_json::map::Map&lt;alloc:..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (493 samples, 17.78%)</title><rect x="58.0959%" y="629" width="17.7786%" height="15" fill="rgb(233,74,16)" fg:x="1611" fg:w="493"/><text x="58.3459%" y="639.50">&lt;&amp;mut serde_cbor::de::Deseri..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (493 samples, 17.78%)</title><rect x="58.0959%" y="613" width="17.7786%" height="15" fill="rgb(208,58,18)" fg:x="1611" fg:w="493"/><text x="58.3459%" y="623.50">&lt;&amp;mut serde_cbor::de::Deseri..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (493 samples, 17.78%)</title><rect x="58.0959%" y="597" width="17.7786%" height="15" fill="rgb(242,225,1)" fg:x="1611" fg:w="493"/><text x="58.3459%" y="607.50">serde_cbor::de::Deserializer..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map (489 samples, 17.63%)</title><rect x="58.2402%" y="581" width="17.6343%" height="15" fill="rgb(249,39,40)" fg:x="1615" fg:w="489"/><text x="58.4902%" y="591.50">serde_cbor::de::Deserialize..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (489 samples, 17.63%)</title><rect x="58.2402%" y="565" width="17.6343%" height="15" fill="rgb(207,72,44)" fg:x="1615" fg:w="489"/><text x="58.4902%" y="575.50">serde_cbor::de::Deserialize..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map::_{{closure}} (489 samples, 17.63%)</title><rect x="58.2402%" y="549" width="17.6343%" height="15" fill="rgb(215,193,12)" fg:x="1615" fg:w="489"/><text x="58.4902%" y="559.50">serde_cbor::de::Deserialize..</text></g><g><title>&lt;&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize::Visitor as serde::de::Visitor&gt;::visit_map (487 samples, 17.56%)</title><rect x="58.3123%" y="533" width="17.5622%" height="15" fill="rgb(248,41,39)" fg:x="1617" fg:w="487"/><text x="58.5623%" y="543.50">&lt;&lt;serde_json::map::Map&lt;allo..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (176 samples, 6.35%)</title><rect x="69.5276%" y="517" width="6.3469%" height="15" fill="rgb(253,85,4)" fg:x="1928" fg:w="176"/><text x="69.7776%" y="527.50">serde_js..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (175 samples, 6.31%)</title><rect x="69.5636%" y="501" width="6.3109%" height="15" fill="rgb(243,70,31)" fg:x="1929" fg:w="175"/><text x="69.8136%" y="511.50">alloc::c..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (41 samples, 1.48%)</title><rect x="74.3960%" y="485" width="1.4785%" height="15" fill="rgb(253,195,26)" fg:x="2063" fg:w="41"/><text x="74.6460%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.04%)</title><rect x="75.8384%" y="469" width="0.0361%" height="15" fill="rgb(243,42,11)" fg:x="2103" fg:w="1"/><text x="76.0884%" y="479.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.04%)</title><rect x="75.8384%" y="453" width="0.0361%" height="15" fill="rgb(239,66,17)" fg:x="2103" fg:w="1"/><text x="76.0884%" y="463.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.04%)</title><rect x="75.8384%" y="437" width="0.0361%" height="15" fill="rgb(217,132,21)" fg:x="2103" fg:w="1"/><text x="76.0884%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.04%)</title><rect x="75.8384%" y="421" width="0.0361%" height="15" fill="rgb(252,202,21)" fg:x="2103" fg:w="1"/><text x="76.0884%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="75.8384%" y="405" width="0.0361%" height="15" fill="rgb(233,98,36)" fg:x="2103" fg:w="1"/><text x="76.0884%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="75.8384%" y="389" width="0.0361%" height="15" fill="rgb(216,153,54)" fg:x="2103" fg:w="1"/><text x="76.0884%" y="399.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="75.8384%" y="373" width="0.0361%" height="15" fill="rgb(250,99,7)" fg:x="2103" fg:w="1"/><text x="76.0884%" y="383.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="75.8384%" y="357" width="0.0361%" height="15" fill="rgb(207,56,50)" fg:x="2103" fg:w="1"/><text x="76.0884%" y="367.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.11%)</title><rect x="76.2351%" y="661" width="0.1082%" height="15" fill="rgb(244,61,34)" fg:x="2114" fg:w="3"/><text x="76.4851%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="76.3433%" y="661" width="0.1442%" height="15" fill="rgb(241,50,38)" fg:x="2117" fg:w="4"/><text x="76.5933%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="76.4876%" y="661" width="0.0361%" height="15" fill="rgb(212,166,30)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="671.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="76.4876%" y="645" width="0.0361%" height="15" fill="rgb(249,127,32)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="655.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="76.4876%" y="629" width="0.0361%" height="15" fill="rgb(209,103,0)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="639.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="76.4876%" y="613" width="0.0361%" height="15" fill="rgb(238,209,51)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="623.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="76.4876%" y="597" width="0.0361%" height="15" fill="rgb(237,56,23)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="607.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="76.4876%" y="581" width="0.0361%" height="15" fill="rgb(215,153,46)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="591.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.04%)</title><rect x="76.4876%" y="565" width="0.0361%" height="15" fill="rgb(224,49,31)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="575.50"></text></g><g><title>tick_sched_handle (1 samples, 0.04%)</title><rect x="76.4876%" y="549" width="0.0361%" height="15" fill="rgb(250,18,42)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="559.50"></text></g><g><title>update_process_times (1 samples, 0.04%)</title><rect x="76.4876%" y="533" width="0.0361%" height="15" fill="rgb(215,176,39)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="543.50"></text></g><g><title>account_process_tick (1 samples, 0.04%)</title><rect x="76.4876%" y="517" width="0.0361%" height="15" fill="rgb(223,77,29)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="527.50"></text></g><g><title>account_user_time (1 samples, 0.04%)</title><rect x="76.4876%" y="501" width="0.0361%" height="15" fill="rgb(234,94,52)" fg:x="2121" fg:w="1"/><text x="76.7376%" y="511.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from (4 samples, 0.14%)</title><rect x="76.5236%" y="661" width="0.1442%" height="15" fill="rgb(220,154,50)" fg:x="2122" fg:w="4"/><text x="76.7736%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (4 samples, 0.14%)</title><rect x="76.5236%" y="645" width="0.1442%" height="15" fill="rgb(212,11,10)" fg:x="2122" fg:w="4"/><text x="76.7736%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.07%)</title><rect x="76.6679%" y="661" width="0.0721%" height="15" fill="rgb(205,166,19)" fg:x="2126" fg:w="2"/><text x="76.9179%" y="671.50"></text></g><g><title>core::num::&lt;impl isize&gt;::unchecked_neg (2 samples, 0.07%)</title><rect x="76.6679%" y="645" width="0.0721%" height="15" fill="rgb(244,198,16)" fg:x="2126" fg:w="2"/><text x="76.9179%" y="655.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.11%)</title><rect x="76.8121%" y="629" width="0.1082%" height="15" fill="rgb(219,69,12)" fg:x="2130" fg:w="3"/><text x="77.0621%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="76.9203%" y="629" width="0.0361%" height="15" fill="rgb(245,30,7)" fg:x="2133" fg:w="1"/><text x="77.1703%" y="639.50"></text></g><g><title>lz4_flex::block::decompress::duplicate_overlapping (7 samples, 0.25%)</title><rect x="76.7400%" y="645" width="0.2524%" height="15" fill="rgb(218,221,48)" fg:x="2128" fg:w="7"/><text x="76.9900%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.04%)</title><rect x="76.9564%" y="629" width="0.0361%" height="15" fill="rgb(216,66,15)" fg:x="2134" fg:w="1"/><text x="77.2064%" y="639.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="76.9564%" y="613" width="0.0361%" height="15" fill="rgb(226,122,50)" fg:x="2134" fg:w="1"/><text x="77.2064%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="76.9924%" y="629" width="0.1082%" height="15" fill="rgb(239,156,16)" fg:x="2135" fg:w="3"/><text x="77.2424%" y="639.50"></text></g><g><title>lz4_flex::block::decompress::duplicate (11 samples, 0.40%)</title><rect x="76.7400%" y="661" width="0.3967%" height="15" fill="rgb(224,27,38)" fg:x="2128" fg:w="11"/><text x="76.9900%" y="671.50"></text></g><g><title>lz4_flex::block::decompress::wild_copy_from_src_16 (4 samples, 0.14%)</title><rect x="76.9924%" y="645" width="0.1442%" height="15" fill="rgb(224,39,27)" fg:x="2135" fg:w="4"/><text x="77.2424%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.04%)</title><rect x="77.1006%" y="629" width="0.0361%" height="15" fill="rgb(215,92,29)" fg:x="2138" fg:w="1"/><text x="77.3506%" y="639.50"></text></g><g><title>lz4_flex::block::decompress::read_integer_ptr (1 samples, 0.04%)</title><rect x="77.1367%" y="661" width="0.0361%" height="15" fill="rgb(207,159,16)" fg:x="2139" fg:w="1"/><text x="77.3867%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.04%)</title><rect x="77.1367%" y="645" width="0.0361%" height="15" fill="rgb(238,163,47)" fg:x="2139" fg:w="1"/><text x="77.3867%" y="655.50"></text></g><g><title>core::ptr::read (1 samples, 0.04%)</title><rect x="77.1367%" y="629" width="0.0361%" height="15" fill="rgb(219,91,49)" fg:x="2139" fg:w="1"/><text x="77.3867%" y="639.50"></text></g><g><title>lz4_flex::block::decompress::read_u16_ptr (2 samples, 0.07%)</title><rect x="77.1727%" y="661" width="0.0721%" height="15" fill="rgb(227,167,31)" fg:x="2140" fg:w="2"/><text x="77.4227%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="77.1727%" y="645" width="0.0721%" height="15" fill="rgb(234,80,54)" fg:x="2140" fg:w="2"/><text x="77.4227%" y="655.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::double_copy_trick (1 samples, 0.04%)</title><rect x="77.3170%" y="645" width="0.0361%" height="15" fill="rgb(212,114,2)" fg:x="2144" fg:w="1"/><text x="77.5670%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="77.3170%" y="629" width="0.0361%" height="15" fill="rgb(234,50,24)" fg:x="2144" fg:w="1"/><text x="77.5670%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.22%)</title><rect x="77.3530%" y="629" width="0.2164%" height="15" fill="rgb(221,68,8)" fg:x="2145" fg:w="6"/><text x="77.6030%" y="639.50"></text></g><g><title>lz4_flex::block::decompress::decompress (50 samples, 1.80%)</title><rect x="75.8745%" y="693" width="1.8031%" height="15" fill="rgb(254,180,31)" fg:x="2104" fg:w="50"/><text x="76.1245%" y="703.50">l..</text></g><g><title>lz4_flex::block::decompress::decompress_internal (50 samples, 1.80%)</title><rect x="75.8745%" y="677" width="1.8031%" height="15" fill="rgb(247,130,50)" fg:x="2104" fg:w="50"/><text x="76.1245%" y="687.50">l..</text></g><g><title>lz4_flex::fastcpy_unsafe::slice_copy (12 samples, 0.43%)</title><rect x="77.2449%" y="661" width="0.4327%" height="15" fill="rgb(211,109,4)" fg:x="2142" fg:w="12"/><text x="77.4949%" y="671.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::wild_copy_from_src (9 samples, 0.32%)</title><rect x="77.3530%" y="645" width="0.3246%" height="15" fill="rgb(238,50,21)" fg:x="2145" fg:w="9"/><text x="77.6030%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.11%)</title><rect x="77.5694%" y="629" width="0.1082%" height="15" fill="rgb(225,57,45)" fg:x="2151" fg:w="3"/><text x="77.8194%" y="639.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::decompress (55 samples, 1.98%)</title><rect x="75.8745%" y="725" width="1.9834%" height="15" fill="rgb(209,196,50)" fg:x="2104" fg:w="55"/><text x="76.1245%" y="735.50">m..</text></g><g><title>lz4_flex::block::decompress::decompress_size_prepended (55 samples, 1.98%)</title><rect x="75.8745%" y="709" width="1.9834%" height="15" fill="rgb(242,140,13)" fg:x="2104" fg:w="55"/><text x="76.1245%" y="719.50">l..</text></g><g><title>lz4_flex::block::uncompressed_size (5 samples, 0.18%)</title><rect x="77.6776%" y="693" width="0.1803%" height="15" fill="rgb(217,111,7)" fg:x="2154" fg:w="5"/><text x="77.9276%" y="703.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="77.8579%" y="645" width="0.0361%" height="15" fill="rgb(253,193,51)" fg:x="2159" fg:w="1"/><text x="78.1079%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="77.8579%" y="629" width="0.0361%" height="15" fill="rgb(252,70,29)" fg:x="2159" fg:w="1"/><text x="78.1079%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.04%)</title><rect x="77.8579%" y="613" width="0.0361%" height="15" fill="rgb(232,127,12)" fg:x="2159" fg:w="1"/><text x="78.1079%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.04%)</title><rect x="77.8579%" y="597" width="0.0361%" height="15" fill="rgb(211,180,21)" fg:x="2159" fg:w="1"/><text x="78.1079%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.04%)</title><rect x="77.8579%" y="581" width="0.0361%" height="15" fill="rgb(229,72,13)" fg:x="2159" fg:w="1"/><text x="78.1079%" y="591.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_payload (552 samples, 19.91%)</title><rect x="58.0238%" y="741" width="19.9062%" height="15" fill="rgb(240,211,49)" fg:x="1609" fg:w="552"/><text x="58.2738%" y="751.50">mmap_payload_storage::payload_s..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.07%)</title><rect x="77.8579%" y="725" width="0.0721%" height="15" fill="rgb(219,149,40)" fg:x="2159" fg:w="2"/><text x="78.1079%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.07%)</title><rect x="77.8579%" y="709" width="0.0721%" height="15" fill="rgb(210,127,46)" fg:x="2159" fg:w="2"/><text x="78.1079%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.07%)</title><rect x="77.8579%" y="693" width="0.0721%" height="15" fill="rgb(220,106,7)" fg:x="2159" fg:w="2"/><text x="78.1079%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.07%)</title><rect x="77.8579%" y="677" width="0.0721%" height="15" fill="rgb(249,31,22)" fg:x="2159" fg:w="2"/><text x="78.1079%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="77.8579%" y="661" width="0.0721%" height="15" fill="rgb(253,1,49)" fg:x="2159" fg:w="2"/><text x="78.1079%" y="671.50"></text></g><g><title>&lt;std::hash::random::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.04%)</title><rect x="77.8940%" y="645" width="0.0361%" height="15" fill="rgb(227,144,33)" fg:x="2160" fg:w="1"/><text x="78.1440%" y="655.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (1 samples, 0.04%)</title><rect x="77.8940%" y="629" width="0.0361%" height="15" fill="rgb(249,163,44)" fg:x="2160" fg:w="1"/><text x="78.1440%" y="639.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (1 samples, 0.04%)</title><rect x="77.8940%" y="613" width="0.0361%" height="15" fill="rgb(234,15,39)" fg:x="2160" fg:w="1"/><text x="78.1440%" y="623.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (1 samples, 0.04%)</title><rect x="77.8940%" y="597" width="0.0361%" height="15" fill="rgb(207,66,16)" fg:x="2160" fg:w="1"/><text x="78.1440%" y="607.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="77.9300%" y="629" width="0.0361%" height="15" fill="rgb(233,112,24)" fg:x="2161" fg:w="1"/><text x="78.1800%" y="639.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.04%)</title><rect x="77.9661%" y="629" width="0.0361%" height="15" fill="rgb(230,90,22)" fg:x="2162" fg:w="1"/><text x="78.2161%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.14%)</title><rect x="77.9300%" y="725" width="0.1442%" height="15" fill="rgb(229,61,13)" fg:x="2161" fg:w="4"/><text x="78.1800%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.14%)</title><rect x="77.9300%" y="709" width="0.1442%" height="15" fill="rgb(225,57,24)" fg:x="2161" fg:w="4"/><text x="78.1800%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="77.9300%" y="693" width="0.1442%" height="15" fill="rgb(208,169,48)" fg:x="2161" fg:w="4"/><text x="78.1800%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.14%)</title><rect x="77.9300%" y="677" width="0.1442%" height="15" fill="rgb(244,218,51)" fg:x="2161" fg:w="4"/><text x="78.1800%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.14%)</title><rect x="77.9300%" y="661" width="0.1442%" height="15" fill="rgb(214,148,10)" fg:x="2161" fg:w="4"/><text x="78.1800%" y="671.50"></text></g><g><title>__GI___libc_free (4 samples, 0.14%)</title><rect x="77.9300%" y="645" width="0.1442%" height="15" fill="rgb(225,174,27)" fg:x="2161" fg:w="4"/><text x="78.1800%" y="655.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.07%)</title><rect x="78.0022%" y="629" width="0.0721%" height="15" fill="rgb(230,96,26)" fg:x="2163" fg:w="2"/><text x="78.2522%" y="639.50"></text></g><g><title>do_fault (1 samples, 0.04%)</title><rect x="78.1103%" y="565" width="0.0361%" height="15" fill="rgb(232,10,30)" fg:x="2166" fg:w="1"/><text x="78.3603%" y="575.50"></text></g><g><title>do_page_mkwrite (1 samples, 0.04%)</title><rect x="78.1103%" y="549" width="0.0361%" height="15" fill="rgb(222,8,50)" fg:x="2166" fg:w="1"/><text x="78.3603%" y="559.50"></text></g><g><title>ext4_page_mkwrite (1 samples, 0.04%)</title><rect x="78.1103%" y="533" width="0.0361%" height="15" fill="rgb(213,81,27)" fg:x="2166" fg:w="1"/><text x="78.3603%" y="543.50"></text></g><g><title>block_page_mkwrite (1 samples, 0.04%)</title><rect x="78.1103%" y="517" width="0.0361%" height="15" fill="rgb(245,50,10)" fg:x="2166" fg:w="1"/><text x="78.3603%" y="527.50"></text></g><g><title>folio_mark_dirty (1 samples, 0.04%)</title><rect x="78.1103%" y="501" width="0.0361%" height="15" fill="rgb(216,100,18)" fg:x="2166" fg:w="1"/><text x="78.3603%" y="511.50"></text></g><g><title>ext4_dirty_folio (1 samples, 0.04%)</title><rect x="78.1103%" y="485" width="0.0361%" height="15" fill="rgb(236,147,54)" fg:x="2166" fg:w="1"/><text x="78.3603%" y="495.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="78.1103%" y="469" width="0.0361%" height="15" fill="rgb(205,143,26)" fg:x="2166" fg:w="1"/><text x="78.3603%" y="479.50"></text></g><g><title>block_page_mkwrite (1 samples, 0.04%)</title><rect x="78.1464%" y="517" width="0.0361%" height="15" fill="rgb(236,26,9)" fg:x="2167" fg:w="1"/><text x="78.3964%" y="527.50"></text></g><g><title>__block_write_begin_int (1 samples, 0.04%)</title><rect x="78.1464%" y="501" width="0.0361%" height="15" fill="rgb(221,165,53)" fg:x="2167" fg:w="1"/><text x="78.3964%" y="511.50"></text></g><g><title>mark_buffer_dirty (1 samples, 0.04%)</title><rect x="78.1464%" y="485" width="0.0361%" height="15" fill="rgb(214,110,17)" fg:x="2167" fg:w="1"/><text x="78.3964%" y="495.50"></text></g><g><title>__folio_mark_dirty (1 samples, 0.04%)</title><rect x="78.1464%" y="469" width="0.0361%" height="15" fill="rgb(237,197,12)" fg:x="2167" fg:w="1"/><text x="78.3964%" y="479.50"></text></g><g><title>folio_account_dirtied (1 samples, 0.04%)</title><rect x="78.1464%" y="453" width="0.0361%" height="15" fill="rgb(205,84,17)" fg:x="2167" fg:w="1"/><text x="78.3964%" y="463.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.04%)</title><rect x="78.1464%" y="437" width="0.0361%" height="15" fill="rgb(237,18,45)" fg:x="2167" fg:w="1"/><text x="78.3964%" y="447.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.04%)</title><rect x="78.1464%" y="421" width="0.0361%" height="15" fill="rgb(221,87,14)" fg:x="2167" fg:w="1"/><text x="78.3964%" y="431.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.04%)</title><rect x="78.1464%" y="405" width="0.0361%" height="15" fill="rgb(238,186,15)" fg:x="2167" fg:w="1"/><text x="78.3964%" y="415.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::set (4 samples, 0.14%)</title><rect x="78.0743%" y="725" width="0.1442%" height="15" fill="rgb(208,115,11)" fg:x="2165" fg:w="4"/><text x="78.3243%" y="735.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::persist_pointer (4 samples, 0.14%)</title><rect x="78.0743%" y="709" width="0.1442%" height="15" fill="rgb(254,175,0)" fg:x="2165" fg:w="4"/><text x="78.3243%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.14%)</title><rect x="78.0743%" y="693" width="0.1442%" height="15" fill="rgb(227,24,42)" fg:x="2165" fg:w="4"/><text x="78.3243%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="78.0743%" y="677" width="0.1442%" height="15" fill="rgb(223,211,37)" fg:x="2165" fg:w="4"/><text x="78.3243%" y="687.50"></text></g><g><title>asm_exc_page_fault (3 samples, 0.11%)</title><rect x="78.1103%" y="661" width="0.1082%" height="15" fill="rgb(235,49,27)" fg:x="2166" fg:w="3"/><text x="78.3603%" y="671.50"></text></g><g><title>exc_page_fault (3 samples, 0.11%)</title><rect x="78.1103%" y="645" width="0.1082%" height="15" fill="rgb(254,97,51)" fg:x="2166" fg:w="3"/><text x="78.3603%" y="655.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.11%)</title><rect x="78.1103%" y="629" width="0.1082%" height="15" fill="rgb(249,51,40)" fg:x="2166" fg:w="3"/><text x="78.3603%" y="639.50"></text></g><g><title>handle_mm_fault (3 samples, 0.11%)</title><rect x="78.1103%" y="613" width="0.1082%" height="15" fill="rgb(210,128,45)" fg:x="2166" fg:w="3"/><text x="78.3603%" y="623.50"></text></g><g><title>__handle_mm_fault (3 samples, 0.11%)</title><rect x="78.1103%" y="597" width="0.1082%" height="15" fill="rgb(224,137,50)" fg:x="2166" fg:w="3"/><text x="78.3603%" y="607.50"></text></g><g><title>handle_pte_fault (3 samples, 0.11%)</title><rect x="78.1103%" y="581" width="0.1082%" height="15" fill="rgb(242,15,9)" fg:x="2166" fg:w="3"/><text x="78.3603%" y="591.50"></text></g><g><title>do_wp_page (2 samples, 0.07%)</title><rect x="78.1464%" y="565" width="0.0721%" height="15" fill="rgb(233,187,41)" fg:x="2167" fg:w="2"/><text x="78.3964%" y="575.50"></text></g><g><title>do_page_mkwrite (2 samples, 0.07%)</title><rect x="78.1464%" y="549" width="0.0721%" height="15" fill="rgb(227,2,29)" fg:x="2167" fg:w="2"/><text x="78.3964%" y="559.50"></text></g><g><title>ext4_page_mkwrite (2 samples, 0.07%)</title><rect x="78.1464%" y="533" width="0.0721%" height="15" fill="rgb(222,70,3)" fg:x="2167" fg:w="2"/><text x="78.3964%" y="543.50"></text></g><g><title>file_update_time (1 samples, 0.04%)</title><rect x="78.1825%" y="517" width="0.0361%" height="15" fill="rgb(213,11,42)" fg:x="2168" fg:w="1"/><text x="78.4325%" y="527.50"></text></g><g><title>generic_update_time (1 samples, 0.04%)</title><rect x="78.1825%" y="501" width="0.0361%" height="15" fill="rgb(225,150,9)" fg:x="2168" fg:w="1"/><text x="78.4325%" y="511.50"></text></g><g><title>__mark_inode_dirty (1 samples, 0.04%)</title><rect x="78.1825%" y="485" width="0.0361%" height="15" fill="rgb(230,162,45)" fg:x="2168" fg:w="1"/><text x="78.4325%" y="495.50"></text></g><g><title>ext4_dirty_inode (1 samples, 0.04%)</title><rect x="78.1825%" y="469" width="0.0361%" height="15" fill="rgb(222,14,52)" fg:x="2168" fg:w="1"/><text x="78.4325%" y="479.50"></text></g><g><title>__ext4_mark_inode_dirty (1 samples, 0.04%)</title><rect x="78.1825%" y="453" width="0.0361%" height="15" fill="rgb(254,198,14)" fg:x="2168" fg:w="1"/><text x="78.4325%" y="463.50"></text></g><g><title>ext4_reserve_inode_write (1 samples, 0.04%)</title><rect x="78.1825%" y="437" width="0.0361%" height="15" fill="rgb(220,217,30)" fg:x="2168" fg:w="1"/><text x="78.4325%" y="447.50"></text></g><g><title>__ext4_journal_get_write_access (1 samples, 0.04%)</title><rect x="78.1825%" y="421" width="0.0361%" height="15" fill="rgb(215,146,41)" fg:x="2168" fg:w="1"/><text x="78.4325%" y="431.50"></text></g><g><title>errseq_check (1 samples, 0.04%)</title><rect x="78.1825%" y="405" width="0.0361%" height="15" fill="rgb(217,27,36)" fg:x="2168" fg:w="1"/><text x="78.4325%" y="415.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="78.3628%" y="437" width="0.1082%" height="15" fill="rgb(219,218,39)" fg:x="2173" fg:w="3"/><text x="78.6128%" y="447.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.18%)</title><rect x="78.3267%" y="453" width="0.1803%" height="15" fill="rgb(219,4,42)" fg:x="2172" fg:w="5"/><text x="78.5767%" y="463.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="78.4710%" y="437" width="0.0361%" height="15" fill="rgb(249,119,36)" fg:x="2176" fg:w="1"/><text x="78.7210%" y="447.50"></text></g><g><title>tcache_get_n (1 samples, 0.04%)</title><rect x="78.4710%" y="421" width="0.0361%" height="15" fill="rgb(209,23,33)" fg:x="2176" fg:w="1"/><text x="78.7210%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_map (6 samples, 0.22%)</title><rect x="78.3267%" y="645" width="0.2164%" height="15" fill="rgb(211,10,0)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="655.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::serialize_collection (6 samples, 0.22%)</title><rect x="78.3267%" y="629" width="0.2164%" height="15" fill="rgb(208,99,37)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="639.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (6 samples, 0.22%)</title><rect x="78.3267%" y="613" width="0.2164%" height="15" fill="rgb(213,132,31)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (6 samples, 0.22%)</title><rect x="78.3267%" y="597" width="0.2164%" height="15" fill="rgb(243,129,40)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.22%)</title><rect x="78.3267%" y="581" width="0.2164%" height="15" fill="rgb(210,66,33)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.22%)</title><rect x="78.3267%" y="565" width="0.2164%" height="15" fill="rgb(209,189,4)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.22%)</title><rect x="78.3267%" y="549" width="0.2164%" height="15" fill="rgb(214,107,37)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (6 samples, 0.22%)</title><rect x="78.3267%" y="533" width="0.2164%" height="15" fill="rgb(245,88,54)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.22%)</title><rect x="78.3267%" y="517" width="0.2164%" height="15" fill="rgb(205,146,20)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.22%)</title><rect x="78.3267%" y="501" width="0.2164%" height="15" fill="rgb(220,161,25)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.22%)</title><rect x="78.3267%" y="485" width="0.2164%" height="15" fill="rgb(215,152,15)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.22%)</title><rect x="78.3267%" y="469" width="0.2164%" height="15" fill="rgb(233,192,44)" fg:x="2172" fg:w="6"/><text x="78.5767%" y="479.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="78.5070%" y="453" width="0.0361%" height="15" fill="rgb(240,170,46)" fg:x="2177" fg:w="1"/><text x="78.7570%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (3 samples, 0.11%)</title><rect x="78.5792%" y="565" width="0.1082%" height="15" fill="rgb(207,104,33)" fg:x="2179" fg:w="3"/><text x="78.8292%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (3 samples, 0.11%)</title><rect x="78.5792%" y="549" width="0.1082%" height="15" fill="rgb(219,21,39)" fg:x="2179" fg:w="3"/><text x="78.8292%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (3 samples, 0.11%)</title><rect x="78.5792%" y="533" width="0.1082%" height="15" fill="rgb(214,133,29)" fg:x="2179" fg:w="3"/><text x="78.8292%" y="543.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.04%)</title><rect x="78.6513%" y="517" width="0.0361%" height="15" fill="rgb(226,93,6)" fg:x="2181" fg:w="1"/><text x="78.9013%" y="527.50"></text></g><g><title>&lt;serde_json::map::Iter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="78.5431%" y="645" width="0.2164%" height="15" fill="rgb(252,222,34)" fg:x="2178" fg:w="6"/><text x="78.7931%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.22%)</title><rect x="78.5431%" y="629" width="0.2164%" height="15" fill="rgb(252,92,48)" fg:x="2178" fg:w="6"/><text x="78.7931%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (5 samples, 0.18%)</title><rect x="78.5792%" y="613" width="0.1803%" height="15" fill="rgb(245,223,24)" fg:x="2179" fg:w="5"/><text x="78.8292%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (5 samples, 0.18%)</title><rect x="78.5792%" y="597" width="0.1803%" height="15" fill="rgb(205,176,3)" fg:x="2179" fg:w="5"/><text x="78.8292%" y="607.50"></text></g><g><title>alloc::collections::btree::mem::replace (5 samples, 0.18%)</title><rect x="78.5792%" y="581" width="0.1803%" height="15" fill="rgb(235,151,15)" fg:x="2179" fg:w="5"/><text x="78.8292%" y="591.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="78.6873%" y="565" width="0.0721%" height="15" fill="rgb(237,209,11)" fg:x="2182" fg:w="2"/><text x="78.9373%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.04%)</title><rect x="78.9398%" y="469" width="0.0361%" height="15" fill="rgb(243,227,24)" fg:x="2189" fg:w="1"/><text x="79.1898%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.04%)</title><rect x="78.9398%" y="453" width="0.0361%" height="15" fill="rgb(239,193,16)" fg:x="2189" fg:w="1"/><text x="79.1898%" y="463.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.04%)</title><rect x="78.9758%" y="437" width="0.0361%" height="15" fill="rgb(231,27,9)" fg:x="2190" fg:w="1"/><text x="79.2258%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (1 samples, 0.04%)</title><rect x="79.0119%" y="437" width="0.0361%" height="15" fill="rgb(219,169,10)" fg:x="2191" fg:w="1"/><text x="79.2619%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.14%)</title><rect x="79.5528%" y="325" width="0.1442%" height="15" fill="rgb(244,229,43)" fg:x="2206" fg:w="4"/><text x="79.8028%" y="335.50"></text></g><g><title>__GI_memcpy (5 samples, 0.18%)</title><rect x="79.5528%" y="341" width="0.1803%" height="15" fill="rgb(254,38,20)" fg:x="2206" fg:w="5"/><text x="79.8028%" y="351.50"></text></g><g><title>memcpy@@GLIBC_2.14@plt (1 samples, 0.04%)</title><rect x="79.6971%" y="325" width="0.0361%" height="15" fill="rgb(250,47,30)" fg:x="2210" fg:w="1"/><text x="79.9471%" y="335.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="79.7331%" y="341" width="0.0721%" height="15" fill="rgb(224,124,36)" fg:x="2211" fg:w="2"/><text x="79.9831%" y="351.50"></text></g><g><title>_int_realloc (30 samples, 1.08%)</title><rect x="79.3004%" y="357" width="1.0819%" height="15" fill="rgb(246,68,51)" fg:x="2199" fg:w="30"/><text x="79.5504%" y="367.50"></text></g><g><title>_int_malloc (16 samples, 0.58%)</title><rect x="79.8053%" y="341" width="0.5770%" height="15" fill="rgb(253,43,49)" fg:x="2213" fg:w="16"/><text x="80.0553%" y="351.50"></text></g><g><title>malloc_consolidate (6 samples, 0.22%)</title><rect x="80.1659%" y="325" width="0.2164%" height="15" fill="rgb(219,54,36)" fg:x="2223" fg:w="6"/><text x="80.4159%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (42 samples, 1.51%)</title><rect x="78.9037%" y="501" width="1.5146%" height="15" fill="rgb(227,133,34)" fg:x="2188" fg:w="42"/><text x="79.1537%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (42 samples, 1.51%)</title><rect x="78.9037%" y="485" width="1.5146%" height="15" fill="rgb(247,227,15)" fg:x="2188" fg:w="42"/><text x="79.1537%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (40 samples, 1.44%)</title><rect x="78.9758%" y="469" width="1.4425%" height="15" fill="rgb(229,96,14)" fg:x="2190" fg:w="40"/><text x="79.2258%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (40 samples, 1.44%)</title><rect x="78.9758%" y="453" width="1.4425%" height="15" fill="rgb(220,79,17)" fg:x="2190" fg:w="40"/><text x="79.2258%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (38 samples, 1.37%)</title><rect x="79.0480%" y="437" width="1.3704%" height="15" fill="rgb(205,131,53)" fg:x="2192" fg:w="38"/><text x="79.2980%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (37 samples, 1.33%)</title><rect x="79.0840%" y="421" width="1.3343%" height="15" fill="rgb(209,50,29)" fg:x="2193" fg:w="37"/><text x="79.3340%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (37 samples, 1.33%)</title><rect x="79.0840%" y="405" width="1.3343%" height="15" fill="rgb(245,86,46)" fg:x="2193" fg:w="37"/><text x="79.3340%" y="415.50"></text></g><g><title>alloc::alloc::realloc (37 samples, 1.33%)</title><rect x="79.0840%" y="389" width="1.3343%" height="15" fill="rgb(235,66,46)" fg:x="2193" fg:w="37"/><text x="79.3340%" y="399.50"></text></g><g><title>__GI___libc_realloc (36 samples, 1.30%)</title><rect x="79.1201%" y="373" width="1.2982%" height="15" fill="rgb(232,148,31)" fg:x="2194" fg:w="36"/><text x="79.3701%" y="383.50"></text></g><g><title>musable (1 samples, 0.04%)</title><rect x="80.3823%" y="357" width="0.0361%" height="15" fill="rgb(217,149,8)" fg:x="2229" fg:w="1"/><text x="80.6323%" y="367.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (52 samples, 1.88%)</title><rect x="78.7955%" y="581" width="1.8752%" height="15" fill="rgb(209,183,11)" fg:x="2185" fg:w="52"/><text x="79.0455%" y="591.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (51 samples, 1.84%)</title><rect x="78.8316%" y="565" width="1.8392%" height="15" fill="rgb(208,55,20)" fg:x="2186" fg:w="51"/><text x="79.0816%" y="575.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (51 samples, 1.84%)</title><rect x="78.8316%" y="549" width="1.8392%" height="15" fill="rgb(218,39,14)" fg:x="2186" fg:w="51"/><text x="79.0816%" y="559.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (51 samples, 1.84%)</title><rect x="78.8316%" y="533" width="1.8392%" height="15" fill="rgb(216,169,33)" fg:x="2186" fg:w="51"/><text x="79.0816%" y="543.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (51 samples, 1.84%)</title><rect x="78.8316%" y="517" width="1.8392%" height="15" fill="rgb(233,80,24)" fg:x="2186" fg:w="51"/><text x="79.0816%" y="527.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.25%)</title><rect x="80.4183%" y="501" width="0.2524%" height="15" fill="rgb(213,179,31)" fg:x="2230" fg:w="7"/><text x="80.6683%" y="511.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.25%)</title><rect x="80.4183%" y="485" width="0.2524%" height="15" fill="rgb(209,19,5)" fg:x="2230" fg:w="7"/><text x="80.6683%" y="495.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (6 samples, 0.22%)</title><rect x="80.6708%" y="581" width="0.2164%" height="15" fill="rgb(219,18,35)" fg:x="2237" fg:w="6"/><text x="80.9208%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="80.8871%" y="581" width="0.0361%" height="15" fill="rgb(209,169,16)" fg:x="2243" fg:w="1"/><text x="81.1371%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.04%)</title><rect x="81.1756%" y="389" width="0.0361%" height="15" fill="rgb(245,90,51)" fg:x="2251" fg:w="1"/><text x="81.4256%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (2 samples, 0.07%)</title><rect x="81.1756%" y="405" width="0.0721%" height="15" fill="rgb(220,99,45)" fg:x="2251" fg:w="2"/><text x="81.4256%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.04%)</title><rect x="81.2117%" y="389" width="0.0361%" height="15" fill="rgb(249,89,25)" fg:x="2252" fg:w="1"/><text x="81.4617%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.14%)</title><rect x="81.1756%" y="437" width="0.1442%" height="15" fill="rgb(239,193,0)" fg:x="2251" fg:w="4"/><text x="81.4256%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.14%)</title><rect x="81.1756%" y="421" width="0.1442%" height="15" fill="rgb(231,126,1)" fg:x="2251" fg:w="4"/><text x="81.4256%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.07%)</title><rect x="81.2477%" y="405" width="0.0721%" height="15" fill="rgb(243,166,3)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.07%)</title><rect x="81.2477%" y="389" width="0.0721%" height="15" fill="rgb(223,22,34)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="81.2477%" y="373" width="0.0721%" height="15" fill="rgb(251,52,51)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.07%)</title><rect x="81.2477%" y="357" width="0.0721%" height="15" fill="rgb(221,165,28)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.07%)</title><rect x="81.2477%" y="341" width="0.0721%" height="15" fill="rgb(218,121,47)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="351.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.07%)</title><rect x="81.2477%" y="325" width="0.0721%" height="15" fill="rgb(209,120,9)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="335.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.07%)</title><rect x="81.2477%" y="309" width="0.0721%" height="15" fill="rgb(236,68,12)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="319.50"></text></g><g><title>_int_realloc (2 samples, 0.07%)</title><rect x="81.2477%" y="293" width="0.0721%" height="15" fill="rgb(225,194,26)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="303.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="81.2477%" y="277" width="0.0721%" height="15" fill="rgb(231,84,39)" fg:x="2253" fg:w="2"/><text x="81.4977%" y="287.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (13 samples, 0.47%)</title><rect x="81.1035%" y="517" width="0.4688%" height="15" fill="rgb(210,11,45)" fg:x="2249" fg:w="13"/><text x="81.3535%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (13 samples, 0.47%)</title><rect x="81.1035%" y="501" width="0.4688%" height="15" fill="rgb(224,54,52)" fg:x="2249" fg:w="13"/><text x="81.3535%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.40%)</title><rect x="81.1756%" y="485" width="0.3967%" height="15" fill="rgb(238,102,14)" fg:x="2251" fg:w="11"/><text x="81.4256%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.40%)</title><rect x="81.1756%" y="469" width="0.3967%" height="15" fill="rgb(243,160,52)" fg:x="2251" fg:w="11"/><text x="81.4256%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.40%)</title><rect x="81.1756%" y="453" width="0.3967%" height="15" fill="rgb(216,114,19)" fg:x="2251" fg:w="11"/><text x="81.4256%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.25%)</title><rect x="81.3199%" y="437" width="0.2524%" height="15" fill="rgb(244,166,37)" fg:x="2255" fg:w="7"/><text x="81.5699%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.25%)</title><rect x="81.3199%" y="421" width="0.2524%" height="15" fill="rgb(246,29,44)" fg:x="2255" fg:w="7"/><text x="81.5699%" y="431.50"></text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_key (79 samples, 2.85%)</title><rect x="78.7595%" y="629" width="2.8489%" height="15" fill="rgb(215,56,53)" fg:x="2184" fg:w="79"/><text x="79.0095%" y="639.50">&lt;s..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (79 samples, 2.85%)</title><rect x="78.7595%" y="613" width="2.8489%" height="15" fill="rgb(217,60,2)" fg:x="2184" fg:w="79"/><text x="79.0095%" y="623.50">se..</text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (79 samples, 2.85%)</title><rect x="78.7595%" y="597" width="2.8489%" height="15" fill="rgb(207,26,24)" fg:x="2184" fg:w="79"/><text x="79.0095%" y="607.50">&lt;&amp;..</text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (19 samples, 0.69%)</title><rect x="80.9232%" y="581" width="0.6852%" height="15" fill="rgb(252,210,15)" fg:x="2244" fg:w="19"/><text x="81.1732%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (17 samples, 0.61%)</title><rect x="80.9953%" y="565" width="0.6131%" height="15" fill="rgb(253,209,26)" fg:x="2246" fg:w="17"/><text x="81.2453%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (16 samples, 0.58%)</title><rect x="81.0314%" y="549" width="0.5770%" height="15" fill="rgb(238,170,14)" fg:x="2247" fg:w="16"/><text x="81.2814%" y="559.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (16 samples, 0.58%)</title><rect x="81.0314%" y="533" width="0.5770%" height="15" fill="rgb(216,178,15)" fg:x="2247" fg:w="16"/><text x="81.2814%" y="543.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="81.5723%" y="517" width="0.0361%" height="15" fill="rgb(250,197,2)" fg:x="2262" fg:w="1"/><text x="81.8223%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.04%)</title><rect x="82.0772%" y="469" width="0.0361%" height="15" fill="rgb(212,70,42)" fg:x="2276" fg:w="1"/><text x="82.3272%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.04%)</title><rect x="82.0772%" y="453" width="0.0361%" height="15" fill="rgb(227,213,9)" fg:x="2276" fg:w="1"/><text x="82.3272%" y="463.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.04%)</title><rect x="82.3657%" y="341" width="0.0361%" height="15" fill="rgb(245,99,25)" fg:x="2284" fg:w="1"/><text x="82.6157%" y="351.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.07%)</title><rect x="82.4017%" y="341" width="0.0721%" height="15" fill="rgb(250,82,29)" fg:x="2285" fg:w="2"/><text x="82.6517%" y="351.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.04%)</title><rect x="82.4378%" y="325" width="0.0361%" height="15" fill="rgb(241,226,54)" fg:x="2286" fg:w="1"/><text x="82.6878%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (19 samples, 0.69%)</title><rect x="82.1493%" y="421" width="0.6852%" height="15" fill="rgb(221,99,41)" fg:x="2278" fg:w="19"/><text x="82.3993%" y="431.50"></text></g><g><title>alloc::alloc::Global::grow_impl (19 samples, 0.69%)</title><rect x="82.1493%" y="405" width="0.6852%" height="15" fill="rgb(213,90,21)" fg:x="2278" fg:w="19"/><text x="82.3993%" y="415.50"></text></g><g><title>alloc::alloc::realloc (19 samples, 0.69%)</title><rect x="82.1493%" y="389" width="0.6852%" height="15" fill="rgb(205,208,24)" fg:x="2278" fg:w="19"/><text x="82.3993%" y="399.50"></text></g><g><title>__GI___libc_realloc (19 samples, 0.69%)</title><rect x="82.1493%" y="373" width="0.6852%" height="15" fill="rgb(246,31,12)" fg:x="2278" fg:w="19"/><text x="82.3993%" y="383.50"></text></g><g><title>_int_realloc (18 samples, 0.65%)</title><rect x="82.1854%" y="357" width="0.6491%" height="15" fill="rgb(213,154,6)" fg:x="2279" fg:w="18"/><text x="82.4354%" y="367.50"></text></g><g><title>_int_malloc (10 samples, 0.36%)</title><rect x="82.4739%" y="341" width="0.3606%" height="15" fill="rgb(222,163,29)" fg:x="2287" fg:w="10"/><text x="82.7239%" y="351.50"></text></g><g><title>malloc_consolidate (4 samples, 0.14%)</title><rect x="82.6902%" y="325" width="0.1442%" height="15" fill="rgb(227,201,8)" fg:x="2293" fg:w="4"/><text x="82.9402%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (21 samples, 0.76%)</title><rect x="82.1132%" y="437" width="0.7573%" height="15" fill="rgb(233,9,32)" fg:x="2277" fg:w="21"/><text x="82.3632%" y="447.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="82.8345%" y="421" width="0.0361%" height="15" fill="rgb(217,54,24)" fg:x="2297" fg:w="1"/><text x="83.0845%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (23 samples, 0.83%)</title><rect x="82.0772%" y="501" width="0.8294%" height="15" fill="rgb(235,192,0)" fg:x="2276" fg:w="23"/><text x="82.3272%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 0.83%)</title><rect x="82.0772%" y="485" width="0.8294%" height="15" fill="rgb(235,45,9)" fg:x="2276" fg:w="23"/><text x="82.3272%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 0.79%)</title><rect x="82.1132%" y="469" width="0.7934%" height="15" fill="rgb(246,42,40)" fg:x="2277" fg:w="22"/><text x="82.3632%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (22 samples, 0.79%)</title><rect x="82.1132%" y="453" width="0.7934%" height="15" fill="rgb(248,111,24)" fg:x="2277" fg:w="22"/><text x="82.3632%" y="463.50"></text></g><g><title>core::cmp::max (1 samples, 0.04%)</title><rect x="82.8705%" y="437" width="0.0361%" height="15" fill="rgb(249,65,22)" fg:x="2298" fg:w="1"/><text x="83.1205%" y="447.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.04%)</title><rect x="82.8705%" y="421" width="0.0361%" height="15" fill="rgb(238,111,51)" fg:x="2298" fg:w="1"/><text x="83.1205%" y="431.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.04%)</title><rect x="82.8705%" y="405" width="0.0361%" height="15" fill="rgb(250,118,22)" fg:x="2298" fg:w="1"/><text x="83.1205%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.29%)</title><rect x="82.9066%" y="501" width="0.2885%" height="15" fill="rgb(234,84,26)" fg:x="2299" fg:w="8"/><text x="83.1566%" y="511.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.29%)</title><rect x="82.9066%" y="485" width="0.2885%" height="15" fill="rgb(243,172,12)" fg:x="2299" fg:w="8"/><text x="83.1566%" y="495.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (40 samples, 1.44%)</title><rect x="81.8247%" y="581" width="1.4425%" height="15" fill="rgb(236,150,49)" fg:x="2269" fg:w="40"/><text x="82.0747%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (40 samples, 1.44%)</title><rect x="81.8247%" y="565" width="1.4425%" height="15" fill="rgb(225,197,26)" fg:x="2269" fg:w="40"/><text x="82.0747%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (38 samples, 1.37%)</title><rect x="81.8969%" y="549" width="1.3704%" height="15" fill="rgb(214,17,42)" fg:x="2271" fg:w="38"/><text x="82.1469%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (38 samples, 1.37%)</title><rect x="81.8969%" y="533" width="1.3704%" height="15" fill="rgb(224,165,40)" fg:x="2271" fg:w="38"/><text x="82.1469%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (38 samples, 1.37%)</title><rect x="81.8969%" y="517" width="1.3704%" height="15" fill="rgb(246,100,4)" fg:x="2271" fg:w="38"/><text x="82.1469%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.07%)</title><rect x="83.1951%" y="501" width="0.0721%" height="15" fill="rgb(222,103,0)" fg:x="2307" fg:w="2"/><text x="83.4451%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.14%)</title><rect x="83.2672%" y="581" width="0.1442%" height="15" fill="rgb(227,189,26)" fg:x="2309" fg:w="4"/><text x="83.5172%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.04%)</title><rect x="83.4115%" y="581" width="0.0361%" height="15" fill="rgb(214,202,17)" fg:x="2313" fg:w="1"/><text x="83.6615%" y="591.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="83.8442%" y="277" width="0.0361%" height="15" fill="rgb(229,111,3)" fg:x="2325" fg:w="1"/><text x="84.0942%" y="287.50"></text></g><g><title>get_max_fast (1 samples, 0.04%)</title><rect x="83.8442%" y="261" width="0.0361%" height="15" fill="rgb(229,172,15)" fg:x="2325" fg:w="1"/><text x="84.0942%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.07%)</title><rect x="83.8442%" y="437" width="0.0721%" height="15" fill="rgb(230,224,35)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.07%)</title><rect x="83.8442%" y="421" width="0.0721%" height="15" fill="rgb(251,141,6)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.07%)</title><rect x="83.8442%" y="405" width="0.0721%" height="15" fill="rgb(225,208,6)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.07%)</title><rect x="83.8442%" y="389" width="0.0721%" height="15" fill="rgb(246,181,16)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="83.8442%" y="373" width="0.0721%" height="15" fill="rgb(227,129,36)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.07%)</title><rect x="83.8442%" y="357" width="0.0721%" height="15" fill="rgb(248,117,24)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.07%)</title><rect x="83.8442%" y="341" width="0.0721%" height="15" fill="rgb(214,185,35)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="351.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.07%)</title><rect x="83.8442%" y="325" width="0.0721%" height="15" fill="rgb(236,150,34)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="335.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.07%)</title><rect x="83.8442%" y="309" width="0.0721%" height="15" fill="rgb(243,228,27)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="319.50"></text></g><g><title>_int_realloc (2 samples, 0.07%)</title><rect x="83.8442%" y="293" width="0.0721%" height="15" fill="rgb(245,77,44)" fg:x="2325" fg:w="2"/><text x="84.0942%" y="303.50"></text></g><g><title>_int_malloc (1 samples, 0.04%)</title><rect x="83.8803%" y="277" width="0.0361%" height="15" fill="rgb(235,214,42)" fg:x="2326" fg:w="1"/><text x="84.1303%" y="287.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (61 samples, 2.20%)</title><rect x="81.7887%" y="597" width="2.1998%" height="15" fill="rgb(221,74,3)" fg:x="2268" fg:w="61"/><text x="82.0387%" y="607.50">&lt;..</text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (15 samples, 0.54%)</title><rect x="83.4475%" y="581" width="0.5409%" height="15" fill="rgb(206,121,29)" fg:x="2314" fg:w="15"/><text x="83.6975%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (11 samples, 0.40%)</title><rect x="83.5918%" y="565" width="0.3967%" height="15" fill="rgb(249,131,53)" fg:x="2318" fg:w="11"/><text x="83.8418%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (10 samples, 0.36%)</title><rect x="83.6278%" y="549" width="0.3606%" height="15" fill="rgb(236,170,29)" fg:x="2319" fg:w="10"/><text x="83.8778%" y="559.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (9 samples, 0.32%)</title><rect x="83.6639%" y="533" width="0.3246%" height="15" fill="rgb(247,96,15)" fg:x="2320" fg:w="9"/><text x="83.9139%" y="543.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (8 samples, 0.29%)</title><rect x="83.7000%" y="517" width="0.2885%" height="15" fill="rgb(211,210,7)" fg:x="2321" fg:w="8"/><text x="83.9500%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (6 samples, 0.22%)</title><rect x="83.7721%" y="501" width="0.2164%" height="15" fill="rgb(240,88,50)" fg:x="2323" fg:w="6"/><text x="84.0221%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.14%)</title><rect x="83.8442%" y="485" width="0.1442%" height="15" fill="rgb(209,229,26)" fg:x="2325" fg:w="4"/><text x="84.0942%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.14%)</title><rect x="83.8442%" y="469" width="0.1442%" height="15" fill="rgb(210,68,23)" fg:x="2325" fg:w="4"/><text x="84.0942%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.14%)</title><rect x="83.8442%" y="453" width="0.1442%" height="15" fill="rgb(229,180,13)" fg:x="2325" fg:w="4"/><text x="84.0942%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="83.9163%" y="437" width="0.0721%" height="15" fill="rgb(236,53,44)" fg:x="2327" fg:w="2"/><text x="84.1663%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.04%)</title><rect x="83.9524%" y="421" width="0.0361%" height="15" fill="rgb(244,214,29)" fg:x="2328" fg:w="1"/><text x="84.2024%" y="431.50"></text></g><g><title>mmap_payload_storage::payload::Payload::to_bytes (164 samples, 5.91%)</title><rect x="78.2185%" y="725" width="5.9142%" height="15" fill="rgb(220,75,29)" fg:x="2169" fg:w="164"/><text x="78.4685%" y="735.50">mmap_pay..</text></g><g><title>serde_cbor::ser::to_vec (164 samples, 5.91%)</title><rect x="78.2185%" y="709" width="5.9142%" height="15" fill="rgb(214,183,37)" fg:x="2169" fg:w="164"/><text x="78.4685%" y="719.50">serde_cb..</text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::ser::Serialize for mmap_payload_storage::payload::Payload&gt;::serialize (164 samples, 5.91%)</title><rect x="78.2185%" y="693" width="5.9142%" height="15" fill="rgb(239,117,29)" fg:x="2169" fg:w="164"/><text x="78.4685%" y="703.50">mmap_pay..</text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_newtype_struct (164 samples, 5.91%)</title><rect x="78.2185%" y="677" width="5.9142%" height="15" fill="rgb(237,171,35)" fg:x="2169" fg:w="164"/><text x="78.4685%" y="687.50">&lt;&amp;mut se..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::ser::Serialize&gt;::serialize (164 samples, 5.91%)</title><rect x="78.2185%" y="661" width="5.9142%" height="15" fill="rgb(229,178,53)" fg:x="2169" fg:w="164"/><text x="78.4685%" y="671.50">&lt;serde_j..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (149 samples, 5.37%)</title><rect x="78.7595%" y="645" width="5.3732%" height="15" fill="rgb(210,102,19)" fg:x="2184" fg:w="149"/><text x="79.0095%" y="655.50">serde::..</text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_value (70 samples, 2.52%)</title><rect x="81.6084%" y="629" width="2.5243%" height="15" fill="rgb(235,127,22)" fg:x="2263" fg:w="70"/><text x="81.8584%" y="639.50">&lt;s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (70 samples, 2.52%)</title><rect x="81.6084%" y="613" width="2.5243%" height="15" fill="rgb(244,31,31)" fg:x="2263" fg:w="70"/><text x="81.8584%" y="623.50">se..</text></g><g><title>&lt;alloc::string::String as core::ops::deref::Deref&gt;::deref (4 samples, 0.14%)</title><rect x="83.9885%" y="597" width="0.1442%" height="15" fill="rgb(231,43,21)" fg:x="2329" fg:w="4"/><text x="84.2385%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.14%)</title><rect x="83.9885%" y="581" width="0.1442%" height="15" fill="rgb(217,131,35)" fg:x="2329" fg:w="4"/><text x="84.2385%" y="591.50"></text></g><g><title>_int_free (1 samples, 0.04%)</title><rect x="84.1688%" y="549" width="0.0361%" height="15" fill="rgb(221,149,4)" fg:x="2334" fg:w="1"/><text x="84.4188%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (3 samples, 0.11%)</title><rect x="84.1327%" y="677" width="0.1082%" height="15" fill="rgb(232,170,28)" fg:x="2333" fg:w="3"/><text x="84.3827%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (3 samples, 0.11%)</title><rect x="84.1327%" y="661" width="0.1082%" height="15" fill="rgb(238,56,10)" fg:x="2333" fg:w="3"/><text x="84.3827%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (3 samples, 0.11%)</title><rect x="84.1327%" y="645" width="0.1082%" height="15" fill="rgb(235,196,14)" fg:x="2333" fg:w="3"/><text x="84.3827%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_unchecked (3 samples, 0.11%)</title><rect x="84.1327%" y="629" width="0.1082%" height="15" fill="rgb(216,45,48)" fg:x="2333" fg:w="3"/><text x="84.3827%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (3 samples, 0.11%)</title><rect x="84.1327%" y="613" width="0.1082%" height="15" fill="rgb(238,213,17)" fg:x="2333" fg:w="3"/><text x="84.3827%" y="623.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.11%)</title><rect x="84.1327%" y="597" width="0.1082%" height="15" fill="rgb(212,13,2)" fg:x="2333" fg:w="3"/><text x="84.3827%" y="607.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.07%)</title><rect x="84.1688%" y="581" width="0.0721%" height="15" fill="rgb(240,114,20)" fg:x="2334" fg:w="2"/><text x="84.4188%" y="591.50"></text></g><g><title>_int_realloc (2 samples, 0.07%)</title><rect x="84.1688%" y="565" width="0.0721%" height="15" fill="rgb(228,41,40)" fg:x="2334" fg:w="2"/><text x="84.4188%" y="575.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.04%)</title><rect x="84.2048%" y="549" width="0.0361%" height="15" fill="rgb(244,132,35)" fg:x="2335" fg:w="1"/><text x="84.4548%" y="559.50"></text></g><g><title>free_perturb (1 samples, 0.04%)</title><rect x="84.2048%" y="533" width="0.0361%" height="15" fill="rgb(253,189,4)" fg:x="2335" fg:w="1"/><text x="84.4548%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.11%)</title><rect x="84.2409%" y="677" width="0.1082%" height="15" fill="rgb(224,37,19)" fg:x="2336" fg:w="3"/><text x="84.4909%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="84.2409%" y="661" width="0.1082%" height="15" fill="rgb(235,223,18)" fg:x="2336" fg:w="3"/><text x="84.4909%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.11%)</title><rect x="84.2409%" y="645" width="0.1082%" height="15" fill="rgb(235,163,25)" fg:x="2336" fg:w="3"/><text x="84.4909%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.11%)</title><rect x="84.2409%" y="629" width="0.1082%" height="15" fill="rgb(217,145,28)" fg:x="2336" fg:w="3"/><text x="84.4909%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.11%)</title><rect x="84.2409%" y="613" width="0.1082%" height="15" fill="rgb(223,223,32)" fg:x="2336" fg:w="3"/><text x="84.4909%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.11%)</title><rect x="84.2409%" y="597" width="0.1082%" height="15" fill="rgb(227,189,39)" fg:x="2336" fg:w="3"/><text x="84.4909%" y="607.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.11%)</title><rect x="84.2409%" y="581" width="0.1082%" height="15" fill="rgb(248,10,22)" fg:x="2336" fg:w="3"/><text x="84.4909%" y="591.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.11%)</title><rect x="84.2409%" y="565" width="0.1082%" height="15" fill="rgb(248,46,39)" fg:x="2336" fg:w="3"/><text x="84.4909%" y="575.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="84.2770%" y="549" width="0.0721%" height="15" fill="rgb(248,113,48)" fg:x="2337" fg:w="2"/><text x="84.5270%" y="559.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="84.4212%" y="645" width="0.0721%" height="15" fill="rgb(245,16,25)" fg:x="2341" fg:w="2"/><text x="84.6712%" y="655.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.04%)</title><rect x="84.4933%" y="645" width="0.0361%" height="15" fill="rgb(249,152,16)" fg:x="2343" fg:w="1"/><text x="84.7433%" y="655.50"></text></g><g><title>__GI___libc_free (6 samples, 0.22%)</title><rect x="84.3491%" y="661" width="0.2164%" height="15" fill="rgb(250,16,1)" fg:x="2339" fg:w="6"/><text x="84.5991%" y="671.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.04%)</title><rect x="84.5294%" y="645" width="0.0361%" height="15" fill="rgb(249,138,3)" fg:x="2344" fg:w="1"/><text x="84.7794%" y="655.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::get_at (9 samples, 0.32%)</title><rect x="87.3783%" y="645" width="0.3246%" height="15" fill="rgb(227,71,41)" fg:x="2423" fg:w="9"/><text x="87.6283%" y="655.50"></text></g><g><title>lz4_flex::block::compress::get_batch (7 samples, 0.25%)</title><rect x="87.7028%" y="629" width="0.2524%" height="15" fill="rgb(209,184,23)" fg:x="2432" fg:w="7"/><text x="87.9528%" y="639.50"></text></g><g><title>lz4_flex::block::compress::read_u32_ptr (7 samples, 0.25%)</title><rect x="87.7028%" y="613" width="0.2524%" height="15" fill="rgb(223,215,31)" fg:x="2432" fg:w="7"/><text x="87.9528%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.25%)</title><rect x="87.7028%" y="597" width="0.2524%" height="15" fill="rgb(210,146,28)" fg:x="2432" fg:w="7"/><text x="87.9528%" y="607.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::get_hash_at (17 samples, 0.61%)</title><rect x="87.7028%" y="645" width="0.6131%" height="15" fill="rgb(209,183,41)" fg:x="2432" fg:w="17"/><text x="87.9528%" y="655.50"></text></g><g><title>lz4_flex::block::hashtable::hash (10 samples, 0.36%)</title><rect x="87.9553%" y="629" width="0.3606%" height="15" fill="rgb(209,224,45)" fg:x="2439" fg:w="10"/><text x="88.2053%" y="639.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_mul (10 samples, 0.36%)</title><rect x="87.9553%" y="613" width="0.3606%" height="15" fill="rgb(224,209,51)" fg:x="2439" fg:w="10"/><text x="88.2053%" y="623.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::put_at (21 samples, 0.76%)</title><rect x="88.3159%" y="645" width="0.7573%" height="15" fill="rgb(223,17,39)" fg:x="2449" fg:w="21"/><text x="88.5659%" y="655.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="89.0732%" y="645" width="0.0361%" height="15" fill="rgb(234,204,37)" fg:x="2470" fg:w="1"/><text x="89.3232%" y="655.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="89.0732%" y="629" width="0.0361%" height="15" fill="rgb(236,120,5)" fg:x="2470" fg:w="1"/><text x="89.3232%" y="639.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="89.0732%" y="613" width="0.0361%" height="15" fill="rgb(248,97,27)" fg:x="2470" fg:w="1"/><text x="89.3232%" y="623.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="89.0732%" y="597" width="0.0361%" height="15" fill="rgb(240,66,17)" fg:x="2470" fg:w="1"/><text x="89.3232%" y="607.50"></text></g><g><title>tick_program_event (1 samples, 0.04%)</title><rect x="89.0732%" y="581" width="0.0361%" height="15" fill="rgb(210,79,3)" fg:x="2470" fg:w="1"/><text x="89.3232%" y="591.50"></text></g><g><title>clockevents_program_event (1 samples, 0.04%)</title><rect x="89.0732%" y="565" width="0.0361%" height="15" fill="rgb(214,176,27)" fg:x="2470" fg:w="1"/><text x="89.3232%" y="575.50"></text></g><g><title>native_write_msr (1 samples, 0.04%)</title><rect x="89.0732%" y="549" width="0.0361%" height="15" fill="rgb(235,185,3)" fg:x="2470" fg:w="1"/><text x="89.3232%" y="559.50"></text></g><g><title>lz4_flex::block::compress::backtrack_match (12 samples, 0.43%)</title><rect x="89.1093%" y="645" width="0.4327%" height="15" fill="rgb(227,24,12)" fg:x="2471" fg:w="12"/><text x="89.3593%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (3 samples, 0.11%)</title><rect x="89.4338%" y="629" width="0.1082%" height="15" fill="rgb(252,169,48)" fg:x="2480" fg:w="3"/><text x="89.6838%" y="639.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (3 samples, 0.11%)</title><rect x="89.4338%" y="613" width="0.1082%" height="15" fill="rgb(212,65,1)" fg:x="2480" fg:w="3"/><text x="89.6838%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.22%)</title><rect x="89.5420%" y="629" width="0.2164%" height="15" fill="rgb(242,39,24)" fg:x="2483" fg:w="6"/><text x="89.7920%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="89.6863%" y="613" width="0.0721%" height="15" fill="rgb(249,32,23)" fg:x="2487" fg:w="2"/><text x="89.9363%" y="623.50"></text></g><g><title>lz4_flex::block::compress::copy_literals_wild (7 samples, 0.25%)</title><rect x="89.5420%" y="645" width="0.2524%" height="15" fill="rgb(251,195,23)" fg:x="2483" fg:w="7"/><text x="89.7920%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.04%)</title><rect x="89.7584%" y="629" width="0.0361%" height="15" fill="rgb(236,174,8)" fg:x="2489" fg:w="1"/><text x="90.0084%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::trailing_zeros (4 samples, 0.14%)</title><rect x="90.0469%" y="629" width="0.1442%" height="15" fill="rgb(220,197,8)" fg:x="2497" fg:w="4"/><text x="90.2969%" y="639.50"></text></g><g><title>lz4_flex::block::compress::count_same_bytes (12 samples, 0.43%)</title><rect x="89.7944%" y="645" width="0.4327%" height="15" fill="rgb(240,108,37)" fg:x="2490" fg:w="12"/><text x="90.0444%" y="655.50"></text></g><g><title>lz4_flex::block::compress::read_usize_ptr (1 samples, 0.04%)</title><rect x="90.1911%" y="629" width="0.0361%" height="15" fill="rgb(232,176,24)" fg:x="2501" fg:w="1"/><text x="90.4411%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="90.1911%" y="613" width="0.0361%" height="15" fill="rgb(243,35,29)" fg:x="2501" fg:w="1"/><text x="90.4411%" y="623.50"></text></g><g><title>lz4_flex::block::compress::get_maximum_output_size (1 samples, 0.04%)</title><rect x="90.2272%" y="645" width="0.0361%" height="15" fill="rgb(210,37,18)" fg:x="2502" fg:w="1"/><text x="90.4772%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.04%)</title><rect x="90.2633%" y="629" width="0.0361%" height="15" fill="rgb(224,184,40)" fg:x="2503" fg:w="1"/><text x="90.5133%" y="639.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.04%)</title><rect x="90.2633%" y="613" width="0.0361%" height="15" fill="rgb(236,39,29)" fg:x="2503" fg:w="1"/><text x="90.5133%" y="623.50"></text></g><g><title>lz4_flex::block::compress::handle_last_literals (2 samples, 0.07%)</title><rect x="90.2633%" y="645" width="0.0721%" height="15" fill="rgb(232,48,39)" fg:x="2503" fg:w="2"/><text x="90.5133%" y="655.50"></text></g><g><title>lz4_flex::block::compress::push_byte (1 samples, 0.04%)</title><rect x="90.2993%" y="629" width="0.0361%" height="15" fill="rgb(236,34,42)" fg:x="2504" fg:w="1"/><text x="90.5493%" y="639.50"></text></g><g><title>core::ptr::write (1 samples, 0.04%)</title><rect x="90.2993%" y="613" width="0.0361%" height="15" fill="rgb(243,106,37)" fg:x="2504" fg:w="1"/><text x="90.5493%" y="623.50"></text></g><g><title>lz4_flex::block::compress::push_byte (1 samples, 0.04%)</title><rect x="90.3354%" y="645" width="0.0361%" height="15" fill="rgb(218,96,6)" fg:x="2505" fg:w="1"/><text x="90.5854%" y="655.50"></text></g><g><title>lz4_flex::block::compress::push_u16 (5 samples, 0.18%)</title><rect x="90.3714%" y="645" width="0.1803%" height="15" fill="rgb(235,130,12)" fg:x="2506" fg:w="5"/><text x="90.6214%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="90.4436%" y="629" width="0.1082%" height="15" fill="rgb(231,95,0)" fg:x="2508" fg:w="3"/><text x="90.6936%" y="639.50"></text></g><g><title>lz4_flex::block::compress::token_from_literal_and_match_length (5 samples, 0.18%)</title><rect x="90.5517%" y="645" width="0.1803%" height="15" fill="rgb(228,12,23)" fg:x="2511" fg:w="5"/><text x="90.8017%" y="655.50"></text></g><g><title>lz4_flex::block::compress::compress_internal (173 samples, 6.24%)</title><rect x="84.5655%" y="661" width="6.2387%" height="15" fill="rgb(216,12,1)" fg:x="2345" fg:w="173"/><text x="84.8155%" y="671.50">lz4_flex..</text></g><g><title>lz4_flex::block::compress::write_integer (2 samples, 0.07%)</title><rect x="90.7321%" y="645" width="0.0721%" height="15" fill="rgb(219,59,3)" fg:x="2516" fg:w="2"/><text x="90.9821%" y="655.50"></text></g><g><title>__libc_calloc (4 samples, 0.14%)</title><rect x="90.8042%" y="533" width="0.1442%" height="15" fill="rgb(215,208,46)" fg:x="2518" fg:w="4"/><text x="91.0542%" y="543.50"></text></g><g><title>_int_malloc (3 samples, 0.11%)</title><rect x="90.8402%" y="517" width="0.1082%" height="15" fill="rgb(254,224,29)" fg:x="2519" fg:w="3"/><text x="91.0902%" y="527.50"></text></g><g><title>__memset_avx2_unaligned_erms (21 samples, 0.76%)</title><rect x="90.9484%" y="533" width="0.7573%" height="15" fill="rgb(232,14,29)" fg:x="2522" fg:w="21"/><text x="91.1984%" y="543.50"></text></g><g><title>lz4_flex::block::compress::compress_into_sink_with_dict (205 samples, 7.39%)</title><rect x="84.3491%" y="677" width="7.3927%" height="15" fill="rgb(208,45,52)" fg:x="2339" fg:w="205"/><text x="84.5991%" y="687.50">lz4_flex::..</text></g><g><title>lz4_flex::block::hashtable::HashTable4KU16::new (26 samples, 0.94%)</title><rect x="90.8042%" y="661" width="0.9376%" height="15" fill="rgb(234,191,28)" fg:x="2518" fg:w="26"/><text x="91.0542%" y="671.50"></text></g><g><title>alloc::vec::from_elem (26 samples, 0.94%)</title><rect x="90.8042%" y="645" width="0.9376%" height="15" fill="rgb(244,67,43)" fg:x="2518" fg:w="26"/><text x="91.0542%" y="655.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (26 samples, 0.94%)</title><rect x="90.8042%" y="629" width="0.9376%" height="15" fill="rgb(236,189,24)" fg:x="2518" fg:w="26"/><text x="91.0542%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (26 samples, 0.94%)</title><rect x="90.8042%" y="613" width="0.9376%" height="15" fill="rgb(239,214,33)" fg:x="2518" fg:w="26"/><text x="91.0542%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (26 samples, 0.94%)</title><rect x="90.8042%" y="597" width="0.9376%" height="15" fill="rgb(226,176,41)" fg:x="2518" fg:w="26"/><text x="91.0542%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (26 samples, 0.94%)</title><rect x="90.8042%" y="581" width="0.9376%" height="15" fill="rgb(248,47,8)" fg:x="2518" fg:w="26"/><text x="91.0542%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (26 samples, 0.94%)</title><rect x="90.8042%" y="565" width="0.9376%" height="15" fill="rgb(218,81,44)" fg:x="2518" fg:w="26"/><text x="91.0542%" y="575.50"></text></g><g><title>alloc::alloc::alloc_zeroed (26 samples, 0.94%)</title><rect x="90.8042%" y="549" width="0.9376%" height="15" fill="rgb(213,98,6)" fg:x="2518" fg:w="26"/><text x="91.0542%" y="559.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.04%)</title><rect x="91.7057%" y="533" width="0.0361%" height="15" fill="rgb(222,85,22)" fg:x="2543" fg:w="1"/><text x="91.9557%" y="543.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::compress (213 samples, 7.68%)</title><rect x="84.1327%" y="725" width="7.6812%" height="15" fill="rgb(239,46,39)" fg:x="2333" fg:w="213"/><text x="84.3827%" y="735.50">mmap_payloa..</text></g><g><title>lz4_flex::block::compress::compress_prepend_size (213 samples, 7.68%)</title><rect x="84.1327%" y="709" width="7.6812%" height="15" fill="rgb(237,12,29)" fg:x="2333" fg:w="213"/><text x="84.3827%" y="719.50">lz4_flex::b..</text></g><g><title>lz4_flex::block::compress::compress_into_vec_with_dict (213 samples, 7.68%)</title><rect x="84.1327%" y="693" width="7.6812%" height="15" fill="rgb(214,77,8)" fg:x="2333" fg:w="213"/><text x="84.3827%" y="703.50">lz4_flex::b..</text></g><g><title>lz4_flex::block::compress::get_maximum_output_size (2 samples, 0.07%)</title><rect x="91.7418%" y="677" width="0.0721%" height="15" fill="rgb(217,168,37)" fg:x="2544" fg:w="2"/><text x="91.9918%" y="687.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_pointer (1 samples, 0.04%)</title><rect x="91.8139%" y="725" width="0.0361%" height="15" fill="rgb(221,217,23)" fg:x="2546" fg:w="1"/><text x="92.0639%" y="735.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::get (1 samples, 0.04%)</title><rect x="91.8139%" y="709" width="0.0361%" height="15" fill="rgb(243,229,36)" fg:x="2546" fg:w="1"/><text x="92.0639%" y="719.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::get_raw (1 samples, 0.04%)</title><rect x="91.8139%" y="693" width="0.0361%" height="15" fill="rgb(251,163,40)" fg:x="2546" fg:w="1"/><text x="92.0639%" y="703.50"></text></g><g><title>__count_memcg_events (1 samples, 0.04%)</title><rect x="91.9221%" y="597" width="0.0361%" height="15" fill="rgb(237,222,12)" fg:x="2549" fg:w="1"/><text x="92.1721%" y="607.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.04%)</title><rect x="91.9942%" y="437" width="0.0361%" height="15" fill="rgb(248,132,6)" fg:x="2551" fg:w="1"/><text x="92.2442%" y="447.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.04%)</title><rect x="91.9942%" y="421" width="0.0361%" height="15" fill="rgb(227,167,50)" fg:x="2551" fg:w="1"/><text x="92.2442%" y="431.50"></text></g><g><title>__filemap_add_folio (2 samples, 0.07%)</title><rect x="91.9942%" y="453" width="0.0721%" height="15" fill="rgb(242,84,37)" fg:x="2551" fg:w="2"/><text x="92.2442%" y="463.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.04%)</title><rect x="92.0303%" y="437" width="0.0361%" height="15" fill="rgb(212,4,50)" fg:x="2552" fg:w="1"/><text x="92.2803%" y="447.50"></text></g><g><title>lru_add_fn (2 samples, 0.07%)</title><rect x="92.1024%" y="421" width="0.0721%" height="15" fill="rgb(230,228,32)" fg:x="2554" fg:w="2"/><text x="92.3524%" y="431.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.04%)</title><rect x="92.1385%" y="405" width="0.0361%" height="15" fill="rgb(248,217,23)" fg:x="2555" fg:w="1"/><text x="92.3885%" y="415.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.04%)</title><rect x="92.1385%" y="389" width="0.0361%" height="15" fill="rgb(238,197,32)" fg:x="2555" fg:w="1"/><text x="92.3885%" y="399.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.04%)</title><rect x="92.1385%" y="373" width="0.0361%" height="15" fill="rgb(236,106,1)" fg:x="2555" fg:w="1"/><text x="92.3885%" y="383.50"></text></g><g><title>filemap_add_folio (6 samples, 0.22%)</title><rect x="91.9942%" y="469" width="0.2164%" height="15" fill="rgb(219,228,13)" fg:x="2551" fg:w="6"/><text x="92.2442%" y="479.50"></text></g><g><title>folio_add_lru (4 samples, 0.14%)</title><rect x="92.0664%" y="453" width="0.1442%" height="15" fill="rgb(238,30,35)" fg:x="2553" fg:w="4"/><text x="92.3164%" y="463.50"></text></g><g><title>folio_batch_move_lru (3 samples, 0.11%)</title><rect x="92.1024%" y="437" width="0.1082%" height="15" fill="rgb(236,70,23)" fg:x="2554" fg:w="3"/><text x="92.3524%" y="447.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.04%)</title><rect x="92.1745%" y="421" width="0.0361%" height="15" fill="rgb(249,104,48)" fg:x="2556" fg:w="1"/><text x="92.4245%" y="431.50"></text></g><g><title>filemap_alloc_folio (1 samples, 0.04%)</title><rect x="92.2106%" y="469" width="0.0361%" height="15" fill="rgb(254,117,50)" fg:x="2557" fg:w="1"/><text x="92.4606%" y="479.50"></text></g><g><title>folio_alloc (1 samples, 0.04%)</title><rect x="92.2106%" y="453" width="0.0361%" height="15" fill="rgb(223,152,4)" fg:x="2557" fg:w="1"/><text x="92.4606%" y="463.50"></text></g><g><title>alloc_pages_mpol (1 samples, 0.04%)</title><rect x="92.2106%" y="437" width="0.0361%" height="15" fill="rgb(245,6,2)" fg:x="2557" fg:w="1"/><text x="92.4606%" y="447.50"></text></g><g><title>__alloc_pages (1 samples, 0.04%)</title><rect x="92.2106%" y="421" width="0.0361%" height="15" fill="rgb(249,150,24)" fg:x="2557" fg:w="1"/><text x="92.4606%" y="431.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.04%)</title><rect x="92.2106%" y="405" width="0.0361%" height="15" fill="rgb(228,185,42)" fg:x="2557" fg:w="1"/><text x="92.4606%" y="415.50"></text></g><g><title>clear_page_erms (1 samples, 0.04%)</title><rect x="92.2106%" y="389" width="0.0361%" height="15" fill="rgb(226,39,33)" fg:x="2557" fg:w="1"/><text x="92.4606%" y="399.50"></text></g><g><title>memset_orig (4 samples, 0.14%)</title><rect x="92.2467%" y="421" width="0.1442%" height="15" fill="rgb(221,166,19)" fg:x="2558" fg:w="4"/><text x="92.4967%" y="431.50"></text></g><g><title>read_pages (5 samples, 0.18%)</title><rect x="92.2467%" y="469" width="0.1803%" height="15" fill="rgb(209,109,2)" fg:x="2558" fg:w="5"/><text x="92.4967%" y="479.50"></text></g><g><title>ext4_readahead (5 samples, 0.18%)</title><rect x="92.2467%" y="453" width="0.1803%" height="15" fill="rgb(252,216,26)" fg:x="2558" fg:w="5"/><text x="92.4967%" y="463.50"></text></g><g><title>ext4_mpage_readpages (5 samples, 0.18%)</title><rect x="92.2467%" y="437" width="0.1803%" height="15" fill="rgb(227,173,36)" fg:x="2558" fg:w="5"/><text x="92.4967%" y="447.50"></text></g><g><title>xa_load (1 samples, 0.04%)</title><rect x="92.3909%" y="421" width="0.0361%" height="15" fill="rgb(209,90,7)" fg:x="2562" fg:w="1"/><text x="92.6409%" y="431.50"></text></g><g><title>xas_start (1 samples, 0.04%)</title><rect x="92.3909%" y="405" width="0.0361%" height="15" fill="rgb(250,194,11)" fg:x="2562" fg:w="1"/><text x="92.6409%" y="415.50"></text></g><g><title>__do_fault (14 samples, 0.50%)</title><rect x="91.9582%" y="549" width="0.5049%" height="15" fill="rgb(220,72,50)" fg:x="2550" fg:w="14"/><text x="92.2082%" y="559.50"></text></g><g><title>filemap_fault (14 samples, 0.50%)</title><rect x="91.9582%" y="533" width="0.5049%" height="15" fill="rgb(222,106,48)" fg:x="2550" fg:w="14"/><text x="92.2082%" y="543.50"></text></g><g><title>do_sync_mmap_readahead (13 samples, 0.47%)</title><rect x="91.9942%" y="517" width="0.4688%" height="15" fill="rgb(216,220,45)" fg:x="2551" fg:w="13"/><text x="92.2442%" y="527.50"></text></g><g><title>page_cache_ra_order (13 samples, 0.47%)</title><rect x="91.9942%" y="501" width="0.4688%" height="15" fill="rgb(234,112,18)" fg:x="2551" fg:w="13"/><text x="92.2442%" y="511.50"></text></g><g><title>page_cache_ra_unbounded (13 samples, 0.47%)</title><rect x="91.9942%" y="485" width="0.4688%" height="15" fill="rgb(206,179,9)" fg:x="2551" fg:w="13"/><text x="92.2442%" y="495.50"></text></g><g><title>xa_load (1 samples, 0.04%)</title><rect x="92.4270%" y="469" width="0.0361%" height="15" fill="rgb(215,115,40)" fg:x="2563" fg:w="1"/><text x="92.6770%" y="479.50"></text></g><g><title>xas_descend (1 samples, 0.04%)</title><rect x="92.4270%" y="453" width="0.0361%" height="15" fill="rgb(222,69,34)" fg:x="2563" fg:w="1"/><text x="92.6770%" y="463.50"></text></g><g><title>block_page_mkwrite (1 samples, 0.04%)</title><rect x="92.4630%" y="533" width="0.0361%" height="15" fill="rgb(209,161,10)" fg:x="2564" fg:w="1"/><text x="92.7130%" y="543.50"></text></g><g><title>__folio_mark_dirty (1 samples, 0.04%)</title><rect x="92.4991%" y="485" width="0.0361%" height="15" fill="rgb(217,6,38)" fg:x="2565" fg:w="1"/><text x="92.7491%" y="495.50"></text></g><g><title>_raw_read_unlock (1 samples, 0.04%)</title><rect x="92.5352%" y="453" width="0.0361%" height="15" fill="rgb(229,229,48)" fg:x="2566" fg:w="1"/><text x="92.7852%" y="463.50"></text></g><g><title>_raw_write_lock (1 samples, 0.04%)</title><rect x="92.5712%" y="453" width="0.0361%" height="15" fill="rgb(225,21,28)" fg:x="2567" fg:w="1"/><text x="92.8212%" y="463.50"></text></g><g><title>ext4_da_get_block_prep (3 samples, 0.11%)</title><rect x="92.5352%" y="485" width="0.1082%" height="15" fill="rgb(206,33,13)" fg:x="2566" fg:w="3"/><text x="92.7852%" y="495.50"></text></g><g><title>ext4_da_map_blocks.constprop.0 (3 samples, 0.11%)</title><rect x="92.5352%" y="469" width="0.1082%" height="15" fill="rgb(242,178,17)" fg:x="2566" fg:w="3"/><text x="92.7852%" y="479.50"></text></g><g><title>ext4_es_lookup_extent (1 samples, 0.04%)</title><rect x="92.6073%" y="453" width="0.0361%" height="15" fill="rgb(220,162,5)" fg:x="2568" fg:w="1"/><text x="92.8573%" y="463.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.04%)</title><rect x="92.6073%" y="437" width="0.0361%" height="15" fill="rgb(210,33,43)" fg:x="2568" fg:w="1"/><text x="92.8573%" y="447.50"></text></g><g><title>folio_create_buffers (2 samples, 0.07%)</title><rect x="92.6433%" y="485" width="0.0721%" height="15" fill="rgb(216,116,54)" fg:x="2569" fg:w="2"/><text x="92.8933%" y="495.50"></text></g><g><title>create_empty_buffers (2 samples, 0.07%)</title><rect x="92.6433%" y="469" width="0.0721%" height="15" fill="rgb(249,92,24)" fg:x="2569" fg:w="2"/><text x="92.8933%" y="479.50"></text></g><g><title>folio_alloc_buffers (1 samples, 0.04%)</title><rect x="92.6794%" y="453" width="0.0361%" height="15" fill="rgb(231,189,14)" fg:x="2570" fg:w="1"/><text x="92.9294%" y="463.50"></text></g><g><title>alloc_buffer_head (1 samples, 0.04%)</title><rect x="92.6794%" y="437" width="0.0361%" height="15" fill="rgb(230,8,41)" fg:x="2570" fg:w="1"/><text x="92.9294%" y="447.50"></text></g><g><title>memset_orig (1 samples, 0.04%)</title><rect x="92.6794%" y="421" width="0.0361%" height="15" fill="rgb(249,7,27)" fg:x="2570" fg:w="1"/><text x="92.9294%" y="431.50"></text></g><g><title>__xa_set_mark (1 samples, 0.04%)</title><rect x="92.7155%" y="453" width="0.0361%" height="15" fill="rgb(232,86,5)" fg:x="2571" fg:w="1"/><text x="92.9655%" y="463.50"></text></g><g><title>xas_descend (1 samples, 0.04%)</title><rect x="92.7155%" y="437" width="0.0361%" height="15" fill="rgb(224,175,18)" fg:x="2571" fg:w="1"/><text x="92.9655%" y="447.50"></text></g><g><title>__block_write_begin_int (9 samples, 0.32%)</title><rect x="92.4991%" y="501" width="0.3246%" height="15" fill="rgb(220,129,12)" fg:x="2565" fg:w="9"/><text x="92.7491%" y="511.50"></text></g><g><title>mark_buffer_dirty (3 samples, 0.11%)</title><rect x="92.7155%" y="485" width="0.1082%" height="15" fill="rgb(210,19,36)" fg:x="2571" fg:w="3"/><text x="92.9655%" y="495.50"></text></g><g><title>__folio_mark_dirty (3 samples, 0.11%)</title><rect x="92.7155%" y="469" width="0.1082%" height="15" fill="rgb(219,96,14)" fg:x="2571" fg:w="3"/><text x="92.9655%" y="479.50"></text></g><g><title>folio_account_dirtied (2 samples, 0.07%)</title><rect x="92.7515%" y="453" width="0.0721%" height="15" fill="rgb(249,106,1)" fg:x="2572" fg:w="2"/><text x="93.0015%" y="463.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.04%)</title><rect x="92.7876%" y="437" width="0.0361%" height="15" fill="rgb(249,155,20)" fg:x="2573" fg:w="1"/><text x="93.0376%" y="447.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.04%)</title><rect x="92.7876%" y="421" width="0.0361%" height="15" fill="rgb(244,168,9)" fg:x="2573" fg:w="1"/><text x="93.0376%" y="431.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.04%)</title><rect x="92.7876%" y="405" width="0.0361%" height="15" fill="rgb(216,23,50)" fg:x="2573" fg:w="1"/><text x="93.0376%" y="415.50"></text></g><g><title>folio_mapping (1 samples, 0.04%)</title><rect x="92.8237%" y="501" width="0.0361%" height="15" fill="rgb(224,219,20)" fg:x="2574" fg:w="1"/><text x="93.0737%" y="511.50"></text></g><g><title>block_dirty_folio (1 samples, 0.04%)</title><rect x="92.8597%" y="485" width="0.0361%" height="15" fill="rgb(222,156,15)" fg:x="2575" fg:w="1"/><text x="93.1097%" y="495.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="92.8958%" y="469" width="0.0361%" height="15" fill="rgb(231,97,17)" fg:x="2576" fg:w="1"/><text x="93.1458%" y="479.50"></text></g><g><title>block_page_mkwrite (14 samples, 0.50%)</title><rect x="92.4991%" y="517" width="0.5049%" height="15" fill="rgb(218,70,48)" fg:x="2565" fg:w="14"/><text x="92.7491%" y="527.50"></text></g><g><title>folio_mark_dirty (4 samples, 0.14%)</title><rect x="92.8597%" y="501" width="0.1442%" height="15" fill="rgb(212,196,52)" fg:x="2575" fg:w="4"/><text x="93.1097%" y="511.50"></text></g><g><title>ext4_dirty_folio (3 samples, 0.11%)</title><rect x="92.8958%" y="485" width="0.1082%" height="15" fill="rgb(243,203,18)" fg:x="2576" fg:w="3"/><text x="93.1458%" y="495.50"></text></g><g><title>block_dirty_folio (2 samples, 0.07%)</title><rect x="92.9318%" y="469" width="0.0721%" height="15" fill="rgb(252,125,41)" fg:x="2577" fg:w="2"/><text x="93.1818%" y="479.50"></text></g><g><title>__ext4_journal_start_sb (1 samples, 0.04%)</title><rect x="93.0040%" y="453" width="0.0361%" height="15" fill="rgb(223,180,33)" fg:x="2579" fg:w="1"/><text x="93.2540%" y="463.50"></text></g><g><title>jbd2__journal_start (1 samples, 0.04%)</title><rect x="93.0040%" y="437" width="0.0361%" height="15" fill="rgb(254,159,46)" fg:x="2579" fg:w="1"/><text x="93.2540%" y="447.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.04%)</title><rect x="93.0040%" y="421" width="0.0361%" height="15" fill="rgb(254,38,10)" fg:x="2579" fg:w="1"/><text x="93.2540%" y="431.50"></text></g><g><title>do_page_mkwrite (17 samples, 0.61%)</title><rect x="92.4630%" y="549" width="0.6131%" height="15" fill="rgb(208,217,32)" fg:x="2564" fg:w="17"/><text x="92.7130%" y="559.50"></text></g><g><title>ext4_page_mkwrite (16 samples, 0.58%)</title><rect x="92.4991%" y="533" width="0.5770%" height="15" fill="rgb(221,120,13)" fg:x="2565" fg:w="16"/><text x="92.7491%" y="543.50"></text></g><g><title>file_update_time (2 samples, 0.07%)</title><rect x="93.0040%" y="517" width="0.0721%" height="15" fill="rgb(246,54,52)" fg:x="2579" fg:w="2"/><text x="93.2540%" y="527.50"></text></g><g><title>generic_update_time (2 samples, 0.07%)</title><rect x="93.0040%" y="501" width="0.0721%" height="15" fill="rgb(242,34,25)" fg:x="2579" fg:w="2"/><text x="93.2540%" y="511.50"></text></g><g><title>__mark_inode_dirty (2 samples, 0.07%)</title><rect x="93.0040%" y="485" width="0.0721%" height="15" fill="rgb(247,209,9)" fg:x="2579" fg:w="2"/><text x="93.2540%" y="495.50"></text></g><g><title>ext4_dirty_inode (2 samples, 0.07%)</title><rect x="93.0040%" y="469" width="0.0721%" height="15" fill="rgb(228,71,26)" fg:x="2579" fg:w="2"/><text x="93.2540%" y="479.50"></text></g><g><title>__ext4_mark_inode_dirty (1 samples, 0.04%)</title><rect x="93.0400%" y="453" width="0.0361%" height="15" fill="rgb(222,145,49)" fg:x="2580" fg:w="1"/><text x="93.2900%" y="463.50"></text></g><g><title>ext4_reserve_inode_write (1 samples, 0.04%)</title><rect x="93.0400%" y="437" width="0.0361%" height="15" fill="rgb(218,121,17)" fg:x="2580" fg:w="1"/><text x="93.2900%" y="447.50"></text></g><g><title>ext4_get_inode_loc (1 samples, 0.04%)</title><rect x="93.0400%" y="421" width="0.0361%" height="15" fill="rgb(244,50,7)" fg:x="2580" fg:w="1"/><text x="93.2900%" y="431.50"></text></g><g><title>balance_dirty_pages_ratelimited (1 samples, 0.04%)</title><rect x="93.1122%" y="533" width="0.0361%" height="15" fill="rgb(246,229,37)" fg:x="2582" fg:w="1"/><text x="93.3622%" y="543.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (1 samples, 0.04%)</title><rect x="93.1122%" y="517" width="0.0361%" height="15" fill="rgb(225,18,5)" fg:x="2582" fg:w="1"/><text x="93.3622%" y="527.50"></text></g><g><title>fault_dirty_shared_page (3 samples, 0.11%)</title><rect x="93.0761%" y="549" width="0.1082%" height="15" fill="rgb(213,204,8)" fg:x="2581" fg:w="3"/><text x="93.3261%" y="559.50"></text></g><g><title>folio_mark_dirty (1 samples, 0.04%)</title><rect x="93.1482%" y="533" width="0.0361%" height="15" fill="rgb(238,103,6)" fg:x="2583" fg:w="1"/><text x="93.3982%" y="543.50"></text></g><g><title>block_dirty_folio (1 samples, 0.04%)</title><rect x="93.1482%" y="517" width="0.0361%" height="15" fill="rgb(222,25,35)" fg:x="2583" fg:w="1"/><text x="93.3982%" y="527.50"></text></g><g><title>__handle_mm_fault (35 samples, 1.26%)</title><rect x="91.9582%" y="597" width="1.2622%" height="15" fill="rgb(213,203,35)" fg:x="2550" fg:w="35"/><text x="92.2082%" y="607.50"></text></g><g><title>handle_pte_fault (35 samples, 1.26%)</title><rect x="91.9582%" y="581" width="1.2622%" height="15" fill="rgb(221,79,53)" fg:x="2550" fg:w="35"/><text x="92.2082%" y="591.50"></text></g><g><title>do_fault (35 samples, 1.26%)</title><rect x="91.9582%" y="565" width="1.2622%" height="15" fill="rgb(243,200,35)" fg:x="2550" fg:w="35"/><text x="92.2082%" y="575.50"></text></g><g><title>finish_fault (1 samples, 0.04%)</title><rect x="93.1843%" y="549" width="0.0361%" height="15" fill="rgb(248,60,25)" fg:x="2584" fg:w="1"/><text x="93.4343%" y="559.50"></text></g><g><title>set_pte_range (1 samples, 0.04%)</title><rect x="93.1843%" y="533" width="0.0361%" height="15" fill="rgb(227,53,46)" fg:x="2584" fg:w="1"/><text x="93.4343%" y="543.50"></text></g><g><title>folio_add_file_rmap_ptes (1 samples, 0.04%)</title><rect x="93.1843%" y="517" width="0.0361%" height="15" fill="rgb(216,120,32)" fg:x="2584" fg:w="1"/><text x="93.4343%" y="527.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (39 samples, 1.41%)</title><rect x="91.8500%" y="709" width="1.4064%" height="15" fill="rgb(220,134,1)" fg:x="2547" fg:w="39"/><text x="92.1000%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (39 samples, 1.41%)</title><rect x="91.8500%" y="693" width="1.4064%" height="15" fill="rgb(237,168,5)" fg:x="2547" fg:w="39"/><text x="92.1000%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (39 samples, 1.41%)</title><rect x="91.8500%" y="677" width="1.4064%" height="15" fill="rgb(231,100,33)" fg:x="2547" fg:w="39"/><text x="92.1000%" y="687.50"></text></g><g><title>asm_exc_page_fault (37 samples, 1.33%)</title><rect x="91.9221%" y="661" width="1.3343%" height="15" fill="rgb(236,177,47)" fg:x="2549" fg:w="37"/><text x="92.1721%" y="671.50"></text></g><g><title>exc_page_fault (37 samples, 1.33%)</title><rect x="91.9221%" y="645" width="1.3343%" height="15" fill="rgb(235,7,49)" fg:x="2549" fg:w="37"/><text x="92.1721%" y="655.50"></text></g><g><title>do_user_addr_fault (37 samples, 1.33%)</title><rect x="91.9221%" y="629" width="1.3343%" height="15" fill="rgb(232,119,22)" fg:x="2549" fg:w="37"/><text x="92.1721%" y="639.50"></text></g><g><title>handle_mm_fault (37 samples, 1.33%)</title><rect x="91.9221%" y="613" width="1.3343%" height="15" fill="rgb(254,73,53)" fg:x="2549" fg:w="37"/><text x="92.1721%" y="623.50"></text></g><g><title>count_memcg_events.constprop.0 (1 samples, 0.04%)</title><rect x="93.2203%" y="597" width="0.0361%" height="15" fill="rgb(251,35,20)" fg:x="2585" fg:w="1"/><text x="93.4703%" y="607.50"></text></g><g><title>__count_memcg_events (1 samples, 0.04%)</title><rect x="93.2203%" y="581" width="0.0361%" height="15" fill="rgb(241,119,20)" fg:x="2585" fg:w="1"/><text x="93.4703%" y="591.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::write_page_header (3 samples, 0.11%)</title><rect x="93.2564%" y="709" width="0.1082%" height="15" fill="rgb(207,102,14)" fg:x="2586" fg:w="3"/><text x="93.5064%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.11%)</title><rect x="93.2564%" y="693" width="0.1082%" height="15" fill="rgb(248,201,50)" fg:x="2586" fg:w="3"/><text x="93.5064%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.11%)</title><rect x="93.2564%" y="677" width="0.1082%" height="15" fill="rgb(222,185,44)" fg:x="2586" fg:w="3"/><text x="93.5064%" y="687.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::insert_value (44 samples, 1.59%)</title><rect x="91.8500%" y="725" width="1.5867%" height="15" fill="rgb(218,107,18)" fg:x="2547" fg:w="44"/><text x="92.1000%" y="735.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::write_slot (2 samples, 0.07%)</title><rect x="93.3646%" y="709" width="0.0721%" height="15" fill="rgb(237,177,39)" fg:x="2589" fg:w="2"/><text x="93.6146%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.07%)</title><rect x="93.3646%" y="693" width="0.0721%" height="15" fill="rgb(246,69,6)" fg:x="2589" fg:w="2"/><text x="93.6146%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="93.3646%" y="677" width="0.0721%" height="15" fill="rgb(234,208,37)" fg:x="2589" fg:w="2"/><text x="93.6146%" y="687.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="93.4006%" y="661" width="0.0361%" height="15" fill="rgb(225,4,6)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="671.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="93.4006%" y="645" width="0.0361%" height="15" fill="rgb(233,45,0)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="655.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="93.4006%" y="629" width="0.0361%" height="15" fill="rgb(226,136,5)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="639.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="93.4006%" y="613" width="0.0361%" height="15" fill="rgb(211,91,47)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="623.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.04%)</title><rect x="93.4006%" y="597" width="0.0361%" height="15" fill="rgb(242,88,51)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="607.50"></text></g><g><title>handle_pte_fault (1 samples, 0.04%)</title><rect x="93.4006%" y="581" width="0.0361%" height="15" fill="rgb(230,91,28)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="591.50"></text></g><g><title>do_fault (1 samples, 0.04%)</title><rect x="93.4006%" y="565" width="0.0361%" height="15" fill="rgb(254,186,29)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="575.50"></text></g><g><title>do_page_mkwrite (1 samples, 0.04%)</title><rect x="93.4006%" y="549" width="0.0361%" height="15" fill="rgb(238,6,4)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="559.50"></text></g><g><title>ext4_page_mkwrite (1 samples, 0.04%)</title><rect x="93.4006%" y="533" width="0.0361%" height="15" fill="rgb(221,151,16)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="543.50"></text></g><g><title>block_page_mkwrite (1 samples, 0.04%)</title><rect x="93.4006%" y="517" width="0.0361%" height="15" fill="rgb(251,143,52)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="527.50"></text></g><g><title>__block_commit_write (1 samples, 0.04%)</title><rect x="93.4006%" y="501" width="0.0361%" height="15" fill="rgb(206,90,15)" fg:x="2590" fg:w="1"/><text x="93.6506%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.07%)</title><rect x="93.4367%" y="677" width="0.0721%" height="15" fill="rgb(218,35,8)" fg:x="2591" fg:w="2"/><text x="93.6867%" y="687.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.07%)</title><rect x="93.4367%" y="661" width="0.0721%" height="15" fill="rgb(239,215,6)" fg:x="2591" fg:w="2"/><text x="93.6867%" y="671.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="93.4367%" y="645" width="0.0721%" height="15" fill="rgb(245,116,39)" fg:x="2591" fg:w="2"/><text x="93.6867%" y="655.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="93.4367%" y="629" width="0.0721%" height="15" fill="rgb(242,65,28)" fg:x="2591" fg:w="2"/><text x="93.6867%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.07%)</title><rect x="93.4367%" y="613" width="0.0721%" height="15" fill="rgb(252,132,53)" fg:x="2591" fg:w="2"/><text x="93.6867%" y="623.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.07%)</title><rect x="93.4367%" y="597" width="0.0721%" height="15" fill="rgb(224,159,50)" fg:x="2591" fg:w="2"/><text x="93.6867%" y="607.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.07%)</title><rect x="93.4367%" y="581" width="0.0721%" height="15" fill="rgb(224,93,4)" fg:x="2591" fg:w="2"/><text x="93.6867%" y="591.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::put_payload (434 samples, 15.65%)</title><rect x="77.9300%" y="741" width="15.6509%" height="15" fill="rgb(208,81,34)" fg:x="2161" fg:w="434"/><text x="78.1800%" y="751.50">mmap_payload_storage::pa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (4 samples, 0.14%)</title><rect x="93.4367%" y="725" width="0.1442%" height="15" fill="rgb(233,92,54)" fg:x="2591" fg:w="4"/><text x="93.6867%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (4 samples, 0.14%)</title><rect x="93.4367%" y="709" width="0.1442%" height="15" fill="rgb(237,21,14)" fg:x="2591" fg:w="4"/><text x="93.6867%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (4 samples, 0.14%)</title><rect x="93.4367%" y="693" width="0.1442%" height="15" fill="rgb(249,128,51)" fg:x="2591" fg:w="4"/><text x="93.6867%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (2 samples, 0.07%)</title><rect x="93.5088%" y="677" width="0.0721%" height="15" fill="rgb(223,129,24)" fg:x="2593" fg:w="2"/><text x="93.7588%" y="687.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.07%)</title><rect x="93.5088%" y="661" width="0.0721%" height="15" fill="rgb(231,168,25)" fg:x="2593" fg:w="2"/><text x="93.7588%" y="671.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (2 samples, 0.07%)</title><rect x="93.5088%" y="645" width="0.0721%" height="15" fill="rgb(224,39,20)" fg:x="2593" fg:w="2"/><text x="93.7588%" y="655.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.04%)</title><rect x="93.5449%" y="629" width="0.0361%" height="15" fill="rgb(225,152,53)" fg:x="2594" fg:w="1"/><text x="93.7949%" y="639.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::contains_key (3 samples, 0.11%)</title><rect x="93.5810%" y="741" width="0.1082%" height="15" fill="rgb(252,17,24)" fg:x="2595" fg:w="3"/><text x="93.8310%" y="751.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (3 samples, 0.11%)</title><rect x="93.5810%" y="725" width="0.1082%" height="15" fill="rgb(250,114,30)" fg:x="2595" fg:w="3"/><text x="93.8310%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (3 samples, 0.11%)</title><rect x="93.5810%" y="709" width="0.1082%" height="15" fill="rgb(229,5,4)" fg:x="2595" fg:w="3"/><text x="93.8310%" y="719.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.11%)</title><rect x="93.5810%" y="693" width="0.1082%" height="15" fill="rgb(225,176,49)" fg:x="2595" fg:w="3"/><text x="93.8310%" y="703.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.11%)</title><rect x="93.5810%" y="677" width="0.1082%" height="15" fill="rgb(224,221,49)" fg:x="2595" fg:w="3"/><text x="93.8310%" y="687.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.11%)</title><rect x="93.5810%" y="661" width="0.1082%" height="15" fill="rgb(253,169,27)" fg:x="2595" fg:w="3"/><text x="93.8310%" y="671.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.07%)</title><rect x="93.6170%" y="645" width="0.0721%" height="15" fill="rgb(211,206,16)" fg:x="2596" fg:w="2"/><text x="93.8670%" y="655.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (2 samples, 0.07%)</title><rect x="93.6170%" y="629" width="0.0721%" height="15" fill="rgb(244,87,35)" fg:x="2596" fg:w="2"/><text x="93.8670%" y="639.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.07%)</title><rect x="93.6170%" y="613" width="0.0721%" height="15" fill="rgb(246,28,10)" fg:x="2596" fg:w="2"/><text x="93.8670%" y="623.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.07%)</title><rect x="93.6170%" y="597" width="0.0721%" height="15" fill="rgb(229,12,44)" fg:x="2596" fg:w="2"/><text x="93.8670%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,Type&gt;::borrow_mut (1 samples, 0.04%)</title><rect x="94.1580%" y="693" width="0.0361%" height="15" fill="rgb(210,145,37)" fg:x="2611" fg:w="1"/><text x="94.4080%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (2 samples, 0.07%)</title><rect x="94.2301%" y="677" width="0.0721%" height="15" fill="rgb(227,112,52)" fg:x="2613" fg:w="2"/><text x="94.4801%" y="687.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (2 samples, 0.07%)</title><rect x="94.2301%" y="661" width="0.0721%" height="15" fill="rgb(238,155,34)" fg:x="2613" fg:w="2"/><text x="94.4801%" y="671.50"></text></g><g><title>__memcmp_avx2_movbe (59 samples, 2.13%)</title><rect x="95.2038%" y="581" width="2.1277%" height="15" fill="rgb(239,226,36)" fg:x="2640" fg:w="59"/><text x="95.4538%" y="591.50">_..</text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (74 samples, 2.67%)</title><rect x="94.9153%" y="645" width="2.6686%" height="15" fill="rgb(230,16,23)" fg:x="2632" fg:w="74"/><text x="95.1653%" y="655.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (74 samples, 2.67%)</title><rect x="94.9153%" y="629" width="2.6686%" height="15" fill="rgb(236,171,36)" fg:x="2632" fg:w="74"/><text x="95.1653%" y="639.50">&lt;a..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (74 samples, 2.67%)</title><rect x="94.9153%" y="613" width="2.6686%" height="15" fill="rgb(221,22,14)" fg:x="2632" fg:w="74"/><text x="95.1653%" y="623.50">co..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (74 samples, 2.67%)</title><rect x="94.9153%" y="597" width="2.6686%" height="15" fill="rgb(242,43,11)" fg:x="2632" fg:w="74"/><text x="95.1653%" y="607.50">&lt;u..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (7 samples, 0.25%)</title><rect x="97.3314%" y="581" width="0.2524%" height="15" fill="rgb(232,69,23)" fg:x="2699" fg:w="7"/><text x="97.5814%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.25%)</title><rect x="97.5838%" y="645" width="0.2524%" height="15" fill="rgb(216,180,54)" fg:x="2706" fg:w="7"/><text x="97.8338%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.25%)</title><rect x="97.5838%" y="629" width="0.2524%" height="15" fill="rgb(216,5,24)" fg:x="2706" fg:w="7"/><text x="97.8338%" y="639.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (6 samples, 0.22%)</title><rect x="97.6199%" y="613" width="0.2164%" height="15" fill="rgb(225,89,9)" fg:x="2707" fg:w="6"/><text x="97.8699%" y="623.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (105 samples, 3.79%)</title><rect x="94.1219%" y="709" width="3.7865%" height="15" fill="rgb(243,75,33)" fg:x="2610" fg:w="105"/><text x="94.3719%" y="719.50">allo..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (103 samples, 3.71%)</title><rect x="94.1940%" y="693" width="3.7144%" height="15" fill="rgb(247,141,45)" fg:x="2612" fg:w="103"/><text x="94.4440%" y="703.50">allo..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (100 samples, 3.61%)</title><rect x="94.3022%" y="677" width="3.6062%" height="15" fill="rgb(232,177,36)" fg:x="2615" fg:w="100"/><text x="94.5522%" y="687.50">allo..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (100 samples, 3.61%)</title><rect x="94.3022%" y="661" width="3.6062%" height="15" fill="rgb(219,125,36)" fg:x="2615" fg:w="100"/><text x="94.5522%" y="671.50">allo..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (2 samples, 0.07%)</title><rect x="97.8363%" y="645" width="0.0721%" height="15" fill="rgb(227,94,9)" fg:x="2713" fg:w="2"/><text x="98.0863%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (1 samples, 0.04%)</title><rect x="97.9445%" y="693" width="0.0361%" height="15" fill="rgb(240,34,52)" fg:x="2716" fg:w="1"/><text x="98.1945%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="97.9445%" y="677" width="0.0361%" height="15" fill="rgb(216,45,12)" fg:x="2716" fg:w="1"/><text x="98.1945%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.04%)</title><rect x="97.9445%" y="661" width="0.0361%" height="15" fill="rgb(246,21,19)" fg:x="2716" fg:w="1"/><text x="98.1945%" y="671.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (1 samples, 0.04%)</title><rect x="97.9445%" y="645" width="0.0361%" height="15" fill="rgb(213,98,42)" fg:x="2716" fg:w="1"/><text x="98.1945%" y="655.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (2 samples, 0.07%)</title><rect x="98.0527%" y="661" width="0.0721%" height="15" fill="rgb(250,136,47)" fg:x="2719" fg:w="2"/><text x="98.3027%" y="671.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert::_{{closure}} (4 samples, 0.14%)</title><rect x="98.0527%" y="677" width="0.1442%" height="15" fill="rgb(251,124,27)" fg:x="2719" fg:w="4"/><text x="98.3027%" y="687.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (2 samples, 0.07%)</title><rect x="98.1248%" y="661" width="0.0721%" height="15" fill="rgb(229,180,14)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="671.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (2 samples, 0.07%)</title><rect x="98.1248%" y="645" width="0.0721%" height="15" fill="rgb(245,216,25)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="655.50"></text></g><g><title>alloc::collections::btree::mem::replace (2 samples, 0.07%)</title><rect x="98.1248%" y="629" width="0.0721%" height="15" fill="rgb(251,43,5)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="639.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (2 samples, 0.07%)</title><rect x="98.1248%" y="613" width="0.0721%" height="15" fill="rgb(250,128,24)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (2 samples, 0.07%)</title><rect x="98.1248%" y="597" width="0.0721%" height="15" fill="rgb(217,117,27)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (2 samples, 0.07%)</title><rect x="98.1248%" y="581" width="0.0721%" height="15" fill="rgb(245,147,4)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="591.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (2 samples, 0.07%)</title><rect x="98.1248%" y="565" width="0.0721%" height="15" fill="rgb(242,201,35)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.07%)</title><rect x="98.1248%" y="549" width="0.0721%" height="15" fill="rgb(218,181,1)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="559.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.07%)</title><rect x="98.1248%" y="533" width="0.0721%" height="15" fill="rgb(222,6,29)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="98.1248%" y="517" width="0.0721%" height="15" fill="rgb(208,186,3)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="527.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="98.1248%" y="501" width="0.0721%" height="15" fill="rgb(216,36,26)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="511.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="98.1248%" y="485" width="0.0721%" height="15" fill="rgb(248,201,23)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="495.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.07%)</title><rect x="98.1248%" y="469" width="0.0721%" height="15" fill="rgb(251,170,31)" fg:x="2721" fg:w="2"/><text x="98.3748%" y="479.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="98.1608%" y="453" width="0.0361%" height="15" fill="rgb(207,110,25)" fg:x="2722" fg:w="1"/><text x="98.4108%" y="463.50"></text></g><g><title>core::intrinsics::copy (21 samples, 0.76%)</title><rect x="98.3051%" y="629" width="0.7573%" height="15" fill="rgb(250,54,15)" fg:x="2726" fg:w="21"/><text x="98.5551%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.72%)</title><rect x="98.3411%" y="613" width="0.7212%" height="15" fill="rgb(227,68,33)" fg:x="2727" fg:w="20"/><text x="98.5911%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (27 samples, 0.97%)</title><rect x="98.1969%" y="661" width="0.9737%" height="15" fill="rgb(238,34,41)" fg:x="2723" fg:w="27"/><text x="98.4469%" y="671.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (24 samples, 0.87%)</title><rect x="98.3051%" y="645" width="0.8655%" height="15" fill="rgb(220,11,15)" fg:x="2726" fg:w="24"/><text x="98.5551%" y="655.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.11%)</title><rect x="99.0624%" y="629" width="0.1082%" height="15" fill="rgb(246,111,35)" fg:x="2747" fg:w="3"/><text x="99.3124%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (2 samples, 0.07%)</title><rect x="99.2066%" y="645" width="0.0721%" height="15" fill="rgb(209,88,53)" fg:x="2751" fg:w="2"/><text x="99.4566%" y="655.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (2 samples, 0.07%)</title><rect x="99.2066%" y="629" width="0.0721%" height="15" fill="rgb(231,185,47)" fg:x="2751" fg:w="2"/><text x="99.4566%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="99.2066%" y="613" width="0.0721%" height="15" fill="rgb(233,154,1)" fg:x="2751" fg:w="2"/><text x="99.4566%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="99.2066%" y="597" width="0.0721%" height="15" fill="rgb(225,15,46)" fg:x="2751" fg:w="2"/><text x="99.4566%" y="607.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="99.2788%" y="549" width="0.0361%" height="15" fill="rgb(211,135,41)" fg:x="2753" fg:w="1"/><text x="99.5288%" y="559.50"></text></g><g><title>checked_request2size (1 samples, 0.04%)</title><rect x="99.2788%" y="533" width="0.0361%" height="15" fill="rgb(208,54,0)" fg:x="2753" fg:w="1"/><text x="99.5288%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (38 samples, 1.37%)</title><rect x="97.9805%" y="693" width="1.3704%" height="15" fill="rgb(244,136,14)" fg:x="2717" fg:w="38"/><text x="98.2305%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (32 samples, 1.15%)</title><rect x="98.1969%" y="677" width="1.1540%" height="15" fill="rgb(241,56,14)" fg:x="2723" fg:w="32"/><text x="98.4469%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (5 samples, 0.18%)</title><rect x="99.1706%" y="661" width="0.1803%" height="15" fill="rgb(205,80,24)" fg:x="2750" fg:w="5"/><text x="99.4206%" y="671.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (2 samples, 0.07%)</title><rect x="99.2788%" y="645" width="0.0721%" height="15" fill="rgb(220,57,4)" fg:x="2753" fg:w="2"/><text x="99.5288%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.07%)</title><rect x="99.2788%" y="629" width="0.0721%" height="15" fill="rgb(226,193,50)" fg:x="2753" fg:w="2"/><text x="99.5288%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.07%)</title><rect x="99.2788%" y="613" width="0.0721%" height="15" fill="rgb(231,168,22)" fg:x="2753" fg:w="2"/><text x="99.5288%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="99.2788%" y="597" width="0.0721%" height="15" fill="rgb(254,215,14)" fg:x="2753" fg:w="2"/><text x="99.5288%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="99.2788%" y="581" width="0.0721%" height="15" fill="rgb(211,115,16)" fg:x="2753" fg:w="2"/><text x="99.5288%" y="591.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="99.2788%" y="565" width="0.0721%" height="15" fill="rgb(236,210,16)" fg:x="2753" fg:w="2"/><text x="99.5288%" y="575.50"></text></g><g><title>__rust_alloc (1 samples, 0.04%)</title><rect x="99.3148%" y="549" width="0.0361%" height="15" fill="rgb(221,94,12)" fg:x="2754" fg:w="1"/><text x="99.5648%" y="559.50"></text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (1,546 samples, 55.75%)</title><rect x="43.6351%" y="1061" width="55.7519%" height="15" fill="rgb(235,218,49)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="1071.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,546 samples, 55.75%)</title><rect x="43.6351%" y="1045" width="55.7519%" height="15" fill="rgb(217,114,14)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="1055.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (1,546 samples, 55.75%)</title><rect x="43.6351%" y="1029" width="55.7519%" height="15" fill="rgb(216,145,22)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="1039.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::test (1,546 samples, 55.75%)</title><rect x="43.6351%" y="1013" width="55.7519%" height="15" fill="rgb(217,112,39)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="1023.50">criterion::routine::Routine::test</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (1,546 samples, 55.75%)</title><rect x="43.6351%" y="997" width="55.7519%" height="15" fill="rgb(225,85,32)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="1007.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,546 samples, 55.75%)</title><rect x="43.6351%" y="981" width="55.7519%" height="15" fill="rgb(245,209,47)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="991.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,546 samples, 55.75%)</title><rect x="43.6351%" y="965" width="55.7519%" height="15" fill="rgb(218,220,15)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="975.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,546 samples, 55.75%)</title><rect x="43.6351%" y="949" width="55.7519%" height="15" fill="rgb(222,202,31)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="959.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,546 samples, 55.75%)</title><rect x="43.6351%" y="933" width="55.7519%" height="15" fill="rgb(243,203,4)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="943.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,546 samples, 55.75%)</title><rect x="43.6351%" y="917" width="55.7519%" height="15" fill="rgb(237,92,17)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="927.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,546 samples, 55.75%)</title><rect x="43.6351%" y="901" width="55.7519%" height="15" fill="rgb(231,119,7)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="911.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,546 samples, 55.75%)</title><rect x="43.6351%" y="885" width="55.7519%" height="15" fill="rgb(237,82,41)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="895.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,546 samples, 55.75%)</title><rect x="43.6351%" y="869" width="55.7519%" height="15" fill="rgb(226,81,48)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="879.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,546 samples, 55.75%)</title><rect x="43.6351%" y="853" width="55.7519%" height="15" fill="rgb(234,70,51)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="863.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,546 samples, 55.75%)</title><rect x="43.6351%" y="837" width="55.7519%" height="15" fill="rgb(251,86,4)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="847.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (1,546 samples, 55.75%)</title><rect x="43.6351%" y="821" width="55.7519%" height="15" fill="rgb(244,144,28)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="831.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (1,546 samples, 55.75%)</title><rect x="43.6351%" y="805" width="55.7519%" height="15" fill="rgb(232,161,39)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="815.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}}</text></g><g><title>storage_bench::real_data_data_bench::_{{closure}} (1,546 samples, 55.75%)</title><rect x="43.6351%" y="789" width="55.7519%" height="15" fill="rgb(247,34,51)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="799.50">storage_bench::real_data_data_bench::_{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1,546 samples, 55.75%)</title><rect x="43.6351%" y="773" width="55.7519%" height="15" fill="rgb(225,132,2)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="783.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>storage_bench::real_data_data_bench::_{{closure}}::_{{closure}} (1,546 samples, 55.75%)</title><rect x="43.6351%" y="757" width="55.7519%" height="15" fill="rgb(209,159,44)" fg:x="1210" fg:w="1546"/><text x="43.8851%" y="767.50">storage_bench::real_data_data_bench::_{{closure}}::_{{closure}}</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (158 samples, 5.70%)</title><rect x="93.6891%" y="741" width="5.6978%" height="15" fill="rgb(251,214,1)" fg:x="2598" fg:w="158"/><text x="93.9391%" y="751.50">serde_j..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (158 samples, 5.70%)</title><rect x="93.6891%" y="725" width="5.6978%" height="15" fill="rgb(247,84,47)" fg:x="2598" fg:w="158"/><text x="93.9391%" y="735.50">alloc::..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (41 samples, 1.48%)</title><rect x="97.9084%" y="709" width="1.4785%" height="15" fill="rgb(240,111,43)" fg:x="2715" fg:w="41"/><text x="98.1584%" y="719.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.04%)</title><rect x="99.3509%" y="693" width="0.0361%" height="15" fill="rgb(215,214,35)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="703.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.04%)</title><rect x="99.3509%" y="677" width="0.0361%" height="15" fill="rgb(248,207,23)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.04%)</title><rect x="99.3509%" y="661" width="0.0361%" height="15" fill="rgb(214,186,4)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.04%)</title><rect x="99.3509%" y="645" width="0.0361%" height="15" fill="rgb(220,133,22)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.04%)</title><rect x="99.3509%" y="629" width="0.0361%" height="15" fill="rgb(239,134,19)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.04%)</title><rect x="99.3509%" y="613" width="0.0361%" height="15" fill="rgb(250,140,9)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="623.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.04%)</title><rect x="99.3509%" y="597" width="0.0361%" height="15" fill="rgb(225,59,14)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="607.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.04%)</title><rect x="99.3509%" y="581" width="0.0361%" height="15" fill="rgb(214,152,51)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="591.50"></text></g><g><title>tcache_get (1 samples, 0.04%)</title><rect x="99.3509%" y="565" width="0.0361%" height="15" fill="rgb(251,227,43)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="575.50"></text></g><g><title>tcache_get_n (1 samples, 0.04%)</title><rect x="99.3509%" y="549" width="0.0361%" height="15" fill="rgb(241,96,17)" fg:x="2755" fg:w="1"/><text x="99.6009%" y="559.50"></text></g><g><title>_start (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1365" width="88.0274%" height="15" fill="rgb(234,198,43)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1375.50">_start</text></g><g><title>__libc_start_main_impl (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1349" width="88.0274%" height="15" fill="rgb(220,108,29)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1359.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1333" width="88.0274%" height="15" fill="rgb(226,163,33)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1343.50">__libc_start_call_main</text></g><g><title>main (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1317" width="88.0274%" height="15" fill="rgb(205,194,45)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1327.50">main</text></g><g><title>std::rt::lang_start_internal (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1301" width="88.0274%" height="15" fill="rgb(206,143,44)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1311.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1285" width="88.0274%" height="15" fill="rgb(236,136,36)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1295.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1269" width="88.0274%" height="15" fill="rgb(249,172,42)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1279.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1253" width="88.0274%" height="15" fill="rgb(216,139,23)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1263.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1237" width="88.0274%" height="15" fill="rgb(207,166,20)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1247.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1221" width="88.0274%" height="15" fill="rgb(210,209,22)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1231.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1205" width="88.0274%" height="15" fill="rgb(232,118,20)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1215.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1189" width="88.0274%" height="15" fill="rgb(238,113,42)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1199.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1173" width="88.0274%" height="15" fill="rgb(231,42,5)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1183.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1157" width="88.0274%" height="15" fill="rgb(243,166,24)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1167.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1141" width="88.0274%" height="15" fill="rgb(237,226,12)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1151.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1125" width="88.0274%" height="15" fill="rgb(229,133,24)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1135.50">core::ops::function::FnOnce::call_once</text></g><g><title>storage_bench::main (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1109" width="88.0274%" height="15" fill="rgb(238,33,43)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1119.50">storage_bench::main</text></g><g><title>storage_bench::benches (2,441 samples, 88.03%)</title><rect x="11.3956%" y="1093" width="88.0274%" height="15" fill="rgb(227,59,38)" fg:x="316" fg:w="2441"/><text x="11.6456%" y="1103.50">storage_bench::benches</text></g><g><title>storage_bench::real_data_data_bench (1,559 samples, 56.22%)</title><rect x="43.2023%" y="1077" width="56.2207%" height="15" fill="rgb(230,97,0)" fg:x="1198" fg:w="1559"/><text x="43.4523%" y="1087.50">storage_bench::real_data_data_bench</text></g><g><title>mmap_payload_storage::fixtures::empty_storage (1 samples, 0.04%)</title><rect x="99.3869%" y="1061" width="0.0361%" height="15" fill="rgb(250,173,50)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="1071.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::new (1 samples, 0.04%)</title><rect x="99.3869%" y="1045" width="0.0361%" height="15" fill="rgb(240,15,50)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="1055.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::new (1 samples, 0.04%)</title><rect x="99.3869%" y="1029" width="0.0361%" height="15" fill="rgb(221,93,22)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="1039.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::write_header (1 samples, 0.04%)</title><rect x="99.3869%" y="1013" width="0.0361%" height="15" fill="rgb(245,180,53)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="1023.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.04%)</title><rect x="99.3869%" y="997" width="0.0361%" height="15" fill="rgb(231,88,51)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="1007.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.04%)</title><rect x="99.3869%" y="981" width="0.0361%" height="15" fill="rgb(240,58,21)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="991.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.04%)</title><rect x="99.3869%" y="965" width="0.0361%" height="15" fill="rgb(237,21,10)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="975.50"></text></g><g><title>exc_page_fault (1 samples, 0.04%)</title><rect x="99.3869%" y="949" width="0.0361%" height="15" fill="rgb(218,43,11)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="959.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.04%)</title><rect x="99.3869%" y="933" width="0.0361%" height="15" fill="rgb(218,221,29)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="943.50"></text></g><g><title>handle_mm_fault (1 samples, 0.04%)</title><rect x="99.3869%" y="917" width="0.0361%" height="15" fill="rgb(214,118,42)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="927.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.04%)</title><rect x="99.3869%" y="901" width="0.0361%" height="15" fill="rgb(251,200,26)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="911.50"></text></g><g><title>handle_pte_fault (1 samples, 0.04%)</title><rect x="99.3869%" y="885" width="0.0361%" height="15" fill="rgb(237,101,39)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="895.50"></text></g><g><title>do_fault (1 samples, 0.04%)</title><rect x="99.3869%" y="869" width="0.0361%" height="15" fill="rgb(251,117,11)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="879.50"></text></g><g><title>do_page_mkwrite (1 samples, 0.04%)</title><rect x="99.3869%" y="853" width="0.0361%" height="15" fill="rgb(216,223,23)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="863.50"></text></g><g><title>ext4_page_mkwrite (1 samples, 0.04%)</title><rect x="99.3869%" y="837" width="0.0361%" height="15" fill="rgb(251,54,12)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="847.50"></text></g><g><title>block_page_mkwrite (1 samples, 0.04%)</title><rect x="99.3869%" y="821" width="0.0361%" height="15" fill="rgb(254,176,54)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="831.50"></text></g><g><title>__block_write_begin_int (1 samples, 0.04%)</title><rect x="99.3869%" y="805" width="0.0361%" height="15" fill="rgb(210,32,8)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="815.50"></text></g><g><title>folio_create_buffers (1 samples, 0.04%)</title><rect x="99.3869%" y="789" width="0.0361%" height="15" fill="rgb(235,52,38)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="799.50"></text></g><g><title>create_empty_buffers (1 samples, 0.04%)</title><rect x="99.3869%" y="773" width="0.0361%" height="15" fill="rgb(231,4,44)" fg:x="2756" fg:w="1"/><text x="99.6369%" y="783.50"></text></g><g><title>asm_exc_page_fault (5 samples, 0.18%)</title><rect x="99.4230%" y="1365" width="0.1803%" height="15" fill="rgb(249,2,32)" fg:x="2757" fg:w="5"/><text x="99.6730%" y="1375.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.04%)</title><rect x="99.6033%" y="1317" width="0.0361%" height="15" fill="rgb(224,65,26)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1327.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.04%)</title><rect x="99.6033%" y="1301" width="0.0361%" height="15" fill="rgb(250,73,40)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1311.50"></text></g><g><title>bprm_execve (1 samples, 0.04%)</title><rect x="99.6033%" y="1285" width="0.0361%" height="15" fill="rgb(253,177,16)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1295.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.04%)</title><rect x="99.6033%" y="1269" width="0.0361%" height="15" fill="rgb(217,32,34)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1279.50"></text></g><g><title>exec_binprm (1 samples, 0.04%)</title><rect x="99.6033%" y="1253" width="0.0361%" height="15" fill="rgb(212,7,10)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1263.50"></text></g><g><title>search_binary_handler (1 samples, 0.04%)</title><rect x="99.6033%" y="1237" width="0.0361%" height="15" fill="rgb(245,89,8)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1247.50"></text></g><g><title>load_elf_binary (1 samples, 0.04%)</title><rect x="99.6033%" y="1221" width="0.0361%" height="15" fill="rgb(237,16,53)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1231.50"></text></g><g><title>elf_load (1 samples, 0.04%)</title><rect x="99.6033%" y="1205" width="0.0361%" height="15" fill="rgb(250,204,30)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1215.50"></text></g><g><title>vm_mmap (1 samples, 0.04%)</title><rect x="99.6033%" y="1189" width="0.0361%" height="15" fill="rgb(208,77,27)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1199.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.04%)</title><rect x="99.6033%" y="1173" width="0.0361%" height="15" fill="rgb(250,204,28)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1183.50"></text></g><g><title>do_mmap (1 samples, 0.04%)</title><rect x="99.6033%" y="1157" width="0.0361%" height="15" fill="rgb(244,63,21)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1167.50"></text></g><g><title>mas_preallocate (1 samples, 0.04%)</title><rect x="99.6033%" y="1141" width="0.0361%" height="15" fill="rgb(236,85,44)" fg:x="2762" fg:w="1"/><text x="99.8533%" y="1151.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 0.07%)</title><rect x="99.6033%" y="1365" width="0.0721%" height="15" fill="rgb(215,98,4)" fg:x="2762" fg:w="2"/><text x="99.8533%" y="1375.50"></text></g><g><title>do_syscall_64 (2 samples, 0.07%)</title><rect x="99.6033%" y="1349" width="0.0721%" height="15" fill="rgb(235,38,11)" fg:x="2762" fg:w="2"/><text x="99.8533%" y="1359.50"></text></g><g><title>x64_sys_call (2 samples, 0.07%)</title><rect x="99.6033%" y="1333" width="0.0721%" height="15" fill="rgb(254,186,25)" fg:x="2762" fg:w="2"/><text x="99.8533%" y="1343.50"></text></g><g><title>__x64_sys_exit_group (1 samples, 0.04%)</title><rect x="99.6394%" y="1317" width="0.0361%" height="15" fill="rgb(225,55,31)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1327.50"></text></g><g><title>do_group_exit (1 samples, 0.04%)</title><rect x="99.6394%" y="1301" width="0.0361%" height="15" fill="rgb(211,15,21)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1311.50"></text></g><g><title>do_exit (1 samples, 0.04%)</title><rect x="99.6394%" y="1285" width="0.0361%" height="15" fill="rgb(215,187,41)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1295.50"></text></g><g><title>exit_mm (1 samples, 0.04%)</title><rect x="99.6394%" y="1269" width="0.0361%" height="15" fill="rgb(248,69,32)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1279.50"></text></g><g><title>mmput (1 samples, 0.04%)</title><rect x="99.6394%" y="1253" width="0.0361%" height="15" fill="rgb(252,102,52)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1263.50"></text></g><g><title>__mmput (1 samples, 0.04%)</title><rect x="99.6394%" y="1237" width="0.0361%" height="15" fill="rgb(253,140,32)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1247.50"></text></g><g><title>exit_mmap (1 samples, 0.04%)</title><rect x="99.6394%" y="1221" width="0.0361%" height="15" fill="rgb(216,56,42)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1231.50"></text></g><g><title>unmap_vmas (1 samples, 0.04%)</title><rect x="99.6394%" y="1205" width="0.0361%" height="15" fill="rgb(216,184,14)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1215.50"></text></g><g><title>unmap_single_vma (1 samples, 0.04%)</title><rect x="99.6394%" y="1189" width="0.0361%" height="15" fill="rgb(237,187,27)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1199.50"></text></g><g><title>unmap_page_range (1 samples, 0.04%)</title><rect x="99.6394%" y="1173" width="0.0361%" height="15" fill="rgb(219,65,3)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1183.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.04%)</title><rect x="99.6394%" y="1157" width="0.0361%" height="15" fill="rgb(245,83,25)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1167.50"></text></g><g><title>_compound_head (1 samples, 0.04%)</title><rect x="99.6394%" y="1141" width="0.0361%" height="15" fill="rgb(214,205,45)" fg:x="2763" fg:w="1"/><text x="99.8894%" y="1151.50"></text></g><g><title>malloc_consolidate (1 samples, 0.04%)</title><rect x="99.6754%" y="1365" width="0.0361%" height="15" fill="rgb(241,20,18)" fg:x="2764" fg:w="1"/><text x="99.9254%" y="1375.50"></text></g><g><title>__rdl_realloc (1 samples, 0.04%)</title><rect x="99.6754%" y="1349" width="0.0361%" height="15" fill="rgb(232,163,23)" fg:x="2764" fg:w="1"/><text x="99.9254%" y="1359.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.04%)</title><rect x="99.6754%" y="1333" width="0.0361%" height="15" fill="rgb(214,5,46)" fg:x="2764" fg:w="1"/><text x="99.9254%" y="1343.50"></text></g><g><title>schedule_tail (4 samples, 0.14%)</title><rect x="99.7115%" y="1333" width="0.1442%" height="15" fill="rgb(229,78,17)" fg:x="2765" fg:w="4"/><text x="99.9615%" y="1343.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.14%)</title><rect x="99.7115%" y="1317" width="0.1442%" height="15" fill="rgb(248,89,10)" fg:x="2765" fg:w="4"/><text x="99.9615%" y="1327.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.14%)</title><rect x="99.7115%" y="1301" width="0.1442%" height="15" fill="rgb(248,54,15)" fg:x="2765" fg:w="4"/><text x="99.9615%" y="1311.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.14%)</title><rect x="99.7115%" y="1285" width="0.1442%" height="15" fill="rgb(223,116,6)" fg:x="2765" fg:w="4"/><text x="99.9615%" y="1295.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.14%)</title><rect x="99.7115%" y="1269" width="0.1442%" height="15" fill="rgb(205,125,38)" fg:x="2765" fg:w="4"/><text x="99.9615%" y="1279.50"></text></g><g><title>intel_pmu_enable_all (4 samples, 0.14%)</title><rect x="99.7115%" y="1253" width="0.1442%" height="15" fill="rgb(251,78,38)" fg:x="2765" fg:w="4"/><text x="99.9615%" y="1263.50"></text></g><g><title>native_write_msr (4 samples, 0.14%)</title><rect x="99.7115%" y="1237" width="0.1442%" height="15" fill="rgb(253,78,28)" fg:x="2765" fg:w="4"/><text x="99.9615%" y="1247.50"></text></g><g><title>ret_from_fork_asm (5 samples, 0.18%)</title><rect x="99.7115%" y="1365" width="0.1803%" height="15" fill="rgb(209,120,3)" fg:x="2765" fg:w="5"/><text x="99.9615%" y="1375.50"></text></g><g><title>ret_from_fork (5 samples, 0.18%)</title><rect x="99.7115%" y="1349" width="0.1803%" height="15" fill="rgb(238,229,9)" fg:x="2765" fg:w="5"/><text x="99.9615%" y="1359.50"></text></g><g><title>syscall_exit_to_user_mode_prepare (1 samples, 0.04%)</title><rect x="99.8558%" y="1333" width="0.0361%" height="15" fill="rgb(253,159,18)" fg:x="2769" fg:w="1"/><text x="100.1058%" y="1343.50"></text></g><g><title>serde_cbor::de::from_slice (1 samples, 0.04%)</title><rect x="99.8918%" y="1365" width="0.0361%" height="15" fill="rgb(244,42,34)" fg:x="2770" fg:w="1"/><text x="100.1418%" y="1375.50"></text></g><g><title>all (2,773 samples, 100%)</title><rect x="0.0000%" y="1397" width="100.0000%" height="15" fill="rgb(224,8,7)" fg:x="0" fg:w="2773"/><text x="0.2500%" y="1407.50"></text></g><g><title>storage_bench-a (2,763 samples, 99.64%)</title><rect x="0.3606%" y="1381" width="99.6394%" height="15" fill="rgb(210,201,45)" fg:x="10" fg:w="2763"/><text x="0.6106%" y="1391.50">storage_bench-a</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (2 samples, 0.07%)</title><rect x="99.9279%" y="1365" width="0.0721%" height="15" fill="rgb(252,185,21)" fg:x="2771" fg:w="2"/><text x="100.1779%" y="1375.50"></text></g><g><title>&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (2 samples, 0.07%)</title><rect x="99.9279%" y="1349" width="0.0721%" height="15" fill="rgb(223,131,1)" fg:x="2771" fg:w="2"/><text x="100.1779%" y="1359.50"></text></g></svg></svg>