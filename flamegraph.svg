<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1462" onload="init(evt)" viewBox="0 0 1200 1462" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1462" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1445.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1445.00"> </text><svg id="frames" x="10" width="1180" total_samples="2859"><g><title>_dl_start_user (1 samples, 0.03%)</title><rect x="0.0000%" y="1381" width="0.0350%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1391.50"></text></g><g><title>_dl_init (1 samples, 0.03%)</title><rect x="0.0000%" y="1365" width="0.0350%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1375.50"></text></g><g><title>call_init (1 samples, 0.03%)</title><rect x="0.0000%" y="1349" width="0.0350%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1359.50"></text></g><g><title>call_init (1 samples, 0.03%)</title><rect x="0.0000%" y="1333" width="0.0350%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1343.50"></text></g><g><title>[libwx_baseu-3.2.so.0.2.2] (1 samples, 0.03%)</title><rect x="0.0000%" y="1317" width="0.0350%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1327.50"></text></g><g><title>wxGzipClassFactory::wxGzipClassFactory (1 samples, 0.03%)</title><rect x="0.0000%" y="1301" width="0.0350%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1311.50"></text></g><g><title>wxZlibInputStream::CanHandleGZip (1 samples, 0.03%)</title><rect x="0.0000%" y="1285" width="0.0350%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1295.50"></text></g><g><title>__GI_____strtol_l_internal (1 samples, 0.03%)</title><rect x="0.0000%" y="1269" width="0.0350%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1279.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.03%)</title><rect x="0.0350%" y="1301" width="0.0350%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1311.50"></text></g><g><title>__GI__dl_catch_exception (1 samples, 0.03%)</title><rect x="0.0350%" y="1285" width="0.0350%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1295.50"></text></g><g><title>openaux (1 samples, 0.03%)</title><rect x="0.0350%" y="1269" width="0.0350%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1279.50"></text></g><g><title>_dl_map_object (1 samples, 0.03%)</title><rect x="0.0350%" y="1253" width="0.0350%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1263.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.03%)</title><rect x="0.0350%" y="1237" width="0.0350%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1247.50"></text></g><g><title>_dl_map_segments (1 samples, 0.03%)</title><rect x="0.0350%" y="1221" width="0.0350%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1231.50"></text></g><g><title>__mmap64 (1 samples, 0.03%)</title><rect x="0.0350%" y="1205" width="0.0350%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1215.50"></text></g><g><title>__mmap64 (1 samples, 0.03%)</title><rect x="0.0350%" y="1189" width="0.0350%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1199.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="0.0350%" y="1173" width="0.0350%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1183.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="0.0350%" y="1157" width="0.0350%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1167.50"></text></g><g><title>x64_sys_call (1 samples, 0.03%)</title><rect x="0.0350%" y="1141" width="0.0350%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1151.50"></text></g><g><title>__x64_sys_mmap (1 samples, 0.03%)</title><rect x="0.0350%" y="1125" width="0.0350%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1135.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.03%)</title><rect x="0.0350%" y="1109" width="0.0350%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1119.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.03%)</title><rect x="0.0350%" y="1093" width="0.0350%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1103.50"></text></g><g><title>do_mmap (1 samples, 0.03%)</title><rect x="0.0350%" y="1077" width="0.0350%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1087.50"></text></g><g><title>mmap_region (1 samples, 0.03%)</title><rect x="0.0350%" y="1061" width="0.0350%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1071.50"></text></g><g><title>do_vmi_munmap (1 samples, 0.03%)</title><rect x="0.0350%" y="1045" width="0.0350%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1055.50"></text></g><g><title>do_vmi_align_munmap (1 samples, 0.03%)</title><rect x="0.0350%" y="1029" width="0.0350%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1039.50"></text></g><g><title>mas_store_gfp (1 samples, 0.03%)</title><rect x="0.0350%" y="1013" width="0.0350%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1023.50"></text></g><g><title>mas_wr_store_entry.isra.0 (1 samples, 0.03%)</title><rect x="0.0350%" y="997" width="0.0350%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.2850%" y="1007.50"></text></g><g><title>mas_wr_spanning_store.isra.0 (1 samples, 0.03%)</title><rect x="0.0350%" y="981" width="0.0350%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="0.2850%" y="991.50"></text></g><g><title>mas_spanning_rebalance.isra.0 (1 samples, 0.03%)</title><rect x="0.0350%" y="965" width="0.0350%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="0.2850%" y="975.50"></text></g><g><title>mas_pop_node (1 samples, 0.03%)</title><rect x="0.0350%" y="949" width="0.0350%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="0.2850%" y="959.50"></text></g><g><title>_start (5 samples, 0.17%)</title><rect x="0.0350%" y="1381" width="0.1749%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="5"/><text x="0.2850%" y="1391.50"></text></g><g><title>_dl_start (5 samples, 0.17%)</title><rect x="0.0350%" y="1365" width="0.1749%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="5"/><text x="0.2850%" y="1375.50"></text></g><g><title>_dl_start_final (5 samples, 0.17%)</title><rect x="0.0350%" y="1349" width="0.1749%" height="15" fill="rgb(254,191,54)" fg:x="1" fg:w="5"/><text x="0.2850%" y="1359.50"></text></g><g><title>_dl_sysdep_start (5 samples, 0.17%)</title><rect x="0.0350%" y="1333" width="0.1749%" height="15" fill="rgb(241,83,37)" fg:x="1" fg:w="5"/><text x="0.2850%" y="1343.50"></text></g><g><title>dl_main (5 samples, 0.17%)</title><rect x="0.0350%" y="1317" width="0.1749%" height="15" fill="rgb(233,36,39)" fg:x="1" fg:w="5"/><text x="0.2850%" y="1327.50"></text></g><g><title>_dl_relocate_object (4 samples, 0.14%)</title><rect x="0.0700%" y="1301" width="0.1399%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="4"/><text x="0.3200%" y="1311.50"></text></g><g><title>elf_dynamic_do_Rela (4 samples, 0.14%)</title><rect x="0.0700%" y="1285" width="0.1399%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="4"/><text x="0.3200%" y="1295.50"></text></g><g><title>elf_machine_rela (4 samples, 0.14%)</title><rect x="0.0700%" y="1269" width="0.1399%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="4"/><text x="0.3200%" y="1279.50"></text></g><g><title>resolve_map (4 samples, 0.14%)</title><rect x="0.0700%" y="1253" width="0.1399%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="4"/><text x="0.3200%" y="1263.50"></text></g><g><title>_dl_lookup_symbol_x (4 samples, 0.14%)</title><rect x="0.0700%" y="1237" width="0.1399%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="4"/><text x="0.3200%" y="1247.50"></text></g><g><title>do_lookup_x (4 samples, 0.14%)</title><rect x="0.0700%" y="1221" width="0.1399%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="4"/><text x="0.3200%" y="1231.50"></text></g><g><title>check_match (1 samples, 0.03%)</title><rect x="0.1749%" y="1205" width="0.0350%" height="15" fill="rgb(235,93,37)" fg:x="5" fg:w="1"/><text x="0.4249%" y="1215.50"></text></g><g><title>strcmp (1 samples, 0.03%)</title><rect x="0.1749%" y="1189" width="0.0350%" height="15" fill="rgb(213,116,39)" fg:x="5" fg:w="1"/><text x="0.4249%" y="1199.50"></text></g><g><title>gnuplot (7 samples, 0.24%)</title><rect x="0.0000%" y="1397" width="0.2448%" height="15" fill="rgb(222,207,29)" fg:x="0" fg:w="7"/><text x="0.2500%" y="1407.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="0.2099%" y="1381" width="0.0350%" height="15" fill="rgb(206,96,30)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1391.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="0.2099%" y="1365" width="0.0350%" height="15" fill="rgb(218,138,4)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1375.50"></text></g><g><title>x64_sys_call (1 samples, 0.03%)</title><rect x="0.2099%" y="1349" width="0.0350%" height="15" fill="rgb(250,191,14)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1359.50"></text></g><g><title>__x64_sys_exit_group (1 samples, 0.03%)</title><rect x="0.2099%" y="1333" width="0.0350%" height="15" fill="rgb(239,60,40)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1343.50"></text></g><g><title>do_group_exit (1 samples, 0.03%)</title><rect x="0.2099%" y="1317" width="0.0350%" height="15" fill="rgb(206,27,48)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1327.50"></text></g><g><title>do_exit (1 samples, 0.03%)</title><rect x="0.2099%" y="1301" width="0.0350%" height="15" fill="rgb(225,35,8)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1311.50"></text></g><g><title>exit_mm (1 samples, 0.03%)</title><rect x="0.2099%" y="1285" width="0.0350%" height="15" fill="rgb(250,213,24)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1295.50"></text></g><g><title>mmput (1 samples, 0.03%)</title><rect x="0.2099%" y="1269" width="0.0350%" height="15" fill="rgb(247,123,22)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1279.50"></text></g><g><title>__mmput (1 samples, 0.03%)</title><rect x="0.2099%" y="1253" width="0.0350%" height="15" fill="rgb(231,138,38)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1263.50"></text></g><g><title>exit_mmap (1 samples, 0.03%)</title><rect x="0.2099%" y="1237" width="0.0350%" height="15" fill="rgb(231,145,46)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1247.50"></text></g><g><title>unmap_vmas (1 samples, 0.03%)</title><rect x="0.2099%" y="1221" width="0.0350%" height="15" fill="rgb(251,118,11)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1231.50"></text></g><g><title>unmap_single_vma (1 samples, 0.03%)</title><rect x="0.2099%" y="1205" width="0.0350%" height="15" fill="rgb(217,147,25)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1215.50"></text></g><g><title>unmap_page_range (1 samples, 0.03%)</title><rect x="0.2099%" y="1189" width="0.0350%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1199.50"></text></g><g><title>zap_pmd_range.isra.0 (1 samples, 0.03%)</title><rect x="0.2099%" y="1173" width="0.0350%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1183.50"></text></g><g><title>zap_pte_range (1 samples, 0.03%)</title><rect x="0.2099%" y="1157" width="0.0350%" height="15" fill="rgb(227,1,9)" fg:x="6" fg:w="1"/><text x="0.4599%" y="1167.50"></text></g><g><title>perf-exec (5 samples, 0.17%)</title><rect x="0.2448%" y="1397" width="0.1749%" height="15" fill="rgb(248,47,43)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1407.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.17%)</title><rect x="0.2448%" y="1381" width="0.1749%" height="15" fill="rgb(221,10,30)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1391.50"></text></g><g><title>do_syscall_64 (5 samples, 0.17%)</title><rect x="0.2448%" y="1365" width="0.1749%" height="15" fill="rgb(210,229,1)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1375.50"></text></g><g><title>x64_sys_call (5 samples, 0.17%)</title><rect x="0.2448%" y="1349" width="0.1749%" height="15" fill="rgb(222,148,37)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1359.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.17%)</title><rect x="0.2448%" y="1333" width="0.1749%" height="15" fill="rgb(234,67,33)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1343.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.17%)</title><rect x="0.2448%" y="1317" width="0.1749%" height="15" fill="rgb(247,98,35)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1327.50"></text></g><g><title>bprm_execve (5 samples, 0.17%)</title><rect x="0.2448%" y="1301" width="0.1749%" height="15" fill="rgb(247,138,52)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1311.50"></text></g><g><title>bprm_execve.part.0 (5 samples, 0.17%)</title><rect x="0.2448%" y="1285" width="0.1749%" height="15" fill="rgb(213,79,30)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1295.50"></text></g><g><title>exec_binprm (5 samples, 0.17%)</title><rect x="0.2448%" y="1269" width="0.1749%" height="15" fill="rgb(246,177,23)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1279.50"></text></g><g><title>search_binary_handler (5 samples, 0.17%)</title><rect x="0.2448%" y="1253" width="0.1749%" height="15" fill="rgb(230,62,27)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1263.50"></text></g><g><title>load_elf_binary (5 samples, 0.17%)</title><rect x="0.2448%" y="1237" width="0.1749%" height="15" fill="rgb(216,154,8)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1247.50"></text></g><g><title>begin_new_exec (5 samples, 0.17%)</title><rect x="0.2448%" y="1221" width="0.1749%" height="15" fill="rgb(244,35,45)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1231.50"></text></g><g><title>perf_event_exec (5 samples, 0.17%)</title><rect x="0.2448%" y="1205" width="0.1749%" height="15" fill="rgb(251,115,12)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1215.50"></text></g><g><title>perf_event_enable_on_exec (5 samples, 0.17%)</title><rect x="0.2448%" y="1189" width="0.1749%" height="15" fill="rgb(240,54,50)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1199.50"></text></g><g><title>ctx_resched (5 samples, 0.17%)</title><rect x="0.2448%" y="1173" width="0.1749%" height="15" fill="rgb(233,84,52)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1183.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.17%)</title><rect x="0.2448%" y="1157" width="0.1749%" height="15" fill="rgb(207,117,47)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1167.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.17%)</title><rect x="0.2448%" y="1141" width="0.1749%" height="15" fill="rgb(249,43,39)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1151.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.17%)</title><rect x="0.2448%" y="1125" width="0.1749%" height="15" fill="rgb(209,38,44)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1135.50"></text></g><g><title>native_write_msr (5 samples, 0.17%)</title><rect x="0.2448%" y="1109" width="0.1749%" height="15" fill="rgb(236,212,23)" fg:x="7" fg:w="5"/><text x="0.4948%" y="1119.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="0.4197%" y="1365" width="0.0350%" height="15" fill="rgb(242,79,21)" fg:x="12" fg:w="1"/><text x="0.6697%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="0.9444%" y="1301" width="0.0350%" height="15" fill="rgb(211,96,35)" fg:x="27" fg:w="1"/><text x="1.1944%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="0.9444%" y="1285" width="0.0350%" height="15" fill="rgb(253,215,40)" fg:x="27" fg:w="1"/><text x="1.1944%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (23 samples, 0.80%)</title><rect x="0.4547%" y="1365" width="0.8045%" height="15" fill="rgb(211,81,21)" fg:x="13" fg:w="23"/><text x="0.7047%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (9 samples, 0.31%)</title><rect x="0.9444%" y="1349" width="0.3148%" height="15" fill="rgb(208,190,38)" fg:x="27" fg:w="9"/><text x="1.1944%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (9 samples, 0.31%)</title><rect x="0.9444%" y="1333" width="0.3148%" height="15" fill="rgb(235,213,38)" fg:x="27" fg:w="9"/><text x="1.1944%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (9 samples, 0.31%)</title><rect x="0.9444%" y="1317" width="0.3148%" height="15" fill="rgb(237,122,38)" fg:x="27" fg:w="9"/><text x="1.1944%" y="1327.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.28%)</title><rect x="0.9794%" y="1301" width="0.2798%" height="15" fill="rgb(244,218,35)" fg:x="28" fg:w="8"/><text x="1.2294%" y="1311.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="1.2592%" y="1365" width="0.0350%" height="15" fill="rgb(240,68,47)" fg:x="36" fg:w="1"/><text x="1.5092%" y="1375.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="1.2942%" y="1365" width="0.0350%" height="15" fill="rgb(210,16,53)" fg:x="37" fg:w="1"/><text x="1.5442%" y="1375.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="1.3291%" y="1365" width="0.0350%" height="15" fill="rgb(235,124,12)" fg:x="38" fg:w="1"/><text x="1.5791%" y="1375.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.10%)</title><rect x="1.3641%" y="1365" width="0.1049%" height="15" fill="rgb(224,169,11)" fg:x="39" fg:w="3"/><text x="1.6141%" y="1375.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.07%)</title><rect x="1.4690%" y="1365" width="0.0700%" height="15" fill="rgb(250,166,2)" fg:x="42" fg:w="2"/><text x="1.7190%" y="1375.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="1.5390%" y="1365" width="0.0350%" height="15" fill="rgb(242,216,29)" fg:x="44" fg:w="1"/><text x="1.7890%" y="1375.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="1.5740%" y="1365" width="0.0350%" height="15" fill="rgb(230,116,27)" fg:x="45" fg:w="1"/><text x="1.8240%" y="1375.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (6 samples, 0.21%)</title><rect x="1.6090%" y="1365" width="0.2099%" height="15" fill="rgb(228,99,48)" fg:x="46" fg:w="6"/><text x="1.8590%" y="1375.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (2 samples, 0.07%)</title><rect x="1.8188%" y="1365" width="0.0700%" height="15" fill="rgb(253,11,6)" fg:x="52" fg:w="2"/><text x="2.0688%" y="1375.50"></text></g><g><title>[[heap]] (46 samples, 1.61%)</title><rect x="0.4197%" y="1381" width="1.6090%" height="15" fill="rgb(247,143,39)" fg:x="12" fg:w="46"/><text x="0.6697%" y="1391.50"></text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (4 samples, 0.14%)</title><rect x="1.8888%" y="1365" width="0.1399%" height="15" fill="rgb(236,97,10)" fg:x="54" fg:w="4"/><text x="2.1388%" y="1375.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="2.0287%" y="1365" width="0.0350%" height="15" fill="rgb(233,208,19)" fg:x="58" fg:w="1"/><text x="2.2787%" y="1375.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.10%)</title><rect x="2.0637%" y="1365" width="0.1049%" height="15" fill="rgb(216,164,2)" fg:x="59" fg:w="3"/><text x="2.3137%" y="1375.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.03%)</title><rect x="2.1336%" y="1349" width="0.0350%" height="15" fill="rgb(220,129,5)" fg:x="61" fg:w="1"/><text x="2.3836%" y="1359.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="2.1336%" y="1333" width="0.0350%" height="15" fill="rgb(242,17,10)" fg:x="61" fg:w="1"/><text x="2.3836%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="2.1336%" y="1317" width="0.0350%" height="15" fill="rgb(242,107,0)" fg:x="61" fg:w="1"/><text x="2.3836%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="2.1336%" y="1301" width="0.0350%" height="15" fill="rgb(251,28,31)" fg:x="61" fg:w="1"/><text x="2.3836%" y="1311.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="2.1336%" y="1285" width="0.0350%" height="15" fill="rgb(233,223,10)" fg:x="61" fg:w="1"/><text x="2.3836%" y="1295.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="2.1336%" y="1269" width="0.0350%" height="15" fill="rgb(215,21,27)" fg:x="61" fg:w="1"/><text x="2.3836%" y="1279.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.07%)</title><rect x="2.3435%" y="1301" width="0.0700%" height="15" fill="rgb(232,23,21)" fg:x="67" fg:w="2"/><text x="2.5935%" y="1311.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.07%)</title><rect x="2.3435%" y="1285" width="0.0700%" height="15" fill="rgb(244,5,23)" fg:x="67" fg:w="2"/><text x="2.5935%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (10 samples, 0.35%)</title><rect x="2.1686%" y="1365" width="0.3498%" height="15" fill="rgb(226,81,46)" fg:x="62" fg:w="10"/><text x="2.4186%" y="1375.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.17%)</title><rect x="2.3435%" y="1349" width="0.1749%" height="15" fill="rgb(247,70,30)" fg:x="67" fg:w="5"/><text x="2.5935%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.17%)</title><rect x="2.3435%" y="1333" width="0.1749%" height="15" fill="rgb(212,68,19)" fg:x="67" fg:w="5"/><text x="2.5935%" y="1343.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.17%)</title><rect x="2.3435%" y="1317" width="0.1749%" height="15" fill="rgb(240,187,13)" fg:x="67" fg:w="5"/><text x="2.5935%" y="1327.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="2.4134%" y="1301" width="0.1049%" height="15" fill="rgb(223,113,26)" fg:x="69" fg:w="3"/><text x="2.6634%" y="1311.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="2.5184%" y="1365" width="0.0350%" height="15" fill="rgb(206,192,2)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1375.50"></text></g><g><title>csv::string_record::StringRecord::clone_truncated (1 samples, 0.03%)</title><rect x="2.5184%" y="1349" width="0.0350%" height="15" fill="rgb(241,108,4)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1359.50"></text></g><g><title>csv::byte_record::ByteRecord::clone_truncated (1 samples, 0.03%)</title><rect x="2.5184%" y="1333" width="0.0350%" height="15" fill="rgb(247,173,49)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1343.50"></text></g><g><title>&lt;csv::byte_record::Bounds as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="2.5184%" y="1317" width="0.0350%" height="15" fill="rgb(224,114,35)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1327.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="2.5184%" y="1301" width="0.0350%" height="15" fill="rgb(245,159,27)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="2.5184%" y="1285" width="0.0350%" height="15" fill="rgb(245,172,44)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1295.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="2.5184%" y="1269" width="0.0350%" height="15" fill="rgb(236,23,11)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1279.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="2.5184%" y="1253" width="0.0350%" height="15" fill="rgb(205,117,38)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1263.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="2.5184%" y="1237" width="0.0350%" height="15" fill="rgb(237,72,25)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1247.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="2.5184%" y="1221" width="0.0350%" height="15" fill="rgb(244,70,9)" fg:x="72" fg:w="1"/><text x="2.7684%" y="1231.50"></text></g><g><title>&lt;str as core::fmt::Display&gt;::fmt (1 samples, 0.03%)</title><rect x="2.5533%" y="1365" width="0.0350%" height="15" fill="rgb(217,125,39)" fg:x="73" fg:w="1"/><text x="2.8033%" y="1375.50"></text></g><g><title>__GI___libc_free (3 samples, 0.10%)</title><rect x="2.5883%" y="1365" width="0.1049%" height="15" fill="rgb(235,36,10)" fg:x="74" fg:w="3"/><text x="2.8383%" y="1375.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.10%)</title><rect x="2.6932%" y="1365" width="0.1049%" height="15" fill="rgb(251,123,47)" fg:x="77" fg:w="3"/><text x="2.9432%" y="1375.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="2.7982%" y="1365" width="0.0350%" height="15" fill="rgb(221,13,13)" fg:x="80" fg:w="1"/><text x="3.0482%" y="1375.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="2.8332%" y="1365" width="0.0350%" height="15" fill="rgb(238,131,9)" fg:x="81" fg:w="1"/><text x="3.0832%" y="1375.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.07%)</title><rect x="2.8681%" y="1365" width="0.0700%" height="15" fill="rgb(211,50,8)" fg:x="82" fg:w="2"/><text x="3.1181%" y="1375.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="2.9381%" y="1365" width="0.0350%" height="15" fill="rgb(245,182,24)" fg:x="84" fg:w="1"/><text x="3.1881%" y="1375.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="2.9731%" y="1365" width="0.0350%" height="15" fill="rgb(242,14,37)" fg:x="85" fg:w="1"/><text x="3.2231%" y="1375.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (7 samples, 0.24%)</title><rect x="3.0080%" y="1365" width="0.2448%" height="15" fill="rgb(246,228,12)" fg:x="86" fg:w="7"/><text x="3.2580%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.07%)</title><rect x="3.2529%" y="1365" width="0.0700%" height="15" fill="rgb(213,55,15)" fg:x="93" fg:w="2"/><text x="3.5029%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.07%)</title><rect x="3.2529%" y="1349" width="0.0700%" height="15" fill="rgb(209,9,3)" fg:x="93" fg:w="2"/><text x="3.5029%" y="1359.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.07%)</title><rect x="3.2529%" y="1333" width="0.0700%" height="15" fill="rgb(230,59,30)" fg:x="93" fg:w="2"/><text x="3.5029%" y="1343.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="3.3228%" y="1365" width="0.0350%" height="15" fill="rgb(209,121,21)" fg:x="95" fg:w="1"/><text x="3.5728%" y="1375.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="3.3228%" y="1349" width="0.0350%" height="15" fill="rgb(220,109,13)" fg:x="95" fg:w="1"/><text x="3.5728%" y="1359.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="3.3228%" y="1333" width="0.0350%" height="15" fill="rgb(232,18,1)" fg:x="95" fg:w="1"/><text x="3.5728%" y="1343.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="3.3228%" y="1317" width="0.0350%" height="15" fill="rgb(215,41,42)" fg:x="95" fg:w="1"/><text x="3.5728%" y="1327.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.03%)</title><rect x="3.3578%" y="1365" width="0.0350%" height="15" fill="rgb(224,123,36)" fg:x="96" fg:w="1"/><text x="3.6078%" y="1375.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.03%)</title><rect x="3.3928%" y="1365" width="0.0350%" height="15" fill="rgb(240,125,3)" fg:x="97" fg:w="1"/><text x="3.6428%" y="1375.50"></text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::ser::Serialize for mmap_payload_storage::payload::Payload&gt;::serialize (2 samples, 0.07%)</title><rect x="3.4278%" y="1365" width="0.0700%" height="15" fill="rgb(205,98,50)" fg:x="98" fg:w="2"/><text x="3.6778%" y="1375.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_newtype_struct (2 samples, 0.07%)</title><rect x="3.4278%" y="1349" width="0.0700%" height="15" fill="rgb(205,185,37)" fg:x="98" fg:w="2"/><text x="3.6778%" y="1359.50"></text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::ser::Serialize&gt;::serialize (2 samples, 0.07%)</title><rect x="3.4278%" y="1333" width="0.0700%" height="15" fill="rgb(238,207,15)" fg:x="98" fg:w="2"/><text x="3.6778%" y="1343.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (2 samples, 0.07%)</title><rect x="3.4278%" y="1317" width="0.0700%" height="15" fill="rgb(213,199,42)" fg:x="98" fg:w="2"/><text x="3.6778%" y="1327.50"></text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_key (2 samples, 0.07%)</title><rect x="3.4278%" y="1301" width="0.0700%" height="15" fill="rgb(235,201,11)" fg:x="98" fg:w="2"/><text x="3.6778%" y="1311.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (2 samples, 0.07%)</title><rect x="3.4278%" y="1285" width="0.0700%" height="15" fill="rgb(207,46,11)" fg:x="98" fg:w="2"/><text x="3.6778%" y="1295.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.07%)</title><rect x="3.4278%" y="1269" width="0.0700%" height="15" fill="rgb(241,35,35)" fg:x="98" fg:w="2"/><text x="3.6778%" y="1279.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u16 (17 samples, 0.59%)</title><rect x="3.4977%" y="1365" width="0.5946%" height="15" fill="rgb(243,32,47)" fg:x="100" fg:w="17"/><text x="3.7477%" y="1375.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (6 samples, 0.21%)</title><rect x="3.8825%" y="1349" width="0.2099%" height="15" fill="rgb(247,202,23)" fg:x="111" fg:w="6"/><text x="4.1325%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u32 (10 samples, 0.35%)</title><rect x="4.0923%" y="1365" width="0.3498%" height="15" fill="rgb(219,102,11)" fg:x="117" fg:w="10"/><text x="4.3423%" y="1375.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (4 samples, 0.14%)</title><rect x="4.3022%" y="1349" width="0.1399%" height="15" fill="rgb(243,110,44)" fg:x="123" fg:w="4"/><text x="4.5522%" y="1359.50"></text></g><g><title>serde_cbor::de::from_slice (1 samples, 0.03%)</title><rect x="4.4421%" y="1365" width="0.0350%" height="15" fill="rgb(222,74,54)" fg:x="127" fg:w="1"/><text x="4.6921%" y="1375.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (2 samples, 0.07%)</title><rect x="4.6520%" y="1317" width="0.0700%" height="15" fill="rgb(216,99,12)" fg:x="133" fg:w="2"/><text x="4.9020%" y="1327.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (10 samples, 0.35%)</title><rect x="4.4771%" y="1365" width="0.3498%" height="15" fill="rgb(226,22,26)" fg:x="128" fg:w="10"/><text x="4.7271%" y="1375.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (5 samples, 0.17%)</title><rect x="4.6520%" y="1349" width="0.1749%" height="15" fill="rgb(217,163,10)" fg:x="133" fg:w="5"/><text x="4.9020%" y="1359.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (5 samples, 0.17%)</title><rect x="4.6520%" y="1333" width="0.1749%" height="15" fill="rgb(213,25,53)" fg:x="133" fg:w="5"/><text x="4.9020%" y="1343.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (3 samples, 0.10%)</title><rect x="4.7219%" y="1317" width="0.1049%" height="15" fill="rgb(252,105,26)" fg:x="135" fg:w="3"/><text x="4.9719%" y="1327.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (3 samples, 0.10%)</title><rect x="4.7219%" y="1301" width="0.1049%" height="15" fill="rgb(220,39,43)" fg:x="135" fg:w="3"/><text x="4.9719%" y="1311.50"></text></g><g><title>[[stack]] (91 samples, 3.18%)</title><rect x="2.0287%" y="1381" width="3.1829%" height="15" fill="rgb(229,68,48)" fg:x="58" fg:w="91"/><text x="2.2787%" y="1391.50">[[s..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (11 samples, 0.38%)</title><rect x="4.8269%" y="1365" width="0.3847%" height="15" fill="rgb(252,8,32)" fg:x="138" fg:w="11"/><text x="5.0769%" y="1375.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="5.2116%" y="1365" width="0.1049%" height="15" fill="rgb(223,20,43)" fg:x="149" fg:w="3"/><text x="5.4616%" y="1375.50"></text></g><g><title>core::mem::drop (2 samples, 0.07%)</title><rect x="5.2466%" y="1349" width="0.0700%" height="15" fill="rgb(229,81,49)" fg:x="150" fg:w="2"/><text x="5.4966%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (2 samples, 0.07%)</title><rect x="5.2466%" y="1333" width="0.0700%" height="15" fill="rgb(236,28,36)" fg:x="150" fg:w="2"/><text x="5.4966%" y="1343.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="5.2466%" y="1317" width="0.0700%" height="15" fill="rgb(249,185,26)" fg:x="150" fg:w="2"/><text x="5.4966%" y="1327.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.03%)</title><rect x="5.3165%" y="1365" width="0.0350%" height="15" fill="rgb(249,174,33)" fg:x="152" fg:w="1"/><text x="5.5665%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (28 samples, 0.98%)</title><rect x="5.3515%" y="1365" width="0.9794%" height="15" fill="rgb(233,201,37)" fg:x="153" fg:w="28"/><text x="5.6015%" y="1375.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.03%)</title><rect x="6.3309%" y="1365" width="0.0350%" height="15" fill="rgb(221,78,26)" fg:x="181" fg:w="1"/><text x="6.5809%" y="1375.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="6.3659%" y="1365" width="0.0350%" height="15" fill="rgb(250,127,30)" fg:x="182" fg:w="1"/><text x="6.6159%" y="1375.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.07%)</title><rect x="6.4008%" y="1365" width="0.0700%" height="15" fill="rgb(230,49,44)" fg:x="183" fg:w="2"/><text x="6.6508%" y="1375.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="6.4708%" y="1365" width="0.0350%" height="15" fill="rgb(229,67,23)" fg:x="185" fg:w="1"/><text x="6.7208%" y="1375.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.07%)</title><rect x="6.5058%" y="1365" width="0.0700%" height="15" fill="rgb(249,83,47)" fg:x="186" fg:w="2"/><text x="6.7558%" y="1375.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="6.5757%" y="1365" width="0.0700%" height="15" fill="rgb(215,43,3)" fg:x="188" fg:w="2"/><text x="6.8257%" y="1375.50"></text></g><g><title>__spawni_child (1 samples, 0.03%)</title><rect x="6.6457%" y="1365" width="0.0350%" height="15" fill="rgb(238,154,13)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1375.50"></text></g><g><title>__execvpex (1 samples, 0.03%)</title><rect x="6.6457%" y="1349" width="0.0350%" height="15" fill="rgb(219,56,2)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1359.50"></text></g><g><title>__execvpe_common (1 samples, 0.03%)</title><rect x="6.6457%" y="1333" width="0.0350%" height="15" fill="rgb(233,0,4)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1343.50"></text></g><g><title>__GI_execve (1 samples, 0.03%)</title><rect x="6.6457%" y="1317" width="0.0350%" height="15" fill="rgb(235,30,7)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1327.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="6.6457%" y="1301" width="0.0350%" height="15" fill="rgb(250,79,13)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1311.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="6.6457%" y="1285" width="0.0350%" height="15" fill="rgb(211,146,34)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1295.50"></text></g><g><title>x64_sys_call (1 samples, 0.03%)</title><rect x="6.6457%" y="1269" width="0.0350%" height="15" fill="rgb(228,22,38)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1279.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="6.6457%" y="1253" width="0.0350%" height="15" fill="rgb(235,168,5)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1263.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="6.6457%" y="1237" width="0.0350%" height="15" fill="rgb(221,155,16)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1247.50"></text></g><g><title>alloc_bprm (1 samples, 0.03%)</title><rect x="6.6457%" y="1221" width="0.0350%" height="15" fill="rgb(215,215,53)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1231.50"></text></g><g><title>do_open_execat (1 samples, 0.03%)</title><rect x="6.6457%" y="1205" width="0.0350%" height="15" fill="rgb(223,4,10)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1215.50"></text></g><g><title>do_filp_open (1 samples, 0.03%)</title><rect x="6.6457%" y="1189" width="0.0350%" height="15" fill="rgb(234,103,6)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1199.50"></text></g><g><title>path_openat (1 samples, 0.03%)</title><rect x="6.6457%" y="1173" width="0.0350%" height="15" fill="rgb(227,97,0)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1183.50"></text></g><g><title>link_path_walk.part.0.constprop.0 (1 samples, 0.03%)</title><rect x="6.6457%" y="1157" width="0.0350%" height="15" fill="rgb(234,150,53)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1167.50"></text></g><g><title>walk_component (1 samples, 0.03%)</title><rect x="6.6457%" y="1141" width="0.0350%" height="15" fill="rgb(228,201,54)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1151.50"></text></g><g><title>__lookup_slow (1 samples, 0.03%)</title><rect x="6.6457%" y="1125" width="0.0350%" height="15" fill="rgb(222,22,37)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1135.50"></text></g><g><title>ext4_lookup (1 samples, 0.03%)</title><rect x="6.6457%" y="1109" width="0.0350%" height="15" fill="rgb(237,53,32)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1119.50"></text></g><g><title>__ext4_find_entry (1 samples, 0.03%)</title><rect x="6.6457%" y="1093" width="0.0350%" height="15" fill="rgb(233,25,53)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1103.50"></text></g><g><title>ext4_bread_batch (1 samples, 0.03%)</title><rect x="6.6457%" y="1077" width="0.0350%" height="15" fill="rgb(210,40,34)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1087.50"></text></g><g><title>ext4_read_bh_lock (1 samples, 0.03%)</title><rect x="6.6457%" y="1061" width="0.0350%" height="15" fill="rgb(241,220,44)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1071.50"></text></g><g><title>ext4_read_bh_nowait (1 samples, 0.03%)</title><rect x="6.6457%" y="1045" width="0.0350%" height="15" fill="rgb(235,28,35)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1055.50"></text></g><g><title>submit_bh (1 samples, 0.03%)</title><rect x="6.6457%" y="1029" width="0.0350%" height="15" fill="rgb(210,56,17)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1039.50"></text></g><g><title>submit_bh_wbc (1 samples, 0.03%)</title><rect x="6.6457%" y="1013" width="0.0350%" height="15" fill="rgb(224,130,29)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1023.50"></text></g><g><title>submit_bio (1 samples, 0.03%)</title><rect x="6.6457%" y="997" width="0.0350%" height="15" fill="rgb(235,212,8)" fg:x="190" fg:w="1"/><text x="6.8957%" y="1007.50"></text></g><g><title>submit_bio_noacct (1 samples, 0.03%)</title><rect x="6.6457%" y="981" width="0.0350%" height="15" fill="rgb(223,33,50)" fg:x="190" fg:w="1"/><text x="6.8957%" y="991.50"></text></g><g><title>submit_bio_noacct_nocheck (1 samples, 0.03%)</title><rect x="6.6457%" y="965" width="0.0350%" height="15" fill="rgb(219,149,13)" fg:x="190" fg:w="1"/><text x="6.8957%" y="975.50"></text></g><g><title>__submit_bio_noacct (1 samples, 0.03%)</title><rect x="6.6457%" y="949" width="0.0350%" height="15" fill="rgb(250,156,29)" fg:x="190" fg:w="1"/><text x="6.8957%" y="959.50"></text></g><g><title>__submit_bio (1 samples, 0.03%)</title><rect x="6.6457%" y="933" width="0.0350%" height="15" fill="rgb(216,193,19)" fg:x="190" fg:w="1"/><text x="6.8957%" y="943.50"></text></g><g><title>blk_mq_submit_bio (1 samples, 0.03%)</title><rect x="6.6457%" y="917" width="0.0350%" height="15" fill="rgb(216,135,14)" fg:x="190" fg:w="1"/><text x="6.8957%" y="927.50"></text></g><g><title>__bio_split_to_limits (1 samples, 0.03%)</title><rect x="6.6457%" y="901" width="0.0350%" height="15" fill="rgb(241,47,5)" fg:x="190" fg:w="1"/><text x="6.8957%" y="911.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (7 samples, 0.24%)</title><rect x="6.6807%" y="1365" width="0.2448%" height="15" fill="rgb(233,42,35)" fg:x="191" fg:w="7"/><text x="6.9307%" y="1375.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (4 samples, 0.14%)</title><rect x="6.7856%" y="1349" width="0.1399%" height="15" fill="rgb(231,13,6)" fg:x="194" fg:w="4"/><text x="7.0356%" y="1359.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.14%)</title><rect x="6.7856%" y="1333" width="0.1399%" height="15" fill="rgb(207,181,40)" fg:x="194" fg:w="4"/><text x="7.0356%" y="1343.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (4 samples, 0.14%)</title><rect x="6.7856%" y="1317" width="0.1399%" height="15" fill="rgb(254,173,49)" fg:x="194" fg:w="4"/><text x="7.0356%" y="1327.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.14%)</title><rect x="6.7856%" y="1301" width="0.1399%" height="15" fill="rgb(221,1,38)" fg:x="194" fg:w="4"/><text x="7.0356%" y="1311.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (4 samples, 0.14%)</title><rect x="6.7856%" y="1285" width="0.1399%" height="15" fill="rgb(206,124,46)" fg:x="194" fg:w="4"/><text x="7.0356%" y="1295.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.14%)</title><rect x="6.7856%" y="1269" width="0.1399%" height="15" fill="rgb(249,21,11)" fg:x="194" fg:w="4"/><text x="7.0356%" y="1279.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (4 samples, 0.14%)</title><rect x="6.7856%" y="1253" width="0.1399%" height="15" fill="rgb(222,201,40)" fg:x="194" fg:w="4"/><text x="7.0356%" y="1263.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (4 samples, 0.14%)</title><rect x="6.7856%" y="1237" width="0.1399%" height="15" fill="rgb(235,61,29)" fg:x="194" fg:w="4"/><text x="7.0356%" y="1247.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (4 samples, 0.14%)</title><rect x="6.9255%" y="1365" width="0.1399%" height="15" fill="rgb(219,207,3)" fg:x="198" fg:w="4"/><text x="7.1755%" y="1375.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (1 samples, 0.03%)</title><rect x="7.0304%" y="1349" width="0.0350%" height="15" fill="rgb(222,56,46)" fg:x="201" fg:w="1"/><text x="7.2804%" y="1359.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (1 samples, 0.03%)</title><rect x="7.0304%" y="1333" width="0.0350%" height="15" fill="rgb(239,76,54)" fg:x="201" fg:w="1"/><text x="7.2804%" y="1343.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (1 samples, 0.03%)</title><rect x="7.0304%" y="1317" width="0.0350%" height="15" fill="rgb(231,124,27)" fg:x="201" fg:w="1"/><text x="7.2804%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="7.0304%" y="1301" width="0.0350%" height="15" fill="rgb(249,195,6)" fg:x="201" fg:w="1"/><text x="7.2804%" y="1311.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="7.0304%" y="1285" width="0.0350%" height="15" fill="rgb(237,174,47)" fg:x="201" fg:w="1"/><text x="7.2804%" y="1295.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="7.0654%" y="1365" width="0.0350%" height="15" fill="rgb(206,201,31)" fg:x="202" fg:w="1"/><text x="7.3154%" y="1375.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (5 samples, 0.17%)</title><rect x="7.1004%" y="1365" width="0.1749%" height="15" fill="rgb(231,57,52)" fg:x="203" fg:w="5"/><text x="7.3504%" y="1375.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert::_{{closure}} (1 samples, 0.03%)</title><rect x="7.2403%" y="1349" width="0.0350%" height="15" fill="rgb(248,177,22)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1359.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (1 samples, 0.03%)</title><rect x="7.2403%" y="1333" width="0.0350%" height="15" fill="rgb(215,211,37)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1343.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (1 samples, 0.03%)</title><rect x="7.2403%" y="1317" width="0.0350%" height="15" fill="rgb(241,128,51)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1327.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.03%)</title><rect x="7.2403%" y="1301" width="0.0350%" height="15" fill="rgb(227,165,31)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1311.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (1 samples, 0.03%)</title><rect x="7.2403%" y="1285" width="0.0350%" height="15" fill="rgb(228,167,24)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1295.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (1 samples, 0.03%)</title><rect x="7.2403%" y="1269" width="0.0350%" height="15" fill="rgb(228,143,12)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1279.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (1 samples, 0.03%)</title><rect x="7.2403%" y="1253" width="0.0350%" height="15" fill="rgb(249,149,8)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1263.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (1 samples, 0.03%)</title><rect x="7.2403%" y="1237" width="0.0350%" height="15" fill="rgb(243,35,44)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1247.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.03%)</title><rect x="7.2403%" y="1221" width="0.0350%" height="15" fill="rgb(246,89,9)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1231.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.03%)</title><rect x="7.2403%" y="1205" width="0.0350%" height="15" fill="rgb(233,213,13)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1215.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="7.2403%" y="1189" width="0.0350%" height="15" fill="rgb(233,141,41)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1199.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="7.2403%" y="1173" width="0.0350%" height="15" fill="rgb(239,167,4)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1183.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="7.2403%" y="1157" width="0.0350%" height="15" fill="rgb(209,217,16)" fg:x="207" fg:w="1"/><text x="7.4903%" y="1167.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (3 samples, 0.10%)</title><rect x="7.2753%" y="1365" width="0.1049%" height="15" fill="rgb(219,88,35)" fg:x="208" fg:w="3"/><text x="7.5253%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.10%)</title><rect x="7.3802%" y="1365" width="0.1049%" height="15" fill="rgb(220,193,23)" fg:x="211" fg:w="3"/><text x="7.6302%" y="1375.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="7.4502%" y="1349" width="0.0350%" height="15" fill="rgb(230,90,52)" fg:x="213" fg:w="1"/><text x="7.7002%" y="1359.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="7.4502%" y="1333" width="0.0350%" height="15" fill="rgb(252,106,19)" fg:x="213" fg:w="1"/><text x="7.7002%" y="1343.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.21%)</title><rect x="7.4851%" y="1365" width="0.2099%" height="15" fill="rgb(206,74,20)" fg:x="214" fg:w="6"/><text x="7.7351%" y="1375.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.03%)</title><rect x="7.6950%" y="1365" width="0.0350%" height="15" fill="rgb(230,138,44)" fg:x="220" fg:w="1"/><text x="7.9450%" y="1375.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.03%)</title><rect x="7.7300%" y="1365" width="0.0350%" height="15" fill="rgb(235,182,43)" fg:x="221" fg:w="1"/><text x="7.9800%" y="1375.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (2 samples, 0.07%)</title><rect x="7.7650%" y="1333" width="0.0700%" height="15" fill="rgb(242,16,51)" fg:x="222" fg:w="2"/><text x="8.0150%" y="1343.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.07%)</title><rect x="7.7650%" y="1317" width="0.0700%" height="15" fill="rgb(248,9,4)" fg:x="222" fg:w="2"/><text x="8.0150%" y="1327.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="7.8349%" y="1205" width="0.0700%" height="15" fill="rgb(210,31,22)" fg:x="224" fg:w="2"/><text x="8.0849%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.07%)</title><rect x="7.8349%" y="1189" width="0.0700%" height="15" fill="rgb(239,54,39)" fg:x="224" fg:w="2"/><text x="8.0849%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (2 samples, 0.07%)</title><rect x="7.8349%" y="1173" width="0.0700%" height="15" fill="rgb(230,99,41)" fg:x="224" fg:w="2"/><text x="8.0849%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="7.8349%" y="1157" width="0.0700%" height="15" fill="rgb(253,106,12)" fg:x="224" fg:w="2"/><text x="8.0849%" y="1167.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="7.8349%" y="1141" width="0.0700%" height="15" fill="rgb(213,46,41)" fg:x="224" fg:w="2"/><text x="8.0849%" y="1151.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="7.8349%" y="1125" width="0.0700%" height="15" fill="rgb(215,133,35)" fg:x="224" fg:w="2"/><text x="8.0849%" y="1135.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (4 samples, 0.14%)</title><rect x="7.8349%" y="1333" width="0.1399%" height="15" fill="rgb(213,28,5)" fg:x="224" fg:w="4"/><text x="8.0849%" y="1343.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (4 samples, 0.14%)</title><rect x="7.8349%" y="1317" width="0.1399%" height="15" fill="rgb(215,77,49)" fg:x="224" fg:w="4"/><text x="8.0849%" y="1327.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (4 samples, 0.14%)</title><rect x="7.8349%" y="1301" width="0.1399%" height="15" fill="rgb(248,100,22)" fg:x="224" fg:w="4"/><text x="8.0849%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (4 samples, 0.14%)</title><rect x="7.8349%" y="1285" width="0.1399%" height="15" fill="rgb(208,67,9)" fg:x="224" fg:w="4"/><text x="8.0849%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (4 samples, 0.14%)</title><rect x="7.8349%" y="1269" width="0.1399%" height="15" fill="rgb(219,133,21)" fg:x="224" fg:w="4"/><text x="8.0849%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.14%)</title><rect x="7.8349%" y="1253" width="0.1399%" height="15" fill="rgb(246,46,29)" fg:x="224" fg:w="4"/><text x="8.0849%" y="1263.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.14%)</title><rect x="7.8349%" y="1237" width="0.1399%" height="15" fill="rgb(246,185,52)" fg:x="224" fg:w="4"/><text x="8.0849%" y="1247.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.14%)</title><rect x="7.8349%" y="1221" width="0.1399%" height="15" fill="rgb(252,136,11)" fg:x="224" fg:w="4"/><text x="8.0849%" y="1231.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.07%)</title><rect x="7.9049%" y="1205" width="0.0700%" height="15" fill="rgb(219,138,53)" fg:x="226" fg:w="2"/><text x="8.1549%" y="1215.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="7.9049%" y="1189" width="0.0700%" height="15" fill="rgb(211,51,23)" fg:x="226" fg:w="2"/><text x="8.1549%" y="1199.50"></text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (9 samples, 0.31%)</title><rect x="7.7650%" y="1365" width="0.3148%" height="15" fill="rgb(247,221,28)" fg:x="222" fg:w="9"/><text x="8.0150%" y="1375.50"></text></g><g><title>storage_bench::real_data_data_bench::_{{closure}}::_{{closure}} (9 samples, 0.31%)</title><rect x="7.7650%" y="1349" width="0.3148%" height="15" fill="rgb(251,222,45)" fg:x="222" fg:w="9"/><text x="8.0150%" y="1359.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (3 samples, 0.10%)</title><rect x="7.9748%" y="1333" width="0.1049%" height="15" fill="rgb(217,162,53)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1343.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (3 samples, 0.10%)</title><rect x="7.9748%" y="1317" width="0.1049%" height="15" fill="rgb(229,93,14)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1327.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (3 samples, 0.10%)</title><rect x="7.9748%" y="1301" width="0.1049%" height="15" fill="rgb(209,67,49)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1311.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.10%)</title><rect x="7.9748%" y="1285" width="0.1049%" height="15" fill="rgb(213,87,29)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1295.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.10%)</title><rect x="7.9748%" y="1269" width="0.1049%" height="15" fill="rgb(205,151,52)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1279.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.10%)</title><rect x="7.9748%" y="1253" width="0.1049%" height="15" fill="rgb(253,215,39)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1263.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (3 samples, 0.10%)</title><rect x="7.9748%" y="1237" width="0.1049%" height="15" fill="rgb(221,220,41)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1247.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.10%)</title><rect x="7.9748%" y="1221" width="0.1049%" height="15" fill="rgb(218,133,21)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1231.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.10%)</title><rect x="7.9748%" y="1205" width="0.1049%" height="15" fill="rgb(221,193,43)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1215.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.10%)</title><rect x="7.9748%" y="1189" width="0.1049%" height="15" fill="rgb(240,128,52)" fg:x="228" fg:w="3"/><text x="8.2248%" y="1199.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (2 samples, 0.07%)</title><rect x="8.0797%" y="1365" width="0.0700%" height="15" fill="rgb(253,114,12)" fg:x="231" fg:w="2"/><text x="8.3297%" y="1375.50"></text></g><g><title>mmap_payload_storage::payload::Payload::to_bytes (1 samples, 0.03%)</title><rect x="8.1497%" y="1365" width="0.0350%" height="15" fill="rgb(215,223,47)" fg:x="233" fg:w="1"/><text x="8.3997%" y="1375.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_payload (2 samples, 0.07%)</title><rect x="8.1847%" y="1365" width="0.0700%" height="15" fill="rgb(248,225,23)" fg:x="234" fg:w="2"/><text x="8.4347%" y="1375.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="8.2197%" y="1349" width="0.0350%" height="15" fill="rgb(250,108,0)" fg:x="235" fg:w="1"/><text x="8.4697%" y="1359.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="8.2197%" y="1333" width="0.0350%" height="15" fill="rgb(228,208,7)" fg:x="235" fg:w="1"/><text x="8.4697%" y="1343.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="8.2197%" y="1317" width="0.0350%" height="15" fill="rgb(244,45,10)" fg:x="235" fg:w="1"/><text x="8.4697%" y="1327.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="8.2197%" y="1301" width="0.0350%" height="15" fill="rgb(207,125,25)" fg:x="235" fg:w="1"/><text x="8.4697%" y="1311.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="8.2197%" y="1285" width="0.0350%" height="15" fill="rgb(210,195,18)" fg:x="235" fg:w="1"/><text x="8.4697%" y="1295.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (1 samples, 0.03%)</title><rect x="8.5694%" y="1349" width="0.0350%" height="15" fill="rgb(249,80,12)" fg:x="245" fg:w="1"/><text x="8.8194%" y="1359.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.03%)</title><rect x="8.6044%" y="1333" width="0.0350%" height="15" fill="rgb(221,65,9)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1343.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (1 samples, 0.03%)</title><rect x="8.6044%" y="1317" width="0.0350%" height="15" fill="rgb(235,49,36)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1327.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.03%)</title><rect x="8.6044%" y="1301" width="0.0350%" height="15" fill="rgb(225,32,20)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.03%)</title><rect x="8.6044%" y="1285" width="0.0350%" height="15" fill="rgb(215,141,46)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="8.6044%" y="1269" width="0.0350%" height="15" fill="rgb(250,160,47)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1279.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="8.6044%" y="1253" width="0.0350%" height="15" fill="rgb(216,222,40)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1263.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="8.6044%" y="1237" width="0.0350%" height="15" fill="rgb(234,217,39)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1247.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="8.6044%" y="1221" width="0.0350%" height="15" fill="rgb(207,178,40)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1231.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="8.6044%" y="1205" width="0.0350%" height="15" fill="rgb(221,136,13)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="8.6044%" y="1189" width="0.0350%" height="15" fill="rgb(249,199,10)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1199.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="8.6044%" y="1173" width="0.0350%" height="15" fill="rgb(249,222,13)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1183.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="8.6044%" y="1157" width="0.0350%" height="15" fill="rgb(244,185,38)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1167.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="8.6044%" y="1141" width="0.0350%" height="15" fill="rgb(236,202,9)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1151.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="8.6044%" y="1125" width="0.0350%" height="15" fill="rgb(250,229,37)" fg:x="246" fg:w="1"/><text x="8.8544%" y="1135.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (2 samples, 0.07%)</title><rect x="8.6044%" y="1349" width="0.0700%" height="15" fill="rgb(206,174,23)" fg:x="246" fg:w="2"/><text x="8.8544%" y="1359.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::Visitor&gt;::visit_str (1 samples, 0.03%)</title><rect x="8.6394%" y="1333" width="0.0350%" height="15" fill="rgb(211,33,43)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1343.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (1 samples, 0.03%)</title><rect x="8.6394%" y="1317" width="0.0350%" height="15" fill="rgb(245,58,50)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1327.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (1 samples, 0.03%)</title><rect x="8.6394%" y="1301" width="0.0350%" height="15" fill="rgb(244,68,36)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1311.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.03%)</title><rect x="8.6394%" y="1285" width="0.0350%" height="15" fill="rgb(232,229,15)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1295.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="8.6394%" y="1269" width="0.0350%" height="15" fill="rgb(254,30,23)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1279.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="8.6394%" y="1253" width="0.0350%" height="15" fill="rgb(235,160,14)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1263.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="8.6394%" y="1237" width="0.0350%" height="15" fill="rgb(212,155,44)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1247.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="8.6394%" y="1221" width="0.0350%" height="15" fill="rgb(226,2,50)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1231.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="8.6394%" y="1205" width="0.0350%" height="15" fill="rgb(234,177,6)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1215.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="8.6394%" y="1189" width="0.0350%" height="15" fill="rgb(217,24,9)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1199.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="8.6394%" y="1173" width="0.0350%" height="15" fill="rgb(220,13,46)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1183.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="8.6394%" y="1157" width="0.0350%" height="15" fill="rgb(239,221,27)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1167.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="8.6394%" y="1141" width="0.0350%" height="15" fill="rgb(222,198,25)" fg:x="247" fg:w="1"/><text x="8.8894%" y="1151.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (14 samples, 0.49%)</title><rect x="8.2546%" y="1365" width="0.4897%" height="15" fill="rgb(211,99,13)" fg:x="236" fg:w="14"/><text x="8.5046%" y="1375.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (2 samples, 0.07%)</title><rect x="8.6744%" y="1349" width="0.0700%" height="15" fill="rgb(232,111,31)" fg:x="248" fg:w="2"/><text x="8.9244%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u16 (1 samples, 0.03%)</title><rect x="8.7443%" y="1365" width="0.0350%" height="15" fill="rgb(245,82,37)" fg:x="250" fg:w="1"/><text x="8.9943%" y="1375.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u32 (2 samples, 0.07%)</title><rect x="8.7793%" y="1365" width="0.0700%" height="15" fill="rgb(227,149,46)" fg:x="251" fg:w="2"/><text x="9.0293%" y="1375.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (11 samples, 0.38%)</title><rect x="8.8492%" y="1365" width="0.3847%" height="15" fill="rgb(218,36,50)" fg:x="253" fg:w="11"/><text x="9.0992%" y="1375.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (5 samples, 0.17%)</title><rect x="9.0591%" y="1349" width="0.1749%" height="15" fill="rgb(226,80,48)" fg:x="259" fg:w="5"/><text x="9.3091%" y="1359.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (5 samples, 0.17%)</title><rect x="9.0591%" y="1333" width="0.1749%" height="15" fill="rgb(238,224,15)" fg:x="259" fg:w="5"/><text x="9.3091%" y="1343.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (5 samples, 0.17%)</title><rect x="9.0591%" y="1317" width="0.1749%" height="15" fill="rgb(241,136,10)" fg:x="259" fg:w="5"/><text x="9.3091%" y="1327.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (6 samples, 0.21%)</title><rect x="9.2340%" y="1365" width="0.2099%" height="15" fill="rgb(208,32,45)" fg:x="264" fg:w="6"/><text x="9.4840%" y="1375.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_array::_{{closure}} (6 samples, 0.21%)</title><rect x="9.2340%" y="1349" width="0.2099%" height="15" fill="rgb(207,135,9)" fg:x="264" fg:w="6"/><text x="9.4840%" y="1359.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (6 samples, 0.21%)</title><rect x="9.2340%" y="1333" width="0.2099%" height="15" fill="rgb(206,86,44)" fg:x="264" fg:w="6"/><text x="9.4840%" y="1343.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.21%)</title><rect x="9.2340%" y="1317" width="0.2099%" height="15" fill="rgb(245,177,15)" fg:x="264" fg:w="6"/><text x="9.4840%" y="1327.50"></text></g><g><title>&lt;serde_cbor::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.21%)</title><rect x="9.2340%" y="1301" width="0.2099%" height="15" fill="rgb(206,64,50)" fg:x="264" fg:w="6"/><text x="9.4840%" y="1311.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.21%)</title><rect x="9.2340%" y="1285" width="0.2099%" height="15" fill="rgb(234,36,40)" fg:x="264" fg:w="6"/><text x="9.4840%" y="1295.50"></text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (6 samples, 0.21%)</title><rect x="9.2340%" y="1269" width="0.2099%" height="15" fill="rgb(213,64,8)" fg:x="264" fg:w="6"/><text x="9.4840%" y="1279.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (6 samples, 0.21%)</title><rect x="9.2340%" y="1253" width="0.2099%" height="15" fill="rgb(210,75,36)" fg:x="264" fg:w="6"/><text x="9.4840%" y="1263.50"></text></g><g><title>serde_cbor::de::from_slice (1 samples, 0.03%)</title><rect x="9.4439%" y="1365" width="0.0350%" height="15" fill="rgb(229,88,21)" fg:x="270" fg:w="1"/><text x="9.6939%" y="1375.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (14 samples, 0.49%)</title><rect x="9.4788%" y="1365" width="0.4897%" height="15" fill="rgb(252,204,47)" fg:x="271" fg:w="14"/><text x="9.7288%" y="1375.50"></text></g><g><title>[unknown] (146 samples, 5.11%)</title><rect x="5.2116%" y="1381" width="5.1067%" height="15" fill="rgb(208,77,27)" fg:x="149" fg:w="146"/><text x="5.4616%" y="1391.50">[unkno..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (10 samples, 0.35%)</title><rect x="9.9685%" y="1365" width="0.3498%" height="15" fill="rgb(221,76,26)" fg:x="285" fg:w="10"/><text x="10.2185%" y="1375.50"></text></g><g><title>&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (6 samples, 0.21%)</title><rect x="10.1084%" y="1349" width="0.2099%" height="15" fill="rgb(225,139,18)" fg:x="289" fg:w="6"/><text x="10.3584%" y="1359.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="10.3183%" y="1381" width="0.0350%" height="15" fill="rgb(230,137,11)" fg:x="295" fg:w="1"/><text x="10.5683%" y="1391.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="10.3533%" y="1381" width="0.0350%" height="15" fill="rgb(212,28,1)" fg:x="296" fg:w="1"/><text x="10.6033%" y="1391.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="10.3882%" y="1381" width="0.0350%" height="15" fill="rgb(248,164,17)" fg:x="297" fg:w="1"/><text x="10.6382%" y="1391.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="10.3882%" y="1365" width="0.0350%" height="15" fill="rgb(222,171,42)" fg:x="297" fg:w="1"/><text x="10.6382%" y="1375.50"></text></g><g><title>&lt;criterion::Criterion as core::default::Default&gt;::default (1 samples, 0.03%)</title><rect x="10.4232%" y="1093" width="0.0350%" height="15" fill="rgb(243,84,45)" fg:x="298" fg:w="1"/><text x="10.6732%" y="1103.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="10.4232%" y="1077" width="0.0350%" height="15" fill="rgb(252,49,23)" fg:x="298" fg:w="1"/><text x="10.6732%" y="1087.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (1 samples, 0.03%)</title><rect x="10.4232%" y="1061" width="0.0350%" height="15" fill="rgb(215,19,7)" fg:x="298" fg:w="1"/><text x="10.6732%" y="1071.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.03%)</title><rect x="10.4232%" y="1045" width="0.0350%" height="15" fill="rgb(238,81,41)" fg:x="298" fg:w="1"/><text x="10.6732%" y="1055.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.03%)</title><rect x="10.4232%" y="1029" width="0.0350%" height="15" fill="rgb(210,199,37)" fg:x="298" fg:w="1"/><text x="10.6732%" y="1039.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.03%)</title><rect x="10.4232%" y="1013" width="0.0350%" height="15" fill="rgb(244,192,49)" fg:x="298" fg:w="1"/><text x="10.6732%" y="1023.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.03%)</title><rect x="10.4232%" y="997" width="0.0350%" height="15" fill="rgb(226,211,11)" fg:x="298" fg:w="1"/><text x="10.6732%" y="1007.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.03%)</title><rect x="10.4232%" y="981" width="0.0350%" height="15" fill="rgb(236,162,54)" fg:x="298" fg:w="1"/><text x="10.6732%" y="991.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.03%)</title><rect x="10.4232%" y="965" width="0.0350%" height="15" fill="rgb(220,229,9)" fg:x="298" fg:w="1"/><text x="10.6732%" y="975.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (1 samples, 0.03%)</title><rect x="10.4232%" y="949" width="0.0350%" height="15" fill="rgb(250,87,22)" fg:x="298" fg:w="1"/><text x="10.6732%" y="959.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}} (1 samples, 0.03%)</title><rect x="10.4232%" y="933" width="0.0350%" height="15" fill="rgb(239,43,17)" fg:x="298" fg:w="1"/><text x="10.6732%" y="943.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="10.4232%" y="917" width="0.0350%" height="15" fill="rgb(231,177,25)" fg:x="298" fg:w="1"/><text x="10.6732%" y="927.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="10.4232%" y="901" width="0.0350%" height="15" fill="rgb(219,179,1)" fg:x="298" fg:w="1"/><text x="10.6732%" y="911.50"></text></g><g><title>criterion::DEFAULT_PLOTTING_BACKEND::_{{closure}} (1 samples, 0.03%)</title><rect x="10.4232%" y="885" width="0.0350%" height="15" fill="rgb(238,219,53)" fg:x="298" fg:w="1"/><text x="10.6732%" y="895.50"></text></g><g><title>&lt;once_cell::sync::Lazy&lt;T,F&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="10.4232%" y="869" width="0.0350%" height="15" fill="rgb(232,167,36)" fg:x="298" fg:w="1"/><text x="10.6732%" y="879.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force (1 samples, 0.03%)</title><rect x="10.4232%" y="853" width="0.0350%" height="15" fill="rgb(244,19,51)" fg:x="298" fg:w="1"/><text x="10.6732%" y="863.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init (1 samples, 0.03%)</title><rect x="10.4232%" y="837" width="0.0350%" height="15" fill="rgb(224,6,22)" fg:x="298" fg:w="1"/><text x="10.6732%" y="847.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_try_init (1 samples, 0.03%)</title><rect x="10.4232%" y="821" width="0.0350%" height="15" fill="rgb(224,145,5)" fg:x="298" fg:w="1"/><text x="10.6732%" y="831.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize (1 samples, 0.03%)</title><rect x="10.4232%" y="805" width="0.0350%" height="15" fill="rgb(234,130,49)" fg:x="298" fg:w="1"/><text x="10.6732%" y="815.50"></text></g><g><title>once_cell::imp::initialize_or_wait (1 samples, 0.03%)</title><rect x="10.4232%" y="789" width="0.0350%" height="15" fill="rgb(254,6,2)" fg:x="298" fg:w="1"/><text x="10.6732%" y="799.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.03%)</title><rect x="10.4232%" y="773" width="0.0350%" height="15" fill="rgb(208,96,46)" fg:x="298" fg:w="1"/><text x="10.6732%" y="783.50"></text></g><g><title>once_cell::imp::OnceCell&lt;T&gt;::initialize::_{{closure}} (1 samples, 0.03%)</title><rect x="10.4232%" y="757" width="0.0350%" height="15" fill="rgb(239,3,39)" fg:x="298" fg:w="1"/><text x="10.6732%" y="767.50"></text></g><g><title>once_cell::sync::OnceCell&lt;T&gt;::get_or_init::_{{closure}} (1 samples, 0.03%)</title><rect x="10.4232%" y="741" width="0.0350%" height="15" fill="rgb(233,210,1)" fg:x="298" fg:w="1"/><text x="10.6732%" y="751.50"></text></g><g><title>once_cell::sync::Lazy&lt;T,F&gt;::force::_{{closure}} (1 samples, 0.03%)</title><rect x="10.4232%" y="725" width="0.0350%" height="15" fill="rgb(244,137,37)" fg:x="298" fg:w="1"/><text x="10.6732%" y="735.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="10.4232%" y="709" width="0.0350%" height="15" fill="rgb(240,136,2)" fg:x="298" fg:w="1"/><text x="10.6732%" y="719.50"></text></g><g><title>criterion_plot::version (1 samples, 0.03%)</title><rect x="10.4232%" y="693" width="0.0350%" height="15" fill="rgb(239,18,37)" fg:x="298" fg:w="1"/><text x="10.6732%" y="703.50"></text></g><g><title>std::process::Command::output (1 samples, 0.03%)</title><rect x="10.4232%" y="677" width="0.0350%" height="15" fill="rgb(218,185,22)" fg:x="298" fg:w="1"/><text x="10.6732%" y="687.50"></text></g><g><title>std::sys::pal::unix::process::process_inner::&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::output (1 samples, 0.03%)</title><rect x="10.4232%" y="661" width="0.0350%" height="15" fill="rgb(225,218,4)" fg:x="298" fg:w="1"/><text x="10.6732%" y="671.50"></text></g><g><title>std::sys::pal::unix::process::process_inner::&lt;impl std::sys::pal::unix::process::process_common::Command&gt;::spawn (1 samples, 0.03%)</title><rect x="10.4232%" y="645" width="0.0350%" height="15" fill="rgb(230,182,32)" fg:x="298" fg:w="1"/><text x="10.6732%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::process::process_common::ChildPipes&gt; (1 samples, 0.03%)</title><rect x="10.4232%" y="629" width="0.0350%" height="15" fill="rgb(242,56,43)" fg:x="298" fg:w="1"/><text x="10.6732%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::process::process_common::ChildStdio&gt; (1 samples, 0.03%)</title><rect x="10.4232%" y="613" width="0.0350%" height="15" fill="rgb(233,99,24)" fg:x="298" fg:w="1"/><text x="10.6732%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::pal::unix::fd::FileDesc&gt; (1 samples, 0.03%)</title><rect x="10.4232%" y="597" width="0.0350%" height="15" fill="rgb(234,209,42)" fg:x="298" fg:w="1"/><text x="10.6732%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::os::fd::owned::OwnedFd&gt; (1 samples, 0.03%)</title><rect x="10.4232%" y="581" width="0.0350%" height="15" fill="rgb(227,7,12)" fg:x="298" fg:w="1"/><text x="10.6732%" y="591.50"></text></g><g><title>&lt;std::os::fd::owned::OwnedFd as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="10.4232%" y="565" width="0.0350%" height="15" fill="rgb(245,203,43)" fg:x="298" fg:w="1"/><text x="10.6732%" y="575.50"></text></g><g><title>__GI___close (1 samples, 0.03%)</title><rect x="10.4232%" y="549" width="0.0350%" height="15" fill="rgb(238,205,33)" fg:x="298" fg:w="1"/><text x="10.6732%" y="559.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="10.4232%" y="533" width="0.0350%" height="15" fill="rgb(231,56,7)" fg:x="298" fg:w="1"/><text x="10.6732%" y="543.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="10.4232%" y="517" width="0.0350%" height="15" fill="rgb(244,186,29)" fg:x="298" fg:w="1"/><text x="10.6732%" y="527.50"></text></g><g><title>x64_sys_call (1 samples, 0.03%)</title><rect x="10.4232%" y="501" width="0.0350%" height="15" fill="rgb(234,111,31)" fg:x="298" fg:w="1"/><text x="10.6732%" y="511.50"></text></g><g><title>__x64_sys_close (1 samples, 0.03%)</title><rect x="10.4232%" y="485" width="0.0350%" height="15" fill="rgb(241,149,10)" fg:x="298" fg:w="1"/><text x="10.6732%" y="495.50"></text></g><g><title>_compound_head (3 samples, 0.10%)</title><rect x="10.4582%" y="661" width="0.1049%" height="15" fill="rgb(249,206,44)" fg:x="299" fg:w="3"/><text x="10.7082%" y="671.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="10.5631%" y="613" width="0.0350%" height="15" fill="rgb(251,153,30)" fg:x="302" fg:w="1"/><text x="10.8131%" y="623.50"></text></g><g><title>folio_mark_dirty (3 samples, 0.10%)</title><rect x="10.5631%" y="645" width="0.1049%" height="15" fill="rgb(239,152,38)" fg:x="302" fg:w="3"/><text x="10.8131%" y="655.50"></text></g><g><title>ext4_dirty_folio (3 samples, 0.10%)</title><rect x="10.5631%" y="629" width="0.1049%" height="15" fill="rgb(249,139,47)" fg:x="302" fg:w="3"/><text x="10.8131%" y="639.50"></text></g><g><title>block_dirty_folio (2 samples, 0.07%)</title><rect x="10.5981%" y="613" width="0.0700%" height="15" fill="rgb(244,64,35)" fg:x="303" fg:w="2"/><text x="10.8481%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload_storage::PayloadStorage&gt; (8 samples, 0.28%)</title><rect x="10.4582%" y="1077" width="0.2798%" height="15" fill="rgb(216,46,15)" fg:x="299" fg:w="8"/><text x="10.7082%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,mmap_payload_storage::slotted_page::SlottedPageMmap&gt;&gt; (8 samples, 0.28%)</title><rect x="10.4582%" y="1061" width="0.2798%" height="15" fill="rgb(250,74,19)" fg:x="299" fg:w="8"/><text x="10.7082%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,mmap_payload_storage::slotted_page::SlottedPageMmap,std::hash::random::RandomState&gt;&gt; (8 samples, 0.28%)</title><rect x="10.4582%" y="1045" width="0.2798%" height="15" fill="rgb(249,42,33)" fg:x="299" fg:w="8"/><text x="10.7082%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,mmap_payload_storage::slotted_page::SlottedPageMmap)&gt;&gt; (8 samples, 0.28%)</title><rect x="10.4582%" y="1029" width="0.2798%" height="15" fill="rgb(242,149,17)" fg:x="299" fg:w="8"/><text x="10.7082%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.28%)</title><rect x="10.4582%" y="1013" width="0.2798%" height="15" fill="rgb(244,29,21)" fg:x="299" fg:w="8"/><text x="10.7082%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (8 samples, 0.28%)</title><rect x="10.4582%" y="997" width="0.2798%" height="15" fill="rgb(220,130,37)" fg:x="299" fg:w="8"/><text x="10.7082%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (8 samples, 0.28%)</title><rect x="10.4582%" y="981" width="0.2798%" height="15" fill="rgb(211,67,2)" fg:x="299" fg:w="8"/><text x="10.7082%" y="991.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (8 samples, 0.28%)</title><rect x="10.4582%" y="965" width="0.2798%" height="15" fill="rgb(235,68,52)" fg:x="299" fg:w="8"/><text x="10.7082%" y="975.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (8 samples, 0.28%)</title><rect x="10.4582%" y="949" width="0.2798%" height="15" fill="rgb(246,142,3)" fg:x="299" fg:w="8"/><text x="10.7082%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,mmap_payload_storage::slotted_page::SlottedPageMmap)&gt; (8 samples, 0.28%)</title><rect x="10.4582%" y="933" width="0.2798%" height="15" fill="rgb(241,25,7)" fg:x="299" fg:w="8"/><text x="10.7082%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::slotted_page::SlottedPageMmap&gt; (8 samples, 0.28%)</title><rect x="10.4582%" y="917" width="0.2798%" height="15" fill="rgb(242,119,39)" fg:x="299" fg:w="8"/><text x="10.7082%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::MmapMut&gt; (8 samples, 0.28%)</title><rect x="10.4582%" y="901" width="0.2798%" height="15" fill="rgb(241,98,45)" fg:x="299" fg:w="8"/><text x="10.7082%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (8 samples, 0.28%)</title><rect x="10.4582%" y="885" width="0.2798%" height="15" fill="rgb(254,28,30)" fg:x="299" fg:w="8"/><text x="10.7082%" y="895.50"></text></g><g><title>__GI_munmap (8 samples, 0.28%)</title><rect x="10.4582%" y="869" width="0.2798%" height="15" fill="rgb(241,142,54)" fg:x="299" fg:w="8"/><text x="10.7082%" y="879.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.28%)</title><rect x="10.4582%" y="853" width="0.2798%" height="15" fill="rgb(222,85,15)" fg:x="299" fg:w="8"/><text x="10.7082%" y="863.50"></text></g><g><title>do_syscall_64 (8 samples, 0.28%)</title><rect x="10.4582%" y="837" width="0.2798%" height="15" fill="rgb(210,85,47)" fg:x="299" fg:w="8"/><text x="10.7082%" y="847.50"></text></g><g><title>x64_sys_call (8 samples, 0.28%)</title><rect x="10.4582%" y="821" width="0.2798%" height="15" fill="rgb(224,206,25)" fg:x="299" fg:w="8"/><text x="10.7082%" y="831.50"></text></g><g><title>__x64_sys_munmap (8 samples, 0.28%)</title><rect x="10.4582%" y="805" width="0.2798%" height="15" fill="rgb(243,201,19)" fg:x="299" fg:w="8"/><text x="10.7082%" y="815.50"></text></g><g><title>__vm_munmap (8 samples, 0.28%)</title><rect x="10.4582%" y="789" width="0.2798%" height="15" fill="rgb(236,59,4)" fg:x="299" fg:w="8"/><text x="10.7082%" y="799.50"></text></g><g><title>do_vmi_munmap (8 samples, 0.28%)</title><rect x="10.4582%" y="773" width="0.2798%" height="15" fill="rgb(254,179,45)" fg:x="299" fg:w="8"/><text x="10.7082%" y="783.50"></text></g><g><title>do_vmi_align_munmap (8 samples, 0.28%)</title><rect x="10.4582%" y="757" width="0.2798%" height="15" fill="rgb(226,14,10)" fg:x="299" fg:w="8"/><text x="10.7082%" y="767.50"></text></g><g><title>unmap_region (8 samples, 0.28%)</title><rect x="10.4582%" y="741" width="0.2798%" height="15" fill="rgb(244,27,41)" fg:x="299" fg:w="8"/><text x="10.7082%" y="751.50"></text></g><g><title>unmap_vmas (8 samples, 0.28%)</title><rect x="10.4582%" y="725" width="0.2798%" height="15" fill="rgb(235,35,32)" fg:x="299" fg:w="8"/><text x="10.7082%" y="735.50"></text></g><g><title>unmap_single_vma (8 samples, 0.28%)</title><rect x="10.4582%" y="709" width="0.2798%" height="15" fill="rgb(218,68,31)" fg:x="299" fg:w="8"/><text x="10.7082%" y="719.50"></text></g><g><title>unmap_page_range (8 samples, 0.28%)</title><rect x="10.4582%" y="693" width="0.2798%" height="15" fill="rgb(207,120,37)" fg:x="299" fg:w="8"/><text x="10.7082%" y="703.50"></text></g><g><title>zap_pmd_range.isra.0 (8 samples, 0.28%)</title><rect x="10.4582%" y="677" width="0.2798%" height="15" fill="rgb(227,98,0)" fg:x="299" fg:w="8"/><text x="10.7082%" y="687.50"></text></g><g><title>zap_pte_range (5 samples, 0.17%)</title><rect x="10.5631%" y="661" width="0.1749%" height="15" fill="rgb(207,7,3)" fg:x="302" fg:w="5"/><text x="10.8131%" y="671.50"></text></g><g><title>tlb_flush_rmaps (2 samples, 0.07%)</title><rect x="10.6681%" y="645" width="0.0700%" height="15" fill="rgb(206,98,19)" fg:x="305" fg:w="2"/><text x="10.9181%" y="655.50"></text></g><g><title>tlb_flush_rmap_batch (2 samples, 0.07%)</title><rect x="10.6681%" y="629" width="0.0700%" height="15" fill="rgb(217,5,26)" fg:x="305" fg:w="2"/><text x="10.9181%" y="639.50"></text></g><g><title>folio_remove_rmap_ptes (1 samples, 0.03%)</title><rect x="10.7030%" y="613" width="0.0350%" height="15" fill="rgb(235,190,38)" fg:x="306" fg:w="1"/><text x="10.9530%" y="623.50"></text></g><g><title>delete_from_page_cache_batch (1 samples, 0.03%)</title><rect x="10.7380%" y="741" width="0.0350%" height="15" fill="rgb(247,86,24)" fg:x="307" fg:w="1"/><text x="10.9880%" y="751.50"></text></g><g><title>find_lock_entries (3 samples, 0.10%)</title><rect x="10.7730%" y="741" width="0.1049%" height="15" fill="rgb(205,101,16)" fg:x="308" fg:w="3"/><text x="11.0230%" y="751.50"></text></g><g><title>block_invalidate_folio (1 samples, 0.03%)</title><rect x="10.8779%" y="725" width="0.0350%" height="15" fill="rgb(246,168,33)" fg:x="311" fg:w="1"/><text x="11.1279%" y="735.50"></text></g><g><title>drop_buffers.constprop.0 (1 samples, 0.03%)</title><rect x="11.0878%" y="645" width="0.0350%" height="15" fill="rgb(231,114,1)" fg:x="317" fg:w="1"/><text x="11.3378%" y="655.50"></text></g><g><title>lruvec_stat_mod_folio (2 samples, 0.07%)</title><rect x="11.1577%" y="597" width="0.0700%" height="15" fill="rgb(207,184,53)" fg:x="319" fg:w="2"/><text x="11.4077%" y="607.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.03%)</title><rect x="11.1927%" y="581" width="0.0350%" height="15" fill="rgb(224,95,51)" fg:x="320" fg:w="1"/><text x="11.4427%" y="591.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="11.1927%" y="565" width="0.0350%" height="15" fill="rgb(212,188,45)" fg:x="320" fg:w="1"/><text x="11.4427%" y="575.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.03%)</title><rect x="11.1927%" y="549" width="0.0350%" height="15" fill="rgb(223,154,38)" fg:x="320" fg:w="1"/><text x="11.4427%" y="559.50"></text></g><g><title>__folio_cancel_dirty (4 samples, 0.14%)</title><rect x="11.1228%" y="629" width="0.1399%" height="15" fill="rgb(251,22,52)" fg:x="318" fg:w="4"/><text x="11.3728%" y="639.50"></text></g><g><title>folio_account_cleaned (4 samples, 0.14%)</title><rect x="11.1228%" y="613" width="0.1399%" height="15" fill="rgb(229,209,22)" fg:x="318" fg:w="4"/><text x="11.3728%" y="623.50"></text></g><g><title>mod_zone_page_state (1 samples, 0.03%)</title><rect x="11.2277%" y="597" width="0.0350%" height="15" fill="rgb(234,138,34)" fg:x="321" fg:w="1"/><text x="11.4777%" y="607.50"></text></g><g><title>__memcg_slab_free_hook (1 samples, 0.03%)</title><rect x="11.3326%" y="597" width="0.0350%" height="15" fill="rgb(212,95,11)" fg:x="324" fg:w="1"/><text x="11.5826%" y="607.50"></text></g><g><title>filemap_release_folio (9 samples, 0.31%)</title><rect x="11.0878%" y="693" width="0.3148%" height="15" fill="rgb(240,179,47)" fg:x="317" fg:w="9"/><text x="11.3378%" y="703.50"></text></g><g><title>ext4_release_folio (9 samples, 0.31%)</title><rect x="11.0878%" y="677" width="0.3148%" height="15" fill="rgb(240,163,11)" fg:x="317" fg:w="9"/><text x="11.3378%" y="687.50"></text></g><g><title>jbd2_journal_try_to_free_buffers (9 samples, 0.31%)</title><rect x="11.0878%" y="661" width="0.3148%" height="15" fill="rgb(236,37,12)" fg:x="317" fg:w="9"/><text x="11.3378%" y="671.50"></text></g><g><title>try_to_free_buffers (8 samples, 0.28%)</title><rect x="11.1228%" y="645" width="0.2798%" height="15" fill="rgb(232,164,16)" fg:x="318" fg:w="8"/><text x="11.3728%" y="655.50"></text></g><g><title>free_buffer_head (4 samples, 0.14%)</title><rect x="11.2627%" y="629" width="0.1399%" height="15" fill="rgb(244,205,15)" fg:x="322" fg:w="4"/><text x="11.5127%" y="639.50"></text></g><g><title>kmem_cache_free (4 samples, 0.14%)</title><rect x="11.2627%" y="613" width="0.1399%" height="15" fill="rgb(223,117,47)" fg:x="322" fg:w="4"/><text x="11.5127%" y="623.50"></text></g><g><title>__slab_free (1 samples, 0.03%)</title><rect x="11.3676%" y="597" width="0.0350%" height="15" fill="rgb(244,107,35)" fg:x="325" fg:w="1"/><text x="11.6176%" y="607.50"></text></g><g><title>slab_update_freelist.isra.0 (1 samples, 0.03%)</title><rect x="11.3676%" y="581" width="0.0350%" height="15" fill="rgb(205,140,8)" fg:x="325" fg:w="1"/><text x="11.6176%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;tempfile::dir::TempDir&gt; (20 samples, 0.70%)</title><rect x="10.7380%" y="1077" width="0.6995%" height="15" fill="rgb(228,84,46)" fg:x="307" fg:w="20"/><text x="10.9880%" y="1087.50"></text></g><g><title>&lt;tempfile::dir::TempDir as core::ops::drop::Drop&gt;::drop (20 samples, 0.70%)</title><rect x="10.7380%" y="1061" width="0.6995%" height="15" fill="rgb(254,188,9)" fg:x="307" fg:w="20"/><text x="10.9880%" y="1071.50"></text></g><g><title>std::fs::remove_dir_all (20 samples, 0.70%)</title><rect x="10.7380%" y="1045" width="0.6995%" height="15" fill="rgb(206,112,54)" fg:x="307" fg:w="20"/><text x="10.9880%" y="1055.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (20 samples, 0.70%)</title><rect x="10.7380%" y="1029" width="0.6995%" height="15" fill="rgb(216,84,49)" fg:x="307" fg:w="20"/><text x="10.9880%" y="1039.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_modern (20 samples, 0.70%)</title><rect x="10.7380%" y="1013" width="0.6995%" height="15" fill="rgb(214,194,35)" fg:x="307" fg:w="20"/><text x="10.9880%" y="1023.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (20 samples, 0.70%)</title><rect x="10.7380%" y="997" width="0.6995%" height="15" fill="rgb(249,28,3)" fg:x="307" fg:w="20"/><text x="10.9880%" y="1007.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (20 samples, 0.70%)</title><rect x="10.7380%" y="981" width="0.6995%" height="15" fill="rgb(222,56,52)" fg:x="307" fg:w="20"/><text x="10.9880%" y="991.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (20 samples, 0.70%)</title><rect x="10.7380%" y="965" width="0.6995%" height="15" fill="rgb(245,217,50)" fg:x="307" fg:w="20"/><text x="10.9880%" y="975.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_modern::_{{closure}} (20 samples, 0.70%)</title><rect x="10.7380%" y="949" width="0.6995%" height="15" fill="rgb(213,201,24)" fg:x="307" fg:w="20"/><text x="10.9880%" y="959.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (20 samples, 0.70%)</title><rect x="10.7380%" y="933" width="0.6995%" height="15" fill="rgb(248,116,28)" fg:x="307" fg:w="20"/><text x="10.9880%" y="943.50"></text></g><g><title>__GI_unlinkat (20 samples, 0.70%)</title><rect x="10.7380%" y="917" width="0.6995%" height="15" fill="rgb(219,72,43)" fg:x="307" fg:w="20"/><text x="10.9880%" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (20 samples, 0.70%)</title><rect x="10.7380%" y="901" width="0.6995%" height="15" fill="rgb(209,138,14)" fg:x="307" fg:w="20"/><text x="10.9880%" y="911.50"></text></g><g><title>do_syscall_64 (20 samples, 0.70%)</title><rect x="10.7380%" y="885" width="0.6995%" height="15" fill="rgb(222,18,33)" fg:x="307" fg:w="20"/><text x="10.9880%" y="895.50"></text></g><g><title>x64_sys_call (20 samples, 0.70%)</title><rect x="10.7380%" y="869" width="0.6995%" height="15" fill="rgb(213,199,7)" fg:x="307" fg:w="20"/><text x="10.9880%" y="879.50"></text></g><g><title>__x64_sys_unlinkat (20 samples, 0.70%)</title><rect x="10.7380%" y="853" width="0.6995%" height="15" fill="rgb(250,110,10)" fg:x="307" fg:w="20"/><text x="10.9880%" y="863.50"></text></g><g><title>do_unlinkat (20 samples, 0.70%)</title><rect x="10.7380%" y="837" width="0.6995%" height="15" fill="rgb(248,123,6)" fg:x="307" fg:w="20"/><text x="10.9880%" y="847.50"></text></g><g><title>iput (20 samples, 0.70%)</title><rect x="10.7380%" y="821" width="0.6995%" height="15" fill="rgb(206,91,31)" fg:x="307" fg:w="20"/><text x="10.9880%" y="831.50"></text></g><g><title>evict (20 samples, 0.70%)</title><rect x="10.7380%" y="805" width="0.6995%" height="15" fill="rgb(211,154,13)" fg:x="307" fg:w="20"/><text x="10.9880%" y="815.50"></text></g><g><title>ext4_evict_inode (20 samples, 0.70%)</title><rect x="10.7380%" y="789" width="0.6995%" height="15" fill="rgb(225,148,7)" fg:x="307" fg:w="20"/><text x="10.9880%" y="799.50"></text></g><g><title>truncate_inode_pages_final (20 samples, 0.70%)</title><rect x="10.7380%" y="773" width="0.6995%" height="15" fill="rgb(220,160,43)" fg:x="307" fg:w="20"/><text x="10.9880%" y="783.50"></text></g><g><title>truncate_inode_pages_range (20 samples, 0.70%)</title><rect x="10.7380%" y="757" width="0.6995%" height="15" fill="rgb(213,52,39)" fg:x="307" fg:w="20"/><text x="10.9880%" y="767.50"></text></g><g><title>truncate_cleanup_folio (16 samples, 0.56%)</title><rect x="10.8779%" y="741" width="0.5596%" height="15" fill="rgb(243,137,7)" fg:x="311" fg:w="16"/><text x="11.1279%" y="751.50"></text></g><g><title>ext4_invalidate_folio (15 samples, 0.52%)</title><rect x="10.9129%" y="725" width="0.5247%" height="15" fill="rgb(230,79,13)" fg:x="312" fg:w="15"/><text x="11.1629%" y="735.50"></text></g><g><title>block_invalidate_folio (12 samples, 0.42%)</title><rect x="11.0178%" y="709" width="0.4197%" height="15" fill="rgb(247,105,23)" fg:x="315" fg:w="12"/><text x="11.2678%" y="719.50"></text></g><g><title>wake_up_bit (1 samples, 0.03%)</title><rect x="11.4026%" y="693" width="0.0350%" height="15" fill="rgb(223,179,41)" fg:x="326" fg:w="1"/><text x="11.6526%" y="703.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.03%)</title><rect x="11.4376%" y="757" width="0.0350%" height="15" fill="rgb(218,9,34)" fg:x="327" fg:w="1"/><text x="11.6876%" y="767.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.03%)</title><rect x="11.4376%" y="741" width="0.0350%" height="15" fill="rgb(222,106,8)" fg:x="327" fg:w="1"/><text x="11.6876%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.03%)</title><rect x="11.4725%" y="757" width="0.0350%" height="15" fill="rgb(211,220,0)" fg:x="328" fg:w="1"/><text x="11.7225%" y="767.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.03%)</title><rect x="11.4725%" y="741" width="0.0350%" height="15" fill="rgb(229,52,16)" fg:x="328" fg:w="1"/><text x="11.7225%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="11.5075%" y="677" width="0.0350%" height="15" fill="rgb(212,155,18)" fg:x="329" fg:w="1"/><text x="11.7575%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (1 samples, 0.03%)</title><rect x="11.5775%" y="613" width="0.0350%" height="15" fill="rgb(242,21,14)" fg:x="331" fg:w="1"/><text x="11.8275%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (1 samples, 0.03%)</title><rect x="11.5775%" y="597" width="0.0350%" height="15" fill="rgb(222,19,48)" fg:x="331" fg:w="1"/><text x="11.8275%" y="607.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (1 samples, 0.03%)</title><rect x="11.5775%" y="581" width="0.0350%" height="15" fill="rgb(232,45,27)" fg:x="331" fg:w="1"/><text x="11.8275%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.10%)</title><rect x="11.5775%" y="629" width="0.1049%" height="15" fill="rgb(249,103,42)" fg:x="331" fg:w="3"/><text x="11.8275%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (2 samples, 0.07%)</title><rect x="11.6125%" y="613" width="0.0700%" height="15" fill="rgb(246,81,33)" fg:x="332" fg:w="2"/><text x="11.8625%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (2 samples, 0.07%)</title><rect x="11.6125%" y="597" width="0.0700%" height="15" fill="rgb(252,33,42)" fg:x="332" fg:w="2"/><text x="11.8625%" y="607.50"></text></g><g><title>alloc::collections::btree::mem::replace (2 samples, 0.07%)</title><rect x="11.6125%" y="581" width="0.0700%" height="15" fill="rgb(209,212,41)" fg:x="332" fg:w="2"/><text x="11.8625%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (2 samples, 0.07%)</title><rect x="11.6125%" y="565" width="0.0700%" height="15" fill="rgb(207,154,6)" fg:x="332" fg:w="2"/><text x="11.8625%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (2 samples, 0.07%)</title><rect x="11.6125%" y="549" width="0.0700%" height="15" fill="rgb(223,64,47)" fg:x="332" fg:w="2"/><text x="11.8625%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (2 samples, 0.07%)</title><rect x="11.6125%" y="533" width="0.0700%" height="15" fill="rgb(211,161,38)" fg:x="332" fg:w="2"/><text x="11.8625%" y="543.50"></text></g><g><title>__GI___libc_free (10 samples, 0.35%)</title><rect x="11.7174%" y="501" width="0.3498%" height="15" fill="rgb(219,138,40)" fg:x="335" fg:w="10"/><text x="11.9674%" y="511.50"></text></g><g><title>_int_free (6 samples, 0.21%)</title><rect x="11.8573%" y="485" width="0.2099%" height="15" fill="rgb(241,228,46)" fg:x="339" fg:w="6"/><text x="12.1073%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (12 samples, 0.42%)</title><rect x="11.6824%" y="597" width="0.4197%" height="15" fill="rgb(223,209,38)" fg:x="334" fg:w="12"/><text x="11.9324%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (12 samples, 0.42%)</title><rect x="11.6824%" y="581" width="0.4197%" height="15" fill="rgb(236,164,45)" fg:x="334" fg:w="12"/><text x="11.9324%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (12 samples, 0.42%)</title><rect x="11.6824%" y="565" width="0.4197%" height="15" fill="rgb(231,15,5)" fg:x="334" fg:w="12"/><text x="11.9324%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.42%)</title><rect x="11.6824%" y="549" width="0.4197%" height="15" fill="rgb(252,35,15)" fg:x="334" fg:w="12"/><text x="11.9324%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.38%)</title><rect x="11.7174%" y="533" width="0.3847%" height="15" fill="rgb(248,181,18)" fg:x="335" fg:w="11"/><text x="11.9674%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.38%)</title><rect x="11.7174%" y="517" width="0.3847%" height="15" fill="rgb(233,39,42)" fg:x="335" fg:w="11"/><text x="11.9674%" y="527.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="12.0672%" y="501" width="0.0350%" height="15" fill="rgb(238,110,33)" fg:x="345" fg:w="1"/><text x="12.3172%" y="511.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="12.1021%" y="565" width="0.0350%" height="15" fill="rgb(233,195,10)" fg:x="346" fg:w="1"/><text x="12.3521%" y="575.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.03%)</title><rect x="12.1371%" y="565" width="0.0350%" height="15" fill="rgb(254,105,3)" fg:x="347" fg:w="1"/><text x="12.3871%" y="575.50"></text></g><g><title>__GI___libc_free (3 samples, 0.10%)</title><rect x="12.1021%" y="581" width="0.1049%" height="15" fill="rgb(221,225,9)" fg:x="346" fg:w="3"/><text x="12.3521%" y="591.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.03%)</title><rect x="12.1721%" y="565" width="0.0350%" height="15" fill="rgb(224,227,45)" fg:x="348" fg:w="1"/><text x="12.4221%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;serde_json::value::Value&gt;&gt; (12 samples, 0.42%)</title><rect x="12.2071%" y="581" width="0.4197%" height="15" fill="rgb(229,198,43)" fg:x="349" fg:w="12"/><text x="12.4571%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.42%)</title><rect x="12.2071%" y="565" width="0.4197%" height="15" fill="rgb(206,209,35)" fg:x="349" fg:w="12"/><text x="12.4571%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[serde_json::value::Value]&gt; (12 samples, 0.42%)</title><rect x="12.2071%" y="549" width="0.4197%" height="15" fill="rgb(245,195,53)" fg:x="349" fg:w="12"/><text x="12.4571%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (12 samples, 0.42%)</title><rect x="12.2071%" y="533" width="0.4197%" height="15" fill="rgb(240,92,26)" fg:x="349" fg:w="12"/><text x="12.4571%" y="543.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="12.5918%" y="517" width="0.0350%" height="15" fill="rgb(207,40,23)" fg:x="360" fg:w="1"/><text x="12.8418%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="12.5918%" y="501" width="0.0350%" height="15" fill="rgb(223,111,35)" fg:x="360" fg:w="1"/><text x="12.8418%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="12.5918%" y="485" width="0.0350%" height="15" fill="rgb(229,147,28)" fg:x="360" fg:w="1"/><text x="12.8418%" y="495.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="12.5918%" y="469" width="0.0350%" height="15" fill="rgb(211,29,28)" fg:x="360" fg:w="1"/><text x="12.8418%" y="479.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="12.5918%" y="453" width="0.0350%" height="15" fill="rgb(228,72,33)" fg:x="360" fg:w="1"/><text x="12.8418%" y="463.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="12.5918%" y="437" width="0.0350%" height="15" fill="rgb(205,214,31)" fg:x="360" fg:w="1"/><text x="12.8418%" y="447.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="12.5918%" y="421" width="0.0350%" height="15" fill="rgb(224,111,15)" fg:x="360" fg:w="1"/><text x="12.8418%" y="431.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="12.5918%" y="405" width="0.0350%" height="15" fill="rgb(253,21,26)" fg:x="360" fg:w="1"/><text x="12.8418%" y="415.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="12.5918%" y="389" width="0.0350%" height="15" fill="rgb(245,139,43)" fg:x="360" fg:w="1"/><text x="12.8418%" y="399.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="12.5918%" y="373" width="0.0350%" height="15" fill="rgb(252,170,7)" fg:x="360" fg:w="1"/><text x="12.8418%" y="383.50"></text></g><g><title>update_load_avg (1 samples, 0.03%)</title><rect x="12.5918%" y="357" width="0.0350%" height="15" fill="rgb(231,118,14)" fg:x="360" fg:w="1"/><text x="12.8418%" y="367.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.03%)</title><rect x="12.5918%" y="341" width="0.0350%" height="15" fill="rgb(238,83,0)" fg:x="360" fg:w="1"/><text x="12.8418%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;mmap_payload_storage::payload::Payload&gt;&gt; (36 samples, 1.26%)</title><rect x="11.5075%" y="757" width="1.2592%" height="15" fill="rgb(221,39,39)" fg:x="329" fg:w="36"/><text x="11.7575%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload::Payload&gt; (36 samples, 1.26%)</title><rect x="11.5075%" y="741" width="1.2592%" height="15" fill="rgb(222,119,46)" fg:x="329" fg:w="36"/><text x="11.7575%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (36 samples, 1.26%)</title><rect x="11.5075%" y="725" width="1.2592%" height="15" fill="rgb(222,165,49)" fg:x="329" fg:w="36"/><text x="11.7575%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (36 samples, 1.26%)</title><rect x="11.5075%" y="709" width="1.2592%" height="15" fill="rgb(219,113,52)" fg:x="329" fg:w="36"/><text x="11.7575%" y="719.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (36 samples, 1.26%)</title><rect x="11.5075%" y="693" width="1.2592%" height="15" fill="rgb(214,7,15)" fg:x="329" fg:w="36"/><text x="11.7575%" y="703.50"></text></g><g><title>core::mem::drop (35 samples, 1.22%)</title><rect x="11.5425%" y="677" width="1.2242%" height="15" fill="rgb(235,32,4)" fg:x="330" fg:w="35"/><text x="11.7925%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (35 samples, 1.22%)</title><rect x="11.5425%" y="661" width="1.2242%" height="15" fill="rgb(238,90,54)" fg:x="330" fg:w="35"/><text x="11.7925%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (35 samples, 1.22%)</title><rect x="11.5425%" y="645" width="1.2242%" height="15" fill="rgb(213,208,19)" fg:x="330" fg:w="35"/><text x="11.7925%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (31 samples, 1.08%)</title><rect x="11.6824%" y="629" width="1.0843%" height="15" fill="rgb(233,156,4)" fg:x="334" fg:w="31"/><text x="11.9324%" y="639.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (31 samples, 1.08%)</title><rect x="11.6824%" y="613" width="1.0843%" height="15" fill="rgb(207,194,5)" fg:x="334" fg:w="31"/><text x="11.9324%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (19 samples, 0.66%)</title><rect x="12.1021%" y="597" width="0.6646%" height="15" fill="rgb(206,111,30)" fg:x="346" fg:w="19"/><text x="12.3521%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.14%)</title><rect x="12.6268%" y="581" width="0.1399%" height="15" fill="rgb(243,70,54)" fg:x="361" fg:w="4"/><text x="12.8768%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.14%)</title><rect x="12.6268%" y="565" width="0.1399%" height="15" fill="rgb(242,28,8)" fg:x="361" fg:w="4"/><text x="12.8768%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="12.6268%" y="549" width="0.1399%" height="15" fill="rgb(219,106,18)" fg:x="361" fg:w="4"/><text x="12.8768%" y="559.50"></text></g><g><title>core::mem::drop (4 samples, 0.14%)</title><rect x="12.6268%" y="533" width="0.1399%" height="15" fill="rgb(244,222,10)" fg:x="361" fg:w="4"/><text x="12.8768%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (4 samples, 0.14%)</title><rect x="12.6268%" y="517" width="0.1399%" height="15" fill="rgb(236,179,52)" fg:x="361" fg:w="4"/><text x="12.8768%" y="527.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="12.6268%" y="501" width="0.1399%" height="15" fill="rgb(213,23,39)" fg:x="361" fg:w="4"/><text x="12.8768%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (3 samples, 0.10%)</title><rect x="12.6618%" y="485" width="0.1049%" height="15" fill="rgb(238,48,10)" fg:x="362" fg:w="3"/><text x="12.9118%" y="495.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (3 samples, 0.10%)</title><rect x="12.6618%" y="469" width="0.1049%" height="15" fill="rgb(251,196,23)" fg:x="362" fg:w="3"/><text x="12.9118%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (3 samples, 0.10%)</title><rect x="12.6618%" y="453" width="0.1049%" height="15" fill="rgb(250,152,24)" fg:x="362" fg:w="3"/><text x="12.9118%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (3 samples, 0.10%)</title><rect x="12.6618%" y="437" width="0.1049%" height="15" fill="rgb(209,150,17)" fg:x="362" fg:w="3"/><text x="12.9118%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.10%)</title><rect x="12.6618%" y="421" width="0.1049%" height="15" fill="rgb(234,202,34)" fg:x="362" fg:w="3"/><text x="12.9118%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.10%)</title><rect x="12.6618%" y="405" width="0.1049%" height="15" fill="rgb(253,148,53)" fg:x="362" fg:w="3"/><text x="12.9118%" y="415.50"></text></g><g><title>__GI___libc_free (3 samples, 0.10%)</title><rect x="12.6618%" y="389" width="0.1049%" height="15" fill="rgb(218,129,16)" fg:x="362" fg:w="3"/><text x="12.9118%" y="399.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="12.6967%" y="373" width="0.0700%" height="15" fill="rgb(216,85,19)" fg:x="363" fg:w="2"/><text x="12.9467%" y="383.50"></text></g><g><title>tcache_put (1 samples, 0.03%)</title><rect x="12.7317%" y="357" width="0.0350%" height="15" fill="rgb(235,228,7)" fg:x="364" fg:w="1"/><text x="12.9817%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="12.7667%" y="741" width="0.0700%" height="15" fill="rgb(245,175,0)" fg:x="365" fg:w="2"/><text x="13.0167%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="12.7667%" y="725" width="0.0700%" height="15" fill="rgb(208,168,36)" fg:x="365" fg:w="2"/><text x="13.0167%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="12.7667%" y="709" width="0.0700%" height="15" fill="rgb(246,171,24)" fg:x="365" fg:w="2"/><text x="13.0167%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="12.7667%" y="693" width="0.0700%" height="15" fill="rgb(215,142,24)" fg:x="365" fg:w="2"/><text x="13.0167%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="12.7667%" y="677" width="0.0700%" height="15" fill="rgb(250,187,7)" fg:x="365" fg:w="2"/><text x="13.0167%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="12.8017%" y="661" width="0.0350%" height="15" fill="rgb(228,66,33)" fg:x="366" fg:w="1"/><text x="13.0517%" y="671.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.03%)</title><rect x="12.8017%" y="645" width="0.0350%" height="15" fill="rgb(234,215,21)" fg:x="366" fg:w="1"/><text x="13.0517%" y="655.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.03%)</title><rect x="12.8367%" y="725" width="0.0350%" height="15" fill="rgb(222,191,20)" fg:x="367" fg:w="1"/><text x="13.0867%" y="735.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (1 samples, 0.03%)</title><rect x="13.1165%" y="389" width="0.0350%" height="15" fill="rgb(245,79,54)" fg:x="375" fg:w="1"/><text x="13.3665%" y="399.50"></text></g><g><title>serde_cbor::read::SliceRead::end (1 samples, 0.03%)</title><rect x="13.1165%" y="373" width="0.0350%" height="15" fill="rgb(240,10,37)" fg:x="375" fg:w="1"/><text x="13.3665%" y="383.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.10%)</title><rect x="13.1515%" y="165" width="0.1049%" height="15" fill="rgb(214,192,32)" fg:x="376" fg:w="3"/><text x="13.4015%" y="175.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="13.1864%" y="149" width="0.0700%" height="15" fill="rgb(209,36,54)" fg:x="377" fg:w="2"/><text x="13.4364%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="13.2564%" y="165" width="0.0350%" height="15" fill="rgb(220,10,11)" fg:x="379" fg:w="1"/><text x="13.5064%" y="175.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="13.2564%" y="149" width="0.0350%" height="15" fill="rgb(221,106,17)" fg:x="379" fg:w="1"/><text x="13.5064%" y="159.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (5 samples, 0.17%)</title><rect x="13.1515%" y="389" width="0.1749%" height="15" fill="rgb(251,142,44)" fg:x="376" fg:w="5"/><text x="13.4015%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::Visitor&gt;::visit_str (5 samples, 0.17%)</title><rect x="13.1515%" y="373" width="0.1749%" height="15" fill="rgb(238,13,15)" fg:x="376" fg:w="5"/><text x="13.4015%" y="383.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (5 samples, 0.17%)</title><rect x="13.1515%" y="357" width="0.1749%" height="15" fill="rgb(208,107,27)" fg:x="376" fg:w="5"/><text x="13.4015%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (5 samples, 0.17%)</title><rect x="13.1515%" y="341" width="0.1749%" height="15" fill="rgb(205,136,37)" fg:x="376" fg:w="5"/><text x="13.4015%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (5 samples, 0.17%)</title><rect x="13.1515%" y="325" width="0.1749%" height="15" fill="rgb(250,205,27)" fg:x="376" fg:w="5"/><text x="13.4015%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.17%)</title><rect x="13.1515%" y="309" width="0.1749%" height="15" fill="rgb(210,80,43)" fg:x="376" fg:w="5"/><text x="13.4015%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.17%)</title><rect x="13.1515%" y="293" width="0.1749%" height="15" fill="rgb(247,160,36)" fg:x="376" fg:w="5"/><text x="13.4015%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.17%)</title><rect x="13.1515%" y="277" width="0.1749%" height="15" fill="rgb(234,13,49)" fg:x="376" fg:w="5"/><text x="13.4015%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.17%)</title><rect x="13.1515%" y="261" width="0.1749%" height="15" fill="rgb(234,122,0)" fg:x="376" fg:w="5"/><text x="13.4015%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.17%)</title><rect x="13.1515%" y="245" width="0.1749%" height="15" fill="rgb(207,146,38)" fg:x="376" fg:w="5"/><text x="13.4015%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (5 samples, 0.17%)</title><rect x="13.1515%" y="229" width="0.1749%" height="15" fill="rgb(207,177,25)" fg:x="376" fg:w="5"/><text x="13.4015%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.17%)</title><rect x="13.1515%" y="213" width="0.1749%" height="15" fill="rgb(211,178,42)" fg:x="376" fg:w="5"/><text x="13.4015%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.17%)</title><rect x="13.1515%" y="197" width="0.1749%" height="15" fill="rgb(230,69,54)" fg:x="376" fg:w="5"/><text x="13.4015%" y="207.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.17%)</title><rect x="13.1515%" y="181" width="0.1749%" height="15" fill="rgb(214,135,41)" fg:x="376" fg:w="5"/><text x="13.4015%" y="191.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="13.2914%" y="165" width="0.0350%" height="15" fill="rgb(237,67,25)" fg:x="380" fg:w="1"/><text x="13.5414%" y="175.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (11 samples, 0.38%)</title><rect x="13.1165%" y="405" width="0.3847%" height="15" fill="rgb(222,189,50)" fg:x="375" fg:w="11"/><text x="13.3665%" y="415.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (5 samples, 0.17%)</title><rect x="13.3263%" y="389" width="0.1749%" height="15" fill="rgb(245,148,34)" fg:x="381" fg:w="5"/><text x="13.5763%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (5 samples, 0.17%)</title><rect x="13.3263%" y="373" width="0.1749%" height="15" fill="rgb(222,29,6)" fg:x="381" fg:w="5"/><text x="13.5763%" y="383.50"></text></g><g><title>core::str::validations::run_utf8_validation (4 samples, 0.14%)</title><rect x="13.3613%" y="357" width="0.1399%" height="15" fill="rgb(221,189,43)" fg:x="382" fg:w="4"/><text x="13.6113%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="13.4662%" y="341" width="0.0350%" height="15" fill="rgb(207,36,27)" fg:x="385" fg:w="1"/><text x="13.7162%" y="351.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (15 samples, 0.52%)</title><rect x="13.0465%" y="501" width="0.5247%" height="15" fill="rgb(217,90,24)" fg:x="373" fg:w="15"/><text x="13.2965%" y="511.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (15 samples, 0.52%)</title><rect x="13.0465%" y="485" width="0.5247%" height="15" fill="rgb(224,66,35)" fg:x="373" fg:w="15"/><text x="13.2965%" y="495.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (15 samples, 0.52%)</title><rect x="13.0465%" y="469" width="0.5247%" height="15" fill="rgb(221,13,50)" fg:x="373" fg:w="15"/><text x="13.2965%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (15 samples, 0.52%)</title><rect x="13.0465%" y="453" width="0.5247%" height="15" fill="rgb(236,68,49)" fg:x="373" fg:w="15"/><text x="13.2965%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (15 samples, 0.52%)</title><rect x="13.0465%" y="437" width="0.5247%" height="15" fill="rgb(229,146,28)" fg:x="373" fg:w="15"/><text x="13.2965%" y="447.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (15 samples, 0.52%)</title><rect x="13.0465%" y="421" width="0.5247%" height="15" fill="rgb(225,31,38)" fg:x="373" fg:w="15"/><text x="13.2965%" y="431.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (2 samples, 0.07%)</title><rect x="13.5012%" y="405" width="0.0700%" height="15" fill="rgb(250,208,3)" fg:x="386" fg:w="2"/><text x="13.7512%" y="415.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (2 samples, 0.07%)</title><rect x="13.5012%" y="389" width="0.0700%" height="15" fill="rgb(246,54,23)" fg:x="386" fg:w="2"/><text x="13.7512%" y="399.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (2 samples, 0.07%)</title><rect x="13.5012%" y="373" width="0.0700%" height="15" fill="rgb(243,76,11)" fg:x="386" fg:w="2"/><text x="13.7512%" y="383.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (2 samples, 0.07%)</title><rect x="13.5712%" y="437" width="0.0700%" height="15" fill="rgb(245,21,50)" fg:x="388" fg:w="2"/><text x="13.8212%" y="447.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (2 samples, 0.07%)</title><rect x="13.5712%" y="421" width="0.0700%" height="15" fill="rgb(228,9,43)" fg:x="388" fg:w="2"/><text x="13.8212%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (2 samples, 0.07%)</title><rect x="13.5712%" y="405" width="0.0700%" height="15" fill="rgb(208,100,47)" fg:x="388" fg:w="2"/><text x="13.8212%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (2 samples, 0.07%)</title><rect x="13.5712%" y="389" width="0.0700%" height="15" fill="rgb(232,26,8)" fg:x="388" fg:w="2"/><text x="13.8212%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (2 samples, 0.07%)</title><rect x="13.5712%" y="373" width="0.0700%" height="15" fill="rgb(216,166,38)" fg:x="388" fg:w="2"/><text x="13.8212%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (2 samples, 0.07%)</title><rect x="13.5712%" y="357" width="0.0700%" height="15" fill="rgb(251,202,51)" fg:x="388" fg:w="2"/><text x="13.8212%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.07%)</title><rect x="13.5712%" y="341" width="0.0700%" height="15" fill="rgb(254,216,34)" fg:x="388" fg:w="2"/><text x="13.8212%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="13.5712%" y="325" width="0.0700%" height="15" fill="rgb(251,32,27)" fg:x="388" fg:w="2"/><text x="13.8212%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="13.5712%" y="309" width="0.0700%" height="15" fill="rgb(208,127,28)" fg:x="388" fg:w="2"/><text x="13.8212%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="13.5712%" y="293" width="0.0700%" height="15" fill="rgb(224,137,22)" fg:x="388" fg:w="2"/><text x="13.8212%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.07%)</title><rect x="13.5712%" y="277" width="0.0700%" height="15" fill="rgb(254,70,32)" fg:x="388" fg:w="2"/><text x="13.8212%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="13.5712%" y="261" width="0.0700%" height="15" fill="rgb(229,75,37)" fg:x="388" fg:w="2"/><text x="13.8212%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="13.5712%" y="245" width="0.0700%" height="15" fill="rgb(252,64,23)" fg:x="388" fg:w="2"/><text x="13.8212%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.07%)</title><rect x="14.3757%" y="309" width="0.0700%" height="15" fill="rgb(232,162,48)" fg:x="411" fg:w="2"/><text x="14.6257%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.10%)</title><rect x="14.4456%" y="309" width="0.1049%" height="15" fill="rgb(246,160,12)" fg:x="413" fg:w="3"/><text x="14.6956%" y="319.50"></text></g><g><title>__GI_memcpy (5 samples, 0.17%)</title><rect x="14.7954%" y="213" width="0.1749%" height="15" fill="rgb(247,166,0)" fg:x="423" fg:w="5"/><text x="15.0454%" y="223.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.17%)</title><rect x="14.7954%" y="197" width="0.1749%" height="15" fill="rgb(249,219,21)" fg:x="423" fg:w="5"/><text x="15.0454%" y="207.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="14.9703%" y="213" width="0.0700%" height="15" fill="rgb(205,209,3)" fg:x="428" fg:w="2"/><text x="15.2203%" y="223.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.03%)</title><rect x="15.0402%" y="213" width="0.0350%" height="15" fill="rgb(243,44,1)" fg:x="430" fg:w="1"/><text x="15.2902%" y="223.50"></text></g><g><title>_int_realloc (19 samples, 0.66%)</title><rect x="14.5855%" y="229" width="0.6646%" height="15" fill="rgb(206,159,16)" fg:x="417" fg:w="19"/><text x="14.8355%" y="239.50"></text></g><g><title>_int_malloc (5 samples, 0.17%)</title><rect x="15.0752%" y="213" width="0.1749%" height="15" fill="rgb(244,77,30)" fg:x="431" fg:w="5"/><text x="15.3252%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (21 samples, 0.73%)</title><rect x="14.5505%" y="293" width="0.7345%" height="15" fill="rgb(218,69,12)" fg:x="416" fg:w="21"/><text x="14.8005%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 0.73%)</title><rect x="14.5505%" y="277" width="0.7345%" height="15" fill="rgb(212,87,7)" fg:x="416" fg:w="21"/><text x="14.8005%" y="287.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.73%)</title><rect x="14.5505%" y="261" width="0.7345%" height="15" fill="rgb(245,114,25)" fg:x="416" fg:w="21"/><text x="14.8005%" y="271.50"></text></g><g><title>__GI___libc_realloc (21 samples, 0.73%)</title><rect x="14.5505%" y="245" width="0.7345%" height="15" fill="rgb(210,61,42)" fg:x="416" fg:w="21"/><text x="14.8005%" y="255.50"></text></g><g><title>musable (1 samples, 0.03%)</title><rect x="15.2501%" y="229" width="0.0350%" height="15" fill="rgb(211,52,33)" fg:x="436" fg:w="1"/><text x="15.5001%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (27 samples, 0.94%)</title><rect x="14.3757%" y="341" width="0.9444%" height="15" fill="rgb(234,58,33)" fg:x="411" fg:w="27"/><text x="14.6257%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (27 samples, 0.94%)</title><rect x="14.3757%" y="325" width="0.9444%" height="15" fill="rgb(220,115,36)" fg:x="411" fg:w="27"/><text x="14.6257%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (22 samples, 0.77%)</title><rect x="14.5505%" y="309" width="0.7695%" height="15" fill="rgb(243,153,54)" fg:x="416" fg:w="22"/><text x="14.8005%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="15.2851%" y="293" width="0.0350%" height="15" fill="rgb(251,47,18)" fg:x="437" fg:w="1"/><text x="15.5351%" y="303.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (7 samples, 0.24%)</title><rect x="15.3200%" y="341" width="0.2448%" height="15" fill="rgb(242,102,42)" fg:x="438" fg:w="7"/><text x="15.5700%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (128 samples, 4.48%)</title><rect x="14.3757%" y="357" width="4.4771%" height="15" fill="rgb(234,31,38)" fg:x="411" fg:w="128"/><text x="14.6257%" y="367.50">alloc..</text></g><g><title>core::ptr::write (94 samples, 3.29%)</title><rect x="15.5649%" y="341" width="3.2879%" height="15" fill="rgb(221,117,51)" fg:x="445" fg:w="94"/><text x="15.8149%" y="351.50">cor..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (9 samples, 0.31%)</title><rect x="20.2868%" y="261" width="0.3148%" height="15" fill="rgb(212,20,18)" fg:x="580" fg:w="9"/><text x="20.5368%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="20.6016%" y="261" width="0.0350%" height="15" fill="rgb(245,133,36)" fg:x="589" fg:w="1"/><text x="20.8516%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="20.6016%" y="245" width="0.0350%" height="15" fill="rgb(212,6,19)" fg:x="589" fg:w="1"/><text x="20.8516%" y="255.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="20.6016%" y="229" width="0.0350%" height="15" fill="rgb(218,1,36)" fg:x="589" fg:w="1"/><text x="20.8516%" y="239.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="20.6016%" y="213" width="0.0350%" height="15" fill="rgb(246,84,54)" fg:x="589" fg:w="1"/><text x="20.8516%" y="223.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="20.6016%" y="197" width="0.0350%" height="15" fill="rgb(242,110,6)" fg:x="589" fg:w="1"/><text x="20.8516%" y="207.50"></text></g><g><title>enqueue_hrtimer (1 samples, 0.03%)</title><rect x="20.6016%" y="181" width="0.0350%" height="15" fill="rgb(214,47,5)" fg:x="589" fg:w="1"/><text x="20.8516%" y="191.50"></text></g><g><title>timerqueue_add (1 samples, 0.03%)</title><rect x="20.6016%" y="165" width="0.0350%" height="15" fill="rgb(218,159,25)" fg:x="589" fg:w="1"/><text x="20.8516%" y="175.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.17%)</title><rect x="20.8814%" y="229" width="0.1749%" height="15" fill="rgb(215,211,28)" fg:x="597" fg:w="5"/><text x="21.1314%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="21.0563%" y="229" width="0.0350%" height="15" fill="rgb(238,59,32)" fg:x="602" fg:w="1"/><text x="21.3063%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.14%)</title><rect x="21.0913%" y="229" width="0.1399%" height="15" fill="rgb(226,82,3)" fg:x="603" fg:w="4"/><text x="21.3413%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.14%)</title><rect x="21.0913%" y="213" width="0.1399%" height="15" fill="rgb(240,164,32)" fg:x="603" fg:w="4"/><text x="21.3413%" y="223.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.03%)</title><rect x="21.1962%" y="197" width="0.0350%" height="15" fill="rgb(232,46,7)" fg:x="606" fg:w="1"/><text x="21.4462%" y="207.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (32 samples, 1.12%)</title><rect x="20.7415%" y="245" width="1.1193%" height="15" fill="rgb(229,129,53)" fg:x="593" fg:w="32"/><text x="20.9915%" y="255.50"></text></g><g><title>serde_cbor::read::SliceRead::end (18 samples, 0.63%)</title><rect x="21.2312%" y="229" width="0.6296%" height="15" fill="rgb(234,188,29)" fg:x="607" fg:w="18"/><text x="21.4812%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (6 samples, 0.21%)</title><rect x="21.6509%" y="213" width="0.2099%" height="15" fill="rgb(246,141,4)" fg:x="619" fg:w="6"/><text x="21.9009%" y="223.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u16 (41 samples, 1.43%)</title><rect x="20.6366%" y="261" width="1.4341%" height="15" fill="rgb(229,23,39)" fg:x="590" fg:w="41"/><text x="20.8866%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (6 samples, 0.21%)</title><rect x="21.8608%" y="245" width="0.2099%" height="15" fill="rgb(206,12,3)" fg:x="625" fg:w="6"/><text x="22.1108%" y="255.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.17%)</title><rect x="22.4554%" y="229" width="0.1749%" height="15" fill="rgb(252,226,20)" fg:x="642" fg:w="5"/><text x="22.7054%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.07%)</title><rect x="22.6303%" y="229" width="0.0700%" height="15" fill="rgb(216,123,35)" fg:x="647" fg:w="2"/><text x="22.8803%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="22.6653%" y="213" width="0.0350%" height="15" fill="rgb(212,68,40)" fg:x="648" fg:w="1"/><text x="22.9153%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="22.7002%" y="229" width="0.0700%" height="15" fill="rgb(254,125,32)" fg:x="649" fg:w="2"/><text x="22.9502%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="22.7002%" y="213" width="0.0700%" height="15" fill="rgb(253,97,22)" fg:x="649" fg:w="2"/><text x="22.9502%" y="223.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read_into (26 samples, 0.91%)</title><rect x="22.2455%" y="245" width="0.9094%" height="15" fill="rgb(241,101,14)" fg:x="636" fg:w="26"/><text x="22.4955%" y="255.50"></text></g><g><title>serde_cbor::read::SliceRead::end (11 samples, 0.38%)</title><rect x="22.7702%" y="229" width="0.3847%" height="15" fill="rgb(238,103,29)" fg:x="651" fg:w="11"/><text x="23.0202%" y="239.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.10%)</title><rect x="23.0500%" y="213" width="0.1049%" height="15" fill="rgb(233,195,47)" fg:x="659" fg:w="3"/><text x="23.3000%" y="223.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u32 (33 samples, 1.15%)</title><rect x="22.0707%" y="261" width="1.1542%" height="15" fill="rgb(246,218,30)" fg:x="631" fg:w="33"/><text x="22.3207%" y="271.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (2 samples, 0.07%)</title><rect x="23.1549%" y="245" width="0.0700%" height="15" fill="rgb(219,145,47)" fg:x="662" fg:w="2"/><text x="23.4049%" y="255.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u32::_{{closure}} (1 samples, 0.03%)</title><rect x="23.1899%" y="229" width="0.0350%" height="15" fill="rgb(243,12,26)" fg:x="663" fg:w="1"/><text x="23.4399%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (1 samples, 0.03%)</title><rect x="23.1899%" y="213" width="0.0350%" height="15" fill="rgb(214,87,16)" fg:x="663" fg:w="1"/><text x="23.4399%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (1 samples, 0.03%)</title><rect x="23.1899%" y="197" width="0.0350%" height="15" fill="rgb(208,99,42)" fg:x="663" fg:w="1"/><text x="23.4399%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (1 samples, 0.03%)</title><rect x="23.1899%" y="181" width="0.0350%" height="15" fill="rgb(253,99,2)" fg:x="663" fg:w="1"/><text x="23.4399%" y="191.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (127 samples, 4.44%)</title><rect x="19.3424%" y="325" width="4.4421%" height="15" fill="rgb(220,168,23)" fg:x="553" fg:w="127"/><text x="19.5924%" y="335.50">&lt;core..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (127 samples, 4.44%)</title><rect x="19.3424%" y="309" width="4.4421%" height="15" fill="rgb(242,38,24)" fg:x="553" fg:w="127"/><text x="19.5924%" y="319.50">serde..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (127 samples, 4.44%)</title><rect x="19.3424%" y="293" width="4.4421%" height="15" fill="rgb(225,182,9)" fg:x="553" fg:w="127"/><text x="19.5924%" y="303.50">&lt;&amp;mut..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (126 samples, 4.41%)</title><rect x="19.3774%" y="277" width="4.4071%" height="15" fill="rgb(243,178,37)" fg:x="554" fg:w="126"/><text x="19.6274%" y="287.50">serde..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (16 samples, 0.56%)</title><rect x="23.2249%" y="261" width="0.5596%" height="15" fill="rgb(232,139,19)" fg:x="664" fg:w="16"/><text x="23.4749%" y="271.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (16 samples, 0.56%)</title><rect x="23.2249%" y="245" width="0.5596%" height="15" fill="rgb(225,201,24)" fg:x="664" fg:w="16"/><text x="23.4749%" y="255.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (16 samples, 0.56%)</title><rect x="23.2249%" y="229" width="0.5596%" height="15" fill="rgb(221,47,46)" fg:x="664" fg:w="16"/><text x="23.4749%" y="239.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_array (361 samples, 12.63%)</title><rect x="13.6761%" y="421" width="12.6268%" height="15" fill="rgb(249,23,13)" fg:x="391" fg:w="361"/><text x="13.9261%" y="431.50">serde_cbor::de::Des..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (361 samples, 12.63%)</title><rect x="13.6761%" y="405" width="12.6268%" height="15" fill="rgb(219,9,5)" fg:x="391" fg:w="361"/><text x="13.9261%" y="415.50">serde_cbor::de::Des..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_array::_{{closure}} (361 samples, 12.63%)</title><rect x="13.6761%" y="389" width="12.6268%" height="15" fill="rgb(254,171,16)" fg:x="391" fg:w="361"/><text x="13.9261%" y="399.50">serde_cbor::de::Des..</text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_seq (360 samples, 12.59%)</title><rect x="13.7111%" y="373" width="12.5918%" height="15" fill="rgb(230,171,20)" fg:x="392" fg:w="360"/><text x="13.9611%" y="383.50">&lt;serde_json::value:..</text></g><g><title>serde::de::SeqAccess::next_element (213 samples, 7.45%)</title><rect x="18.8527%" y="357" width="7.4502%" height="15" fill="rgb(210,71,41)" fg:x="539" fg:w="213"/><text x="19.1027%" y="367.50">serde::de:..</text></g><g><title>&lt;serde_cbor::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (213 samples, 7.45%)</title><rect x="18.8527%" y="341" width="7.4502%" height="15" fill="rgb(206,173,20)" fg:x="539" fg:w="213"/><text x="19.1027%" y="351.50">&lt;serde_cbo..</text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (72 samples, 2.52%)</title><rect x="23.7845%" y="325" width="2.5184%" height="15" fill="rgb(233,88,34)" fg:x="680" fg:w="72"/><text x="24.0345%" y="335.50">&lt;c..</text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (1 samples, 0.03%)</title><rect x="26.4078%" y="261" width="0.0350%" height="15" fill="rgb(223,209,46)" fg:x="755" fg:w="1"/><text x="26.6578%" y="271.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="26.4078%" y="245" width="0.0350%" height="15" fill="rgb(250,43,18)" fg:x="755" fg:w="1"/><text x="26.6578%" y="255.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (3 samples, 0.10%)</title><rect x="26.3729%" y="357" width="0.1049%" height="15" fill="rgb(208,13,10)" fg:x="754" fg:w="3"/><text x="26.6229%" y="367.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::DeserializeSeed&gt;::deserialize (3 samples, 0.10%)</title><rect x="26.3729%" y="341" width="0.1049%" height="15" fill="rgb(212,200,36)" fg:x="754" fg:w="3"/><text x="26.6229%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (3 samples, 0.10%)</title><rect x="26.3729%" y="325" width="0.1049%" height="15" fill="rgb(225,90,30)" fg:x="754" fg:w="3"/><text x="26.6229%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (3 samples, 0.10%)</title><rect x="26.3729%" y="309" width="0.1049%" height="15" fill="rgb(236,182,39)" fg:x="754" fg:w="3"/><text x="26.6229%" y="319.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (3 samples, 0.10%)</title><rect x="26.3729%" y="293" width="0.1049%" height="15" fill="rgb(212,144,35)" fg:x="754" fg:w="3"/><text x="26.6229%" y="303.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (2 samples, 0.07%)</title><rect x="26.4078%" y="277" width="0.0700%" height="15" fill="rgb(228,63,44)" fg:x="755" fg:w="2"/><text x="26.6578%" y="287.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (1 samples, 0.03%)</title><rect x="26.4428%" y="261" width="0.0350%" height="15" fill="rgb(228,109,6)" fg:x="756" fg:w="1"/><text x="26.6928%" y="271.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.03%)</title><rect x="26.4428%" y="245" width="0.0350%" height="15" fill="rgb(238,117,24)" fg:x="756" fg:w="1"/><text x="26.6928%" y="255.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.03%)</title><rect x="26.4428%" y="229" width="0.0350%" height="15" fill="rgb(242,26,26)" fg:x="756" fg:w="1"/><text x="26.6928%" y="239.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map (6 samples, 0.21%)</title><rect x="26.3029%" y="421" width="0.2099%" height="15" fill="rgb(221,92,48)" fg:x="752" fg:w="6"/><text x="26.5529%" y="431.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (6 samples, 0.21%)</title><rect x="26.3029%" y="405" width="0.2099%" height="15" fill="rgb(209,209,32)" fg:x="752" fg:w="6"/><text x="26.5529%" y="415.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map::_{{closure}} (6 samples, 0.21%)</title><rect x="26.3029%" y="389" width="0.2099%" height="15" fill="rgb(221,70,22)" fg:x="752" fg:w="6"/><text x="26.5529%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (5 samples, 0.17%)</title><rect x="26.3379%" y="373" width="0.1749%" height="15" fill="rgb(248,145,5)" fg:x="753" fg:w="5"/><text x="26.5879%" y="383.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (1 samples, 0.03%)</title><rect x="26.4778%" y="357" width="0.0350%" height="15" fill="rgb(226,116,26)" fg:x="757" fg:w="1"/><text x="26.7278%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="26.4778%" y="341" width="0.0350%" height="15" fill="rgb(244,5,17)" fg:x="757" fg:w="1"/><text x="26.7278%" y="351.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="26.4778%" y="325" width="0.0350%" height="15" fill="rgb(252,159,33)" fg:x="757" fg:w="1"/><text x="26.7278%" y="335.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.03%)</title><rect x="26.4778%" y="309" width="0.0350%" height="15" fill="rgb(206,71,0)" fg:x="757" fg:w="1"/><text x="26.7278%" y="319.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.03%)</title><rect x="26.4778%" y="293" width="0.0350%" height="15" fill="rgb(233,118,54)" fg:x="757" fg:w="1"/><text x="26.7278%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.03%)</title><rect x="26.4778%" y="277" width="0.0350%" height="15" fill="rgb(234,83,48)" fg:x="757" fg:w="1"/><text x="26.7278%" y="287.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.03%)</title><rect x="26.4778%" y="261" width="0.0350%" height="15" fill="rgb(228,3,54)" fg:x="757" fg:w="1"/><text x="26.7278%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="26.4778%" y="245" width="0.0350%" height="15" fill="rgb(226,155,13)" fg:x="757" fg:w="1"/><text x="26.7278%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="26.4778%" y="229" width="0.0350%" height="15" fill="rgb(241,28,37)" fg:x="757" fg:w="1"/><text x="26.7278%" y="239.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="26.4778%" y="213" width="0.0350%" height="15" fill="rgb(233,93,10)" fg:x="757" fg:w="1"/><text x="26.7278%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="26.4778%" y="197" width="0.0350%" height="15" fill="rgb(225,113,19)" fg:x="757" fg:w="1"/><text x="26.7278%" y="207.50"></text></g><g><title>serde::de::MapAccess::next_entry (389 samples, 13.61%)</title><rect x="12.9416%" y="533" width="13.6062%" height="15" fill="rgb(241,2,18)" fg:x="370" fg:w="389"/><text x="13.1916%" y="543.50">serde::de::MapAccess:..</text></g><g><title>serde::de::MapAccess::next_entry_seed (389 samples, 13.61%)</title><rect x="12.9416%" y="517" width="13.6062%" height="15" fill="rgb(228,207,21)" fg:x="370" fg:w="389"/><text x="13.1916%" y="527.50">serde::de::MapAccess:..</text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (371 samples, 12.98%)</title><rect x="13.5712%" y="501" width="12.9766%" height="15" fill="rgb(213,211,35)" fg:x="388" fg:w="371"/><text x="13.8212%" y="511.50">&lt;serde_cbor::de::Ma..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (371 samples, 12.98%)</title><rect x="13.5712%" y="485" width="12.9766%" height="15" fill="rgb(209,83,10)" fg:x="388" fg:w="371"/><text x="13.8212%" y="495.50">&lt;core::marker::Phan..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (371 samples, 12.98%)</title><rect x="13.5712%" y="469" width="12.9766%" height="15" fill="rgb(209,164,1)" fg:x="388" fg:w="371"/><text x="13.8212%" y="479.50">serde_json::value::..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (371 samples, 12.98%)</title><rect x="13.5712%" y="453" width="12.9766%" height="15" fill="rgb(213,184,43)" fg:x="388" fg:w="371"/><text x="13.8212%" y="463.50">&lt;&amp;mut serde_cbor::d..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (369 samples, 12.91%)</title><rect x="13.6411%" y="437" width="12.9066%" height="15" fill="rgb(231,61,34)" fg:x="390" fg:w="369"/><text x="13.8911%" y="447.50">serde_cbor::de::Des..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (1 samples, 0.03%)</title><rect x="26.5128%" y="421" width="0.0350%" height="15" fill="rgb(235,75,3)" fg:x="758" fg:w="1"/><text x="26.7628%" y="431.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (1 samples, 0.03%)</title><rect x="26.5128%" y="405" width="0.0350%" height="15" fill="rgb(220,106,47)" fg:x="758" fg:w="1"/><text x="26.7628%" y="415.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (1 samples, 0.03%)</title><rect x="26.5128%" y="389" width="0.0350%" height="15" fill="rgb(210,196,33)" fg:x="758" fg:w="1"/><text x="26.7628%" y="399.50"></text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.10%)</title><rect x="26.6177%" y="373" width="0.1049%" height="15" fill="rgb(229,154,42)" fg:x="761" fg:w="3"/><text x="26.8677%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (6 samples, 0.21%)</title><rect x="26.6177%" y="437" width="0.2099%" height="15" fill="rgb(228,114,26)" fg:x="761" fg:w="6"/><text x="26.8677%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.21%)</title><rect x="26.6177%" y="421" width="0.2099%" height="15" fill="rgb(208,144,1)" fg:x="761" fg:w="6"/><text x="26.8677%" y="431.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (6 samples, 0.21%)</title><rect x="26.6177%" y="405" width="0.2099%" height="15" fill="rgb(239,112,37)" fg:x="761" fg:w="6"/><text x="26.8677%" y="415.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (6 samples, 0.21%)</title><rect x="26.6177%" y="389" width="0.2099%" height="15" fill="rgb(210,96,50)" fg:x="761" fg:w="6"/><text x="26.8677%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (3 samples, 0.10%)</title><rect x="26.7226%" y="373" width="0.1049%" height="15" fill="rgb(222,178,2)" fg:x="764" fg:w="3"/><text x="26.9726%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (8 samples, 0.28%)</title><rect x="26.5827%" y="501" width="0.2798%" height="15" fill="rgb(226,74,18)" fg:x="760" fg:w="8"/><text x="26.8327%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (8 samples, 0.28%)</title><rect x="26.5827%" y="485" width="0.2798%" height="15" fill="rgb(225,67,54)" fg:x="760" fg:w="8"/><text x="26.8327%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (8 samples, 0.28%)</title><rect x="26.5827%" y="469" width="0.2798%" height="15" fill="rgb(251,92,32)" fg:x="760" fg:w="8"/><text x="26.8327%" y="479.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (8 samples, 0.28%)</title><rect x="26.5827%" y="453" width="0.2798%" height="15" fill="rgb(228,149,22)" fg:x="760" fg:w="8"/><text x="26.8327%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="26.8276%" y="437" width="0.0350%" height="15" fill="rgb(243,54,13)" fg:x="767" fg:w="1"/><text x="27.0776%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="26.8276%" y="421" width="0.0350%" height="15" fill="rgb(243,180,28)" fg:x="767" fg:w="1"/><text x="27.0776%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_val_mut (1 samples, 0.03%)</title><rect x="26.9325%" y="485" width="0.0350%" height="15" fill="rgb(208,167,24)" fg:x="770" fg:w="1"/><text x="27.1825%" y="495.50"></text></g><g><title>mmap_payload_storage::payload::Payload::from_bytes (406 samples, 14.20%)</title><rect x="12.8367%" y="741" width="14.2008%" height="15" fill="rgb(245,73,45)" fg:x="367" fg:w="406"/><text x="13.0867%" y="751.50">mmap_payload_storage::..</text></g><g><title>serde_cbor::de::from_slice (405 samples, 14.17%)</title><rect x="12.8716%" y="725" width="14.1658%" height="15" fill="rgb(237,203,48)" fg:x="368" fg:w="405"/><text x="13.1216%" y="735.50">serde_cbor::de::from_s..</text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::de::Deserialize for mmap_payload_storage::payload::Payload&gt;::deserialize (405 samples, 14.17%)</title><rect x="12.8716%" y="709" width="14.1658%" height="15" fill="rgb(211,197,16)" fg:x="368" fg:w="405"/><text x="13.1216%" y="719.50">mmap_payload_storage::..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (405 samples, 14.17%)</title><rect x="12.8716%" y="693" width="14.1658%" height="15" fill="rgb(243,99,51)" fg:x="368" fg:w="405"/><text x="13.1216%" y="703.50">&lt;&amp;mut serde_cbor::de::..</text></g><g><title>&lt;mmap_payload_storage::payload::_::&lt;impl serde::de::Deserialize for mmap_payload_storage::payload::Payload&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_newtype_struct (405 samples, 14.17%)</title><rect x="12.8716%" y="677" width="14.1658%" height="15" fill="rgb(215,123,29)" fg:x="368" fg:w="405"/><text x="13.1216%" y="687.50">&lt;mmap_payload_storage:..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize (405 samples, 14.17%)</title><rect x="12.8716%" y="661" width="14.1658%" height="15" fill="rgb(239,186,37)" fg:x="368" fg:w="405"/><text x="13.1216%" y="671.50">&lt;serde_json::map::Map&lt;..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (405 samples, 14.17%)</title><rect x="12.8716%" y="645" width="14.1658%" height="15" fill="rgb(252,136,39)" fg:x="368" fg:w="405"/><text x="13.1216%" y="655.50">&lt;&amp;mut serde_cbor::de::..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (405 samples, 14.17%)</title><rect x="12.8716%" y="629" width="14.1658%" height="15" fill="rgb(223,213,32)" fg:x="368" fg:w="405"/><text x="13.1216%" y="639.50">&lt;&amp;mut serde_cbor::de::..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (405 samples, 14.17%)</title><rect x="12.8716%" y="613" width="14.1658%" height="15" fill="rgb(233,115,5)" fg:x="368" fg:w="405"/><text x="13.1216%" y="623.50">serde_cbor::de::Deseri..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map (404 samples, 14.13%)</title><rect x="12.9066%" y="597" width="14.1308%" height="15" fill="rgb(207,226,44)" fg:x="369" fg:w="404"/><text x="13.1566%" y="607.50">serde_cbor::de::Deser..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (404 samples, 14.13%)</title><rect x="12.9066%" y="581" width="14.1308%" height="15" fill="rgb(208,126,0)" fg:x="369" fg:w="404"/><text x="13.1566%" y="591.50">serde_cbor::de::Deser..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map::_{{closure}} (404 samples, 14.13%)</title><rect x="12.9066%" y="565" width="14.1308%" height="15" fill="rgb(244,66,21)" fg:x="369" fg:w="404"/><text x="13.1566%" y="575.50">serde_cbor::de::Deser..</text></g><g><title>&lt;&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize::Visitor as serde::de::Visitor&gt;::visit_map (403 samples, 14.10%)</title><rect x="12.9416%" y="549" width="14.0958%" height="15" fill="rgb(222,97,12)" fg:x="370" fg:w="403"/><text x="13.1916%" y="559.50">&lt;&lt;serde_json::map::Ma..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (14 samples, 0.49%)</title><rect x="26.5477%" y="533" width="0.4897%" height="15" fill="rgb(219,213,19)" fg:x="759" fg:w="14"/><text x="26.7977%" y="543.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (14 samples, 0.49%)</title><rect x="26.5477%" y="517" width="0.4897%" height="15" fill="rgb(252,169,30)" fg:x="759" fg:w="14"/><text x="26.7977%" y="527.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (5 samples, 0.17%)</title><rect x="26.8625%" y="501" width="0.1749%" height="15" fill="rgb(206,32,51)" fg:x="768" fg:w="5"/><text x="27.1125%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (2 samples, 0.07%)</title><rect x="26.9675%" y="485" width="0.0700%" height="15" fill="rgb(250,172,42)" fg:x="771" fg:w="2"/><text x="27.2175%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (2 samples, 0.07%)</title><rect x="26.9675%" y="469" width="0.0700%" height="15" fill="rgb(209,34,43)" fg:x="771" fg:w="2"/><text x="27.2175%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (2 samples, 0.07%)</title><rect x="26.9675%" y="453" width="0.0700%" height="15" fill="rgb(223,11,35)" fg:x="771" fg:w="2"/><text x="27.2175%" y="463.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.03%)</title><rect x="27.0024%" y="437" width="0.0350%" height="15" fill="rgb(251,219,26)" fg:x="772" fg:w="1"/><text x="27.2524%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.03%)</title><rect x="27.0024%" y="421" width="0.0350%" height="15" fill="rgb(231,119,3)" fg:x="772" fg:w="1"/><text x="27.2524%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (11 samples, 0.38%)</title><rect x="27.0374%" y="693" width="0.3847%" height="15" fill="rgb(216,97,11)" fg:x="773" fg:w="11"/><text x="27.2874%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (11 samples, 0.38%)</title><rect x="27.0374%" y="677" width="0.3847%" height="15" fill="rgb(223,59,9)" fg:x="773" fg:w="11"/><text x="27.2874%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (11 samples, 0.38%)</title><rect x="27.0374%" y="661" width="0.3847%" height="15" fill="rgb(233,93,31)" fg:x="773" fg:w="11"/><text x="27.2874%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (11 samples, 0.38%)</title><rect x="27.0374%" y="645" width="0.3847%" height="15" fill="rgb(239,81,33)" fg:x="773" fg:w="11"/><text x="27.2874%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.38%)</title><rect x="27.0374%" y="629" width="0.3847%" height="15" fill="rgb(213,120,34)" fg:x="773" fg:w="11"/><text x="27.2874%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.38%)</title><rect x="27.0374%" y="613" width="0.3847%" height="15" fill="rgb(243,49,53)" fg:x="773" fg:w="11"/><text x="27.2874%" y="623.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.38%)</title><rect x="27.0374%" y="597" width="0.3847%" height="15" fill="rgb(247,216,33)" fg:x="773" fg:w="11"/><text x="27.2874%" y="607.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.38%)</title><rect x="27.0374%" y="581" width="0.3847%" height="15" fill="rgb(226,26,14)" fg:x="773" fg:w="11"/><text x="27.2874%" y="591.50"></text></g><g><title>_int_malloc (11 samples, 0.38%)</title><rect x="27.0374%" y="565" width="0.3847%" height="15" fill="rgb(215,49,53)" fg:x="773" fg:w="11"/><text x="27.2874%" y="575.50"></text></g><g><title>malloc_consolidate (6 samples, 0.21%)</title><rect x="27.2123%" y="549" width="0.2099%" height="15" fill="rgb(245,162,40)" fg:x="778" fg:w="6"/><text x="27.4623%" y="559.50"></text></g><g><title>lz4_flex::block::decompress::duplicate (1 samples, 0.03%)</title><rect x="27.4222%" y="677" width="0.0350%" height="15" fill="rgb(229,68,17)" fg:x="784" fg:w="1"/><text x="27.6722%" y="687.50"></text></g><g><title>lz4_flex::block::decompress::wild_copy_from_src_16 (1 samples, 0.03%)</title><rect x="27.4222%" y="661" width="0.0350%" height="15" fill="rgb(213,182,10)" fg:x="784" fg:w="1"/><text x="27.6722%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="27.4222%" y="645" width="0.0350%" height="15" fill="rgb(245,125,30)" fg:x="784" fg:w="1"/><text x="27.6722%" y="655.50"></text></g><g><title>lz4_flex::block::decompress::read_integer_ptr (1 samples, 0.03%)</title><rect x="27.4572%" y="677" width="0.0350%" height="15" fill="rgb(232,202,2)" fg:x="785" fg:w="1"/><text x="27.7072%" y="687.50"></text></g><g><title>lz4_flex::block::decompress::decompress (27 samples, 0.94%)</title><rect x="27.0374%" y="709" width="0.9444%" height="15" fill="rgb(237,140,51)" fg:x="773" fg:w="27"/><text x="27.2874%" y="719.50"></text></g><g><title>lz4_flex::block::decompress::decompress_internal (16 samples, 0.56%)</title><rect x="27.4222%" y="693" width="0.5596%" height="15" fill="rgb(236,157,25)" fg:x="784" fg:w="16"/><text x="27.6722%" y="703.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::slice_copy (14 samples, 0.49%)</title><rect x="27.4921%" y="677" width="0.4897%" height="15" fill="rgb(219,209,0)" fg:x="786" fg:w="14"/><text x="27.7421%" y="687.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::wild_copy_from_src (14 samples, 0.49%)</title><rect x="27.4921%" y="661" width="0.4897%" height="15" fill="rgb(240,116,54)" fg:x="786" fg:w="14"/><text x="27.7421%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.49%)</title><rect x="27.4921%" y="645" width="0.4897%" height="15" fill="rgb(216,10,36)" fg:x="786" fg:w="14"/><text x="27.7421%" y="655.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="27.9468%" y="629" width="0.0350%" height="15" fill="rgb(222,72,44)" fg:x="799" fg:w="1"/><text x="28.1968%" y="639.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="27.9468%" y="613" width="0.0350%" height="15" fill="rgb(232,159,9)" fg:x="799" fg:w="1"/><text x="28.1968%" y="623.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="27.9468%" y="597" width="0.0350%" height="15" fill="rgb(210,39,32)" fg:x="799" fg:w="1"/><text x="28.1968%" y="607.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="27.9468%" y="581" width="0.0350%" height="15" fill="rgb(216,194,45)" fg:x="799" fg:w="1"/><text x="28.1968%" y="591.50"></text></g><g><title>tick_program_event (1 samples, 0.03%)</title><rect x="27.9468%" y="565" width="0.0350%" height="15" fill="rgb(218,18,35)" fg:x="799" fg:w="1"/><text x="28.1968%" y="575.50"></text></g><g><title>clockevents_program_event (1 samples, 0.03%)</title><rect x="27.9468%" y="549" width="0.0350%" height="15" fill="rgb(207,83,51)" fg:x="799" fg:w="1"/><text x="28.1968%" y="559.50"></text></g><g><title>read_tsc (1 samples, 0.03%)</title><rect x="27.9468%" y="533" width="0.0350%" height="15" fill="rgb(225,63,43)" fg:x="799" fg:w="1"/><text x="28.1968%" y="543.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::decompress (38 samples, 1.33%)</title><rect x="27.0374%" y="741" width="1.3291%" height="15" fill="rgb(207,57,36)" fg:x="773" fg:w="38"/><text x="27.2874%" y="751.50"></text></g><g><title>lz4_flex::block::decompress::decompress_size_prepended (38 samples, 1.33%)</title><rect x="27.0374%" y="725" width="1.3291%" height="15" fill="rgb(216,99,33)" fg:x="773" fg:w="38"/><text x="27.2874%" y="735.50"></text></g><g><title>lz4_flex::block::uncompressed_size (11 samples, 0.38%)</title><rect x="27.9818%" y="709" width="0.3847%" height="15" fill="rgb(225,42,16)" fg:x="800" fg:w="11"/><text x="28.2318%" y="719.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_pointer (1 samples, 0.03%)</title><rect x="28.3666%" y="741" width="0.0350%" height="15" fill="rgb(220,201,45)" fg:x="811" fg:w="1"/><text x="28.6166%" y="751.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::get (1 samples, 0.03%)</title><rect x="28.3666%" y="725" width="0.0350%" height="15" fill="rgb(225,33,4)" fg:x="811" fg:w="1"/><text x="28.6166%" y="735.50"></text></g><g><title>core::option::Option&lt;T&gt;::and_then (1 samples, 0.03%)</title><rect x="28.3666%" y="709" width="0.0350%" height="15" fill="rgb(224,33,50)" fg:x="811" fg:w="1"/><text x="28.6166%" y="719.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::get::_{{closure}} (1 samples, 0.03%)</title><rect x="28.3666%" y="693" width="0.0350%" height="15" fill="rgb(246,198,51)" fg:x="811" fg:w="1"/><text x="28.6166%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (1 samples, 0.03%)</title><rect x="28.3666%" y="677" width="0.0350%" height="15" fill="rgb(205,22,4)" fg:x="811" fg:w="1"/><text x="28.6166%" y="687.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_payload (448 samples, 15.67%)</title><rect x="12.7667%" y="757" width="15.6698%" height="15" fill="rgb(206,3,8)" fg:x="365" fg:w="448"/><text x="13.0167%" y="767.50">mmap_payload_storage::pa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.03%)</title><rect x="28.4015%" y="741" width="0.0350%" height="15" fill="rgb(251,23,15)" fg:x="812" fg:w="1"/><text x="28.6515%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.03%)</title><rect x="28.4015%" y="725" width="0.0350%" height="15" fill="rgb(252,88,28)" fg:x="812" fg:w="1"/><text x="28.6515%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.03%)</title><rect x="28.4015%" y="709" width="0.0350%" height="15" fill="rgb(212,127,14)" fg:x="812" fg:w="1"/><text x="28.6515%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.03%)</title><rect x="28.4015%" y="693" width="0.0350%" height="15" fill="rgb(247,145,37)" fg:x="812" fg:w="1"/><text x="28.6515%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="28.4015%" y="677" width="0.0350%" height="15" fill="rgb(209,117,53)" fg:x="812" fg:w="1"/><text x="28.6515%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="28.4015%" y="661" width="0.0350%" height="15" fill="rgb(212,90,42)" fg:x="812" fg:w="1"/><text x="28.6515%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.03%)</title><rect x="28.4015%" y="645" width="0.0350%" height="15" fill="rgb(218,164,37)" fg:x="812" fg:w="1"/><text x="28.6515%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.03%)</title><rect x="28.4015%" y="629" width="0.0350%" height="15" fill="rgb(246,65,34)" fg:x="812" fg:w="1"/><text x="28.6515%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="28.4015%" y="613" width="0.0350%" height="15" fill="rgb(231,100,33)" fg:x="812" fg:w="1"/><text x="28.6515%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="28.5065%" y="741" width="0.0350%" height="15" fill="rgb(228,126,14)" fg:x="815" fg:w="1"/><text x="28.7565%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="28.5065%" y="725" width="0.0350%" height="15" fill="rgb(215,173,21)" fg:x="815" fg:w="1"/><text x="28.7565%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="28.5065%" y="709" width="0.0350%" height="15" fill="rgb(210,6,40)" fg:x="815" fg:w="1"/><text x="28.7565%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="28.5764%" y="645" width="0.0350%" height="15" fill="rgb(212,48,18)" fg:x="817" fg:w="1"/><text x="28.8264%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.10%)</title><rect x="28.5414%" y="741" width="0.1049%" height="15" fill="rgb(230,214,11)" fg:x="816" fg:w="3"/><text x="28.7914%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.10%)</title><rect x="28.5414%" y="725" width="0.1049%" height="15" fill="rgb(254,105,39)" fg:x="816" fg:w="3"/><text x="28.7914%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.10%)</title><rect x="28.5414%" y="709" width="0.1049%" height="15" fill="rgb(245,158,5)" fg:x="816" fg:w="3"/><text x="28.7914%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.10%)</title><rect x="28.5414%" y="693" width="0.1049%" height="15" fill="rgb(249,208,11)" fg:x="816" fg:w="3"/><text x="28.7914%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.10%)</title><rect x="28.5414%" y="677" width="0.1049%" height="15" fill="rgb(210,39,28)" fg:x="816" fg:w="3"/><text x="28.7914%" y="687.50"></text></g><g><title>__GI___libc_free (3 samples, 0.10%)</title><rect x="28.5414%" y="661" width="0.1049%" height="15" fill="rgb(211,56,53)" fg:x="816" fg:w="3"/><text x="28.7914%" y="671.50"></text></g><g><title>unlink_chunk (1 samples, 0.03%)</title><rect x="28.6114%" y="645" width="0.0350%" height="15" fill="rgb(226,201,30)" fg:x="818" fg:w="1"/><text x="28.8614%" y="655.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="28.6464%" y="725" width="0.0350%" height="15" fill="rgb(239,101,34)" fg:x="819" fg:w="1"/><text x="28.8964%" y="735.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="28.6464%" y="709" width="0.0350%" height="15" fill="rgb(226,209,5)" fg:x="819" fg:w="1"/><text x="28.8964%" y="719.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="28.6464%" y="693" width="0.0350%" height="15" fill="rgb(250,105,47)" fg:x="819" fg:w="1"/><text x="28.8964%" y="703.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="28.6464%" y="677" width="0.0350%" height="15" fill="rgb(230,72,3)" fg:x="819" fg:w="1"/><text x="28.8964%" y="687.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="28.6464%" y="661" width="0.0350%" height="15" fill="rgb(232,218,39)" fg:x="819" fg:w="1"/><text x="28.8964%" y="671.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="28.6464%" y="645" width="0.0350%" height="15" fill="rgb(248,166,6)" fg:x="819" fg:w="1"/><text x="28.8964%" y="655.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::ensure_mapping_length (1 samples, 0.03%)</title><rect x="28.6814%" y="725" width="0.0350%" height="15" fill="rgb(247,89,20)" fg:x="820" fg:w="1"/><text x="28.9314%" y="735.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::resize_mapping (1 samples, 0.03%)</title><rect x="28.6814%" y="709" width="0.0350%" height="15" fill="rgb(248,130,54)" fg:x="820" fg:w="1"/><text x="28.9314%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::resize_with (1 samples, 0.03%)</title><rect x="28.6814%" y="693" width="0.0350%" height="15" fill="rgb(234,196,4)" fg:x="820" fg:w="1"/><text x="28.9314%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1 samples, 0.03%)</title><rect x="28.6814%" y="677" width="0.0350%" height="15" fill="rgb(250,143,31)" fg:x="820" fg:w="1"/><text x="28.9314%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1 samples, 0.03%)</title><rect x="28.6814%" y="661" width="0.0350%" height="15" fill="rgb(211,110,34)" fg:x="820" fg:w="1"/><text x="28.9314%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::adapters::take::SpecTake&gt;::spec_for_each (1 samples, 0.03%)</title><rect x="28.6814%" y="645" width="0.0350%" height="15" fill="rgb(215,124,48)" fg:x="820" fg:w="1"/><text x="28.9314%" y="655.50"></text></g><g><title>&lt;core::iter::sources::repeat_with::RepeatWith&lt;F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.03%)</title><rect x="28.6814%" y="629" width="0.0350%" height="15" fill="rgb(216,46,13)" fg:x="820" fg:w="1"/><text x="28.9314%" y="639.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::set (4 samples, 0.14%)</title><rect x="28.6464%" y="741" width="0.1399%" height="15" fill="rgb(205,184,25)" fg:x="819" fg:w="4"/><text x="28.8964%" y="751.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::persist_pointer (2 samples, 0.07%)</title><rect x="28.7163%" y="725" width="0.0700%" height="15" fill="rgb(228,1,10)" fg:x="821" fg:w="2"/><text x="28.9663%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.07%)</title><rect x="28.7163%" y="709" width="0.0700%" height="15" fill="rgb(213,116,27)" fg:x="821" fg:w="2"/><text x="28.9663%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="28.7163%" y="693" width="0.0700%" height="15" fill="rgb(241,95,50)" fg:x="821" fg:w="2"/><text x="28.9663%" y="703.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="677" width="0.0350%" height="15" fill="rgb(238,48,32)" fg:x="822" fg:w="1"/><text x="29.0013%" y="687.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="661" width="0.0350%" height="15" fill="rgb(235,113,49)" fg:x="822" fg:w="1"/><text x="29.0013%" y="671.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="645" width="0.0350%" height="15" fill="rgb(205,127,43)" fg:x="822" fg:w="1"/><text x="29.0013%" y="655.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="629" width="0.0350%" height="15" fill="rgb(250,162,2)" fg:x="822" fg:w="1"/><text x="29.0013%" y="639.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="613" width="0.0350%" height="15" fill="rgb(220,13,41)" fg:x="822" fg:w="1"/><text x="29.0013%" y="623.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="597" width="0.0350%" height="15" fill="rgb(249,221,25)" fg:x="822" fg:w="1"/><text x="29.0013%" y="607.50"></text></g><g><title>do_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="581" width="0.0350%" height="15" fill="rgb(215,208,19)" fg:x="822" fg:w="1"/><text x="29.0013%" y="591.50"></text></g><g><title>__do_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="565" width="0.0350%" height="15" fill="rgb(236,175,2)" fg:x="822" fg:w="1"/><text x="29.0013%" y="575.50"></text></g><g><title>filemap_fault (1 samples, 0.03%)</title><rect x="28.7513%" y="549" width="0.0350%" height="15" fill="rgb(241,52,2)" fg:x="822" fg:w="1"/><text x="29.0013%" y="559.50"></text></g><g><title>page_cache_async_ra (1 samples, 0.03%)</title><rect x="28.7513%" y="533" width="0.0350%" height="15" fill="rgb(248,140,14)" fg:x="822" fg:w="1"/><text x="29.0013%" y="543.50"></text></g><g><title>ondemand_readahead (1 samples, 0.03%)</title><rect x="28.7513%" y="517" width="0.0350%" height="15" fill="rgb(253,22,42)" fg:x="822" fg:w="1"/><text x="29.0013%" y="527.50"></text></g><g><title>page_cache_ra_order (1 samples, 0.03%)</title><rect x="28.7513%" y="501" width="0.0350%" height="15" fill="rgb(234,61,47)" fg:x="822" fg:w="1"/><text x="29.0013%" y="511.50"></text></g><g><title>page_cache_ra_unbounded (1 samples, 0.03%)</title><rect x="28.7513%" y="485" width="0.0350%" height="15" fill="rgb(208,226,15)" fg:x="822" fg:w="1"/><text x="29.0013%" y="495.50"></text></g><g><title>filemap_alloc_folio (1 samples, 0.03%)</title><rect x="28.7513%" y="469" width="0.0350%" height="15" fill="rgb(217,221,4)" fg:x="822" fg:w="1"/><text x="29.0013%" y="479.50"></text></g><g><title>folio_alloc (1 samples, 0.03%)</title><rect x="28.7513%" y="453" width="0.0350%" height="15" fill="rgb(212,174,34)" fg:x="822" fg:w="1"/><text x="29.0013%" y="463.50"></text></g><g><title>alloc_pages_mpol (1 samples, 0.03%)</title><rect x="28.7513%" y="437" width="0.0350%" height="15" fill="rgb(253,83,4)" fg:x="822" fg:w="1"/><text x="29.0013%" y="447.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="28.7513%" y="421" width="0.0350%" height="15" fill="rgb(250,195,49)" fg:x="822" fg:w="1"/><text x="29.0013%" y="431.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="28.7513%" y="405" width="0.0350%" height="15" fill="rgb(241,192,25)" fg:x="822" fg:w="1"/><text x="29.0013%" y="415.50"></text></g><g><title>_raw_spin_trylock (1 samples, 0.03%)</title><rect x="28.7513%" y="389" width="0.0350%" height="15" fill="rgb(208,124,10)" fg:x="822" fg:w="1"/><text x="29.0013%" y="399.50"></text></g><g><title>&lt;serde_json::map::Iter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="28.8213%" y="661" width="0.0700%" height="15" fill="rgb(222,33,0)" fg:x="824" fg:w="2"/><text x="29.0713%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.07%)</title><rect x="28.8213%" y="645" width="0.0700%" height="15" fill="rgb(234,209,28)" fg:x="824" fg:w="2"/><text x="29.0713%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (1 samples, 0.03%)</title><rect x="28.8562%" y="629" width="0.0350%" height="15" fill="rgb(224,11,23)" fg:x="825" fg:w="1"/><text x="29.1062%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (1 samples, 0.03%)</title><rect x="28.8562%" y="613" width="0.0350%" height="15" fill="rgb(232,99,1)" fg:x="825" fg:w="1"/><text x="29.1062%" y="623.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.03%)</title><rect x="28.8562%" y="597" width="0.0350%" height="15" fill="rgb(237,95,45)" fg:x="825" fg:w="1"/><text x="29.1062%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (1 samples, 0.03%)</title><rect x="28.8562%" y="581" width="0.0350%" height="15" fill="rgb(208,109,11)" fg:x="825" fg:w="1"/><text x="29.1062%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (1 samples, 0.03%)</title><rect x="28.8562%" y="565" width="0.0350%" height="15" fill="rgb(216,190,48)" fg:x="825" fg:w="1"/><text x="29.1062%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (1 samples, 0.03%)</title><rect x="28.8562%" y="549" width="0.0350%" height="15" fill="rgb(251,171,36)" fg:x="825" fg:w="1"/><text x="29.1062%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.03%)</title><rect x="28.8562%" y="533" width="0.0350%" height="15" fill="rgb(230,62,22)" fg:x="825" fg:w="1"/><text x="29.1062%" y="543.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="28.9612%" y="453" width="0.0350%" height="15" fill="rgb(225,114,35)" fg:x="828" fg:w="1"/><text x="29.2112%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="28.9612%" y="517" width="0.1049%" height="15" fill="rgb(215,118,42)" fg:x="828" fg:w="3"/><text x="29.2112%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="28.9612%" y="501" width="0.1049%" height="15" fill="rgb(243,119,21)" fg:x="828" fg:w="3"/><text x="29.2112%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.10%)</title><rect x="28.9612%" y="485" width="0.1049%" height="15" fill="rgb(252,177,53)" fg:x="828" fg:w="3"/><text x="29.2112%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.10%)</title><rect x="28.9612%" y="469" width="0.1049%" height="15" fill="rgb(237,209,29)" fg:x="828" fg:w="3"/><text x="29.2112%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="28.9962%" y="453" width="0.0700%" height="15" fill="rgb(212,65,23)" fg:x="829" fg:w="2"/><text x="29.2462%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.07%)</title><rect x="28.9962%" y="437" width="0.0700%" height="15" fill="rgb(230,222,46)" fg:x="829" fg:w="2"/><text x="29.2462%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.07%)</title><rect x="28.9962%" y="421" width="0.0700%" height="15" fill="rgb(215,135,32)" fg:x="829" fg:w="2"/><text x="29.2462%" y="431.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.07%)</title><rect x="28.9962%" y="405" width="0.0700%" height="15" fill="rgb(246,101,22)" fg:x="829" fg:w="2"/><text x="29.2462%" y="415.50"></text></g><g><title>__rdl_realloc (2 samples, 0.07%)</title><rect x="28.9962%" y="389" width="0.0700%" height="15" fill="rgb(206,107,13)" fg:x="829" fg:w="2"/><text x="29.2462%" y="399.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="29.0311%" y="373" width="0.0350%" height="15" fill="rgb(250,100,44)" fg:x="830" fg:w="1"/><text x="29.2811%" y="383.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (7 samples, 0.24%)</title><rect x="28.8912%" y="597" width="0.2448%" height="15" fill="rgb(231,147,38)" fg:x="826" fg:w="7"/><text x="29.1412%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (6 samples, 0.21%)</title><rect x="28.9262%" y="581" width="0.2099%" height="15" fill="rgb(229,8,40)" fg:x="827" fg:w="6"/><text x="29.1762%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.21%)</title><rect x="28.9262%" y="565" width="0.2099%" height="15" fill="rgb(221,135,30)" fg:x="827" fg:w="6"/><text x="29.1762%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.21%)</title><rect x="28.9262%" y="549" width="0.2099%" height="15" fill="rgb(249,193,18)" fg:x="827" fg:w="6"/><text x="29.1762%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.21%)</title><rect x="28.9262%" y="533" width="0.2099%" height="15" fill="rgb(209,133,39)" fg:x="827" fg:w="6"/><text x="29.1762%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="29.0661%" y="517" width="0.0700%" height="15" fill="rgb(232,100,14)" fg:x="831" fg:w="2"/><text x="29.3161%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="29.0661%" y="501" width="0.0700%" height="15" fill="rgb(224,185,1)" fg:x="831" fg:w="2"/><text x="29.3161%" y="511.50"></text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_key (8 samples, 0.28%)</title><rect x="28.8912%" y="645" width="0.2798%" height="15" fill="rgb(223,139,8)" fg:x="826" fg:w="8"/><text x="29.1412%" y="655.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (8 samples, 0.28%)</title><rect x="28.8912%" y="629" width="0.2798%" height="15" fill="rgb(232,213,38)" fg:x="826" fg:w="8"/><text x="29.1412%" y="639.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (8 samples, 0.28%)</title><rect x="28.8912%" y="613" width="0.2798%" height="15" fill="rgb(207,94,22)" fg:x="826" fg:w="8"/><text x="29.1412%" y="623.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="29.1361%" y="597" width="0.0350%" height="15" fill="rgb(219,183,54)" fg:x="833" fg:w="1"/><text x="29.3861%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_bool (1 samples, 0.03%)</title><rect x="29.2060%" y="613" width="0.0350%" height="15" fill="rgb(216,185,54)" fg:x="835" fg:w="1"/><text x="29.4560%" y="623.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="29.2060%" y="597" width="0.0350%" height="15" fill="rgb(254,217,39)" fg:x="835" fg:w="1"/><text x="29.4560%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="29.2060%" y="581" width="0.0350%" height="15" fill="rgb(240,178,23)" fg:x="835" fg:w="1"/><text x="29.4560%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="29.2060%" y="565" width="0.0350%" height="15" fill="rgb(218,11,47)" fg:x="835" fg:w="1"/><text x="29.4560%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="29.2060%" y="549" width="0.0350%" height="15" fill="rgb(218,51,51)" fg:x="835" fg:w="1"/><text x="29.4560%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="29.2060%" y="533" width="0.0350%" height="15" fill="rgb(238,126,27)" fg:x="835" fg:w="1"/><text x="29.4560%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="29.2060%" y="517" width="0.0350%" height="15" fill="rgb(249,202,22)" fg:x="835" fg:w="1"/><text x="29.4560%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.03%)</title><rect x="29.2060%" y="501" width="0.0350%" height="15" fill="rgb(254,195,49)" fg:x="835" fg:w="1"/><text x="29.4560%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="29.2060%" y="485" width="0.0350%" height="15" fill="rgb(208,123,14)" fg:x="835" fg:w="1"/><text x="29.4560%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.03%)</title><rect x="29.2060%" y="469" width="0.0350%" height="15" fill="rgb(224,200,8)" fg:x="835" fg:w="1"/><text x="29.4560%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.07%)</title><rect x="29.2760%" y="517" width="0.0700%" height="15" fill="rgb(217,61,36)" fg:x="837" fg:w="2"/><text x="29.5260%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.07%)</title><rect x="29.2760%" y="501" width="0.0700%" height="15" fill="rgb(206,35,45)" fg:x="837" fg:w="2"/><text x="29.5260%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.07%)</title><rect x="29.2760%" y="485" width="0.0700%" height="15" fill="rgb(217,65,33)" fg:x="837" fg:w="2"/><text x="29.5260%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.07%)</title><rect x="29.2760%" y="469" width="0.0700%" height="15" fill="rgb(222,158,48)" fg:x="837" fg:w="2"/><text x="29.5260%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="29.2760%" y="453" width="0.0700%" height="15" fill="rgb(254,2,54)" fg:x="837" fg:w="2"/><text x="29.5260%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.07%)</title><rect x="29.2760%" y="437" width="0.0700%" height="15" fill="rgb(250,143,38)" fg:x="837" fg:w="2"/><text x="29.5260%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.07%)</title><rect x="29.2760%" y="421" width="0.0700%" height="15" fill="rgb(248,25,0)" fg:x="837" fg:w="2"/><text x="29.5260%" y="431.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.07%)</title><rect x="29.2760%" y="405" width="0.0700%" height="15" fill="rgb(206,152,27)" fg:x="837" fg:w="2"/><text x="29.5260%" y="415.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.07%)</title><rect x="29.2760%" y="389" width="0.0700%" height="15" fill="rgb(240,77,30)" fg:x="837" fg:w="2"/><text x="29.5260%" y="399.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="29.3109%" y="373" width="0.0350%" height="15" fill="rgb(231,5,3)" fg:x="838" fg:w="1"/><text x="29.5609%" y="383.50"></text></g><g><title>unlink_chunk (1 samples, 0.03%)</title><rect x="29.3109%" y="357" width="0.0350%" height="15" fill="rgb(207,226,32)" fg:x="838" fg:w="1"/><text x="29.5609%" y="367.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (6 samples, 0.21%)</title><rect x="29.2410%" y="597" width="0.2099%" height="15" fill="rgb(222,207,47)" fg:x="836" fg:w="6"/><text x="29.4910%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (6 samples, 0.21%)</title><rect x="29.2410%" y="581" width="0.2099%" height="15" fill="rgb(229,115,45)" fg:x="836" fg:w="6"/><text x="29.4910%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.21%)</title><rect x="29.2410%" y="565" width="0.2099%" height="15" fill="rgb(224,191,6)" fg:x="836" fg:w="6"/><text x="29.4910%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.21%)</title><rect x="29.2410%" y="549" width="0.2099%" height="15" fill="rgb(230,227,24)" fg:x="836" fg:w="6"/><text x="29.4910%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.21%)</title><rect x="29.2410%" y="533" width="0.2099%" height="15" fill="rgb(228,80,19)" fg:x="836" fg:w="6"/><text x="29.4910%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="29.3459%" y="517" width="0.1049%" height="15" fill="rgb(247,229,0)" fg:x="839" fg:w="3"/><text x="29.5959%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="29.3459%" y="501" width="0.1049%" height="15" fill="rgb(237,194,15)" fg:x="839" fg:w="3"/><text x="29.5959%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="29.4509%" y="597" width="0.0350%" height="15" fill="rgb(219,203,20)" fg:x="842" fg:w="1"/><text x="29.7009%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (8 samples, 0.28%)</title><rect x="29.2410%" y="613" width="0.2798%" height="15" fill="rgb(234,128,8)" fg:x="836" fg:w="8"/><text x="29.4910%" y="623.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (1 samples, 0.03%)</title><rect x="29.4858%" y="597" width="0.0350%" height="15" fill="rgb(248,202,8)" fg:x="843" fg:w="1"/><text x="29.7358%" y="607.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (1 samples, 0.03%)</title><rect x="29.4858%" y="581" width="0.0350%" height="15" fill="rgb(206,104,37)" fg:x="843" fg:w="1"/><text x="29.7358%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (1 samples, 0.03%)</title><rect x="29.4858%" y="565" width="0.0350%" height="15" fill="rgb(223,8,27)" fg:x="843" fg:w="1"/><text x="29.7358%" y="575.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="29.4858%" y="549" width="0.0350%" height="15" fill="rgb(216,217,28)" fg:x="843" fg:w="1"/><text x="29.7358%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (1 samples, 0.03%)</title><rect x="29.4858%" y="533" width="0.0350%" height="15" fill="rgb(249,199,1)" fg:x="843" fg:w="1"/><text x="29.7358%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="29.4858%" y="517" width="0.0350%" height="15" fill="rgb(240,85,17)" fg:x="843" fg:w="1"/><text x="29.7358%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.03%)</title><rect x="29.4858%" y="501" width="0.0350%" height="15" fill="rgb(206,108,45)" fg:x="843" fg:w="1"/><text x="29.7358%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.03%)</title><rect x="29.4858%" y="485" width="0.0350%" height="15" fill="rgb(245,210,41)" fg:x="843" fg:w="1"/><text x="29.7358%" y="495.50"></text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::end (1 samples, 0.03%)</title><rect x="29.5208%" y="613" width="0.0350%" height="15" fill="rgb(206,13,37)" fg:x="844" fg:w="1"/><text x="29.7708%" y="623.50"></text></g><g><title>serde_cbor::ser::CollectionSerializer&lt;W&gt;::end_inner (1 samples, 0.03%)</title><rect x="29.5208%" y="597" width="0.0350%" height="15" fill="rgb(250,61,18)" fg:x="844" fg:w="1"/><text x="29.7708%" y="607.50"></text></g><g><title>&lt;serde_json::map::Iter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="29.5558%" y="613" width="0.0350%" height="15" fill="rgb(235,172,48)" fg:x="845" fg:w="1"/><text x="29.8058%" y="623.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="29.5558%" y="597" width="0.0350%" height="15" fill="rgb(249,201,17)" fg:x="845" fg:w="1"/><text x="29.8058%" y="607.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="29.6607%" y="245" width="0.0350%" height="15" fill="rgb(219,208,6)" fg:x="848" fg:w="1"/><text x="29.9107%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (10 samples, 0.35%)</title><rect x="29.5908%" y="405" width="0.3498%" height="15" fill="rgb(248,31,23)" fg:x="846" fg:w="10"/><text x="29.8408%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (10 samples, 0.35%)</title><rect x="29.5908%" y="389" width="0.3498%" height="15" fill="rgb(245,15,42)" fg:x="846" fg:w="10"/><text x="29.8408%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.35%)</title><rect x="29.5908%" y="373" width="0.3498%" height="15" fill="rgb(222,217,39)" fg:x="846" fg:w="10"/><text x="29.8408%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.35%)</title><rect x="29.5908%" y="357" width="0.3498%" height="15" fill="rgb(210,219,27)" fg:x="846" fg:w="10"/><text x="29.8408%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (10 samples, 0.35%)</title><rect x="29.5908%" y="341" width="0.3498%" height="15" fill="rgb(252,166,36)" fg:x="846" fg:w="10"/><text x="29.8408%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (10 samples, 0.35%)</title><rect x="29.5908%" y="325" width="0.3498%" height="15" fill="rgb(245,132,34)" fg:x="846" fg:w="10"/><text x="29.8408%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (10 samples, 0.35%)</title><rect x="29.5908%" y="309" width="0.3498%" height="15" fill="rgb(236,54,3)" fg:x="846" fg:w="10"/><text x="29.8408%" y="319.50"></text></g><g><title>alloc::alloc::realloc (10 samples, 0.35%)</title><rect x="29.5908%" y="293" width="0.3498%" height="15" fill="rgb(241,173,43)" fg:x="846" fg:w="10"/><text x="29.8408%" y="303.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.35%)</title><rect x="29.5908%" y="277" width="0.3498%" height="15" fill="rgb(215,190,9)" fg:x="846" fg:w="10"/><text x="29.8408%" y="287.50"></text></g><g><title>_int_realloc (8 samples, 0.28%)</title><rect x="29.6607%" y="261" width="0.2798%" height="15" fill="rgb(242,101,16)" fg:x="848" fg:w="8"/><text x="29.9107%" y="271.50"></text></g><g><title>_int_malloc (7 samples, 0.24%)</title><rect x="29.6957%" y="245" width="0.2448%" height="15" fill="rgb(223,190,21)" fg:x="849" fg:w="7"/><text x="29.9457%" y="255.50"></text></g><g><title>unlink_chunk (1 samples, 0.03%)</title><rect x="29.9056%" y="229" width="0.0350%" height="15" fill="rgb(215,228,25)" fg:x="855" fg:w="1"/><text x="30.1556%" y="239.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_seq (11 samples, 0.38%)</title><rect x="29.5908%" y="581" width="0.3847%" height="15" fill="rgb(225,36,22)" fg:x="846" fg:w="11"/><text x="29.8408%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::serialize_collection (11 samples, 0.38%)</title><rect x="29.5908%" y="565" width="0.3847%" height="15" fill="rgb(251,106,46)" fg:x="846" fg:w="11"/><text x="29.8408%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (11 samples, 0.38%)</title><rect x="29.5908%" y="549" width="0.3847%" height="15" fill="rgb(208,90,1)" fg:x="846" fg:w="11"/><text x="29.8408%" y="559.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (11 samples, 0.38%)</title><rect x="29.5908%" y="533" width="0.3847%" height="15" fill="rgb(243,10,4)" fg:x="846" fg:w="11"/><text x="29.8408%" y="543.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (11 samples, 0.38%)</title><rect x="29.5908%" y="517" width="0.3847%" height="15" fill="rgb(212,137,27)" fg:x="846" fg:w="11"/><text x="29.8408%" y="527.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (11 samples, 0.38%)</title><rect x="29.5908%" y="501" width="0.3847%" height="15" fill="rgb(231,220,49)" fg:x="846" fg:w="11"/><text x="29.8408%" y="511.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (11 samples, 0.38%)</title><rect x="29.5908%" y="485" width="0.3847%" height="15" fill="rgb(237,96,20)" fg:x="846" fg:w="11"/><text x="29.8408%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (11 samples, 0.38%)</title><rect x="29.5908%" y="469" width="0.3847%" height="15" fill="rgb(239,229,30)" fg:x="846" fg:w="11"/><text x="29.8408%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (11 samples, 0.38%)</title><rect x="29.5908%" y="453" width="0.3847%" height="15" fill="rgb(219,65,33)" fg:x="846" fg:w="11"/><text x="29.8408%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (11 samples, 0.38%)</title><rect x="29.5908%" y="437" width="0.3847%" height="15" fill="rgb(243,134,7)" fg:x="846" fg:w="11"/><text x="29.8408%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (11 samples, 0.38%)</title><rect x="29.5908%" y="421" width="0.3847%" height="15" fill="rgb(216,177,54)" fg:x="846" fg:w="11"/><text x="29.8408%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="29.9405%" y="405" width="0.0350%" height="15" fill="rgb(211,160,20)" fg:x="856" fg:w="1"/><text x="30.1905%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="29.9405%" y="389" width="0.0350%" height="15" fill="rgb(239,85,39)" fg:x="856" fg:w="1"/><text x="30.1905%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (19 samples, 0.66%)</title><rect x="29.9755%" y="549" width="0.6646%" height="15" fill="rgb(232,125,22)" fg:x="857" fg:w="19"/><text x="30.2255%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (3 samples, 0.10%)</title><rect x="31.8643%" y="341" width="0.1049%" height="15" fill="rgb(244,57,34)" fg:x="911" fg:w="3"/><text x="32.1143%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (2 samples, 0.07%)</title><rect x="31.8993%" y="325" width="0.0700%" height="15" fill="rgb(214,203,32)" fg:x="912" fg:w="2"/><text x="32.1493%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="31.9692%" y="309" width="0.0350%" height="15" fill="rgb(207,58,43)" fg:x="914" fg:w="1"/><text x="32.2192%" y="319.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.03%)</title><rect x="32.0392%" y="213" width="0.0350%" height="15" fill="rgb(215,193,15)" fg:x="916" fg:w="1"/><text x="32.2892%" y="223.50"></text></g><g><title>_int_malloc (5 samples, 0.17%)</title><rect x="32.0742%" y="213" width="0.1749%" height="15" fill="rgb(232,15,44)" fg:x="917" fg:w="5"/><text x="32.3242%" y="223.50"></text></g><g><title>unlink_chunk (3 samples, 0.10%)</title><rect x="32.1441%" y="197" width="0.1049%" height="15" fill="rgb(212,3,48)" fg:x="919" fg:w="3"/><text x="32.3941%" y="207.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.28%)</title><rect x="32.0042%" y="245" width="0.2798%" height="15" fill="rgb(218,128,7)" fg:x="915" fg:w="8"/><text x="32.2542%" y="255.50"></text></g><g><title>_int_realloc (8 samples, 0.28%)</title><rect x="32.0042%" y="229" width="0.2798%" height="15" fill="rgb(226,216,39)" fg:x="915" fg:w="8"/><text x="32.2542%" y="239.50"></text></g><g><title>unlink_chunk (1 samples, 0.03%)</title><rect x="32.2490%" y="213" width="0.0350%" height="15" fill="rgb(243,47,51)" fg:x="922" fg:w="1"/><text x="32.4990%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.31%)</title><rect x="32.0042%" y="309" width="0.3148%" height="15" fill="rgb(241,183,40)" fg:x="915" fg:w="9"/><text x="32.2542%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (9 samples, 0.31%)</title><rect x="32.0042%" y="293" width="0.3148%" height="15" fill="rgb(231,217,32)" fg:x="915" fg:w="9"/><text x="32.2542%" y="303.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.31%)</title><rect x="32.0042%" y="277" width="0.3148%" height="15" fill="rgb(229,61,38)" fg:x="915" fg:w="9"/><text x="32.2542%" y="287.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.31%)</title><rect x="32.0042%" y="261" width="0.3148%" height="15" fill="rgb(225,210,5)" fg:x="915" fg:w="9"/><text x="32.2542%" y="271.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="32.2840%" y="245" width="0.0350%" height="15" fill="rgb(231,79,45)" fg:x="923" fg:w="1"/><text x="32.5340%" y="255.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="32.2840%" y="229" width="0.0350%" height="15" fill="rgb(224,100,7)" fg:x="923" fg:w="1"/><text x="32.5340%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 0.49%)</title><rect x="31.8643%" y="373" width="0.4897%" height="15" fill="rgb(241,198,18)" fg:x="911" fg:w="14"/><text x="32.1143%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (14 samples, 0.49%)</title><rect x="31.8643%" y="357" width="0.4897%" height="15" fill="rgb(252,97,53)" fg:x="911" fg:w="14"/><text x="32.1143%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (11 samples, 0.38%)</title><rect x="31.9692%" y="341" width="0.3847%" height="15" fill="rgb(220,88,7)" fg:x="914" fg:w="11"/><text x="32.2192%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (11 samples, 0.38%)</title><rect x="31.9692%" y="325" width="0.3847%" height="15" fill="rgb(213,176,14)" fg:x="914" fg:w="11"/><text x="32.2192%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="32.3190%" y="309" width="0.0350%" height="15" fill="rgb(246,73,7)" fg:x="924" fg:w="1"/><text x="32.5690%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.03%)</title><rect x="32.3190%" y="293" width="0.0350%" height="15" fill="rgb(245,64,36)" fg:x="924" fg:w="1"/><text x="32.5690%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (38 samples, 1.33%)</title><rect x="31.8293%" y="437" width="1.3291%" height="15" fill="rgb(245,80,10)" fg:x="910" fg:w="38"/><text x="32.0793%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (38 samples, 1.33%)</title><rect x="31.8293%" y="421" width="1.3291%" height="15" fill="rgb(232,107,50)" fg:x="910" fg:w="38"/><text x="32.0793%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (38 samples, 1.33%)</title><rect x="31.8293%" y="405" width="1.3291%" height="15" fill="rgb(253,3,0)" fg:x="910" fg:w="38"/><text x="32.0793%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (38 samples, 1.33%)</title><rect x="31.8293%" y="389" width="1.3291%" height="15" fill="rgb(212,99,53)" fg:x="910" fg:w="38"/><text x="32.0793%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (23 samples, 0.80%)</title><rect x="32.3540%" y="373" width="0.8045%" height="15" fill="rgb(249,111,54)" fg:x="925" fg:w="23"/><text x="32.6040%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (22 samples, 0.77%)</title><rect x="32.3889%" y="357" width="0.7695%" height="15" fill="rgb(249,55,30)" fg:x="926" fg:w="22"/><text x="32.6389%" y="367.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (42 samples, 1.47%)</title><rect x="31.7244%" y="453" width="1.4690%" height="15" fill="rgb(237,47,42)" fg:x="907" fg:w="42"/><text x="31.9744%" y="463.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="33.1584%" y="437" width="0.0350%" height="15" fill="rgb(211,20,18)" fg:x="948" fg:w="1"/><text x="33.4084%" y="447.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="33.1584%" y="421" width="0.0350%" height="15" fill="rgb(231,203,46)" fg:x="948" fg:w="1"/><text x="33.4084%" y="431.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="33.1584%" y="405" width="0.0350%" height="15" fill="rgb(237,142,3)" fg:x="948" fg:w="1"/><text x="33.4084%" y="415.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.03%)</title><rect x="33.1584%" y="389" width="0.0350%" height="15" fill="rgb(241,107,1)" fg:x="948" fg:w="1"/><text x="33.4084%" y="399.50"></text></g><g><title>handle_softirqs (1 samples, 0.03%)</title><rect x="33.1584%" y="373" width="0.0350%" height="15" fill="rgb(229,83,13)" fg:x="948" fg:w="1"/><text x="33.4084%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.10%)</title><rect x="33.1934%" y="453" width="0.1049%" height="15" fill="rgb(241,91,40)" fg:x="949" fg:w="3"/><text x="33.4434%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="33.2984%" y="453" width="0.0350%" height="15" fill="rgb(225,3,45)" fg:x="952" fg:w="1"/><text x="33.5484%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="33.2984%" y="437" width="0.0350%" height="15" fill="rgb(244,223,14)" fg:x="952" fg:w="1"/><text x="33.5484%" y="447.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.03%)</title><rect x="34.5226%" y="197" width="0.0350%" height="15" fill="rgb(224,124,37)" fg:x="987" fg:w="1"/><text x="34.7726%" y="207.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.03%)</title><rect x="34.5575%" y="197" width="0.0350%" height="15" fill="rgb(251,171,30)" fg:x="988" fg:w="1"/><text x="34.8075%" y="207.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="34.5575%" y="181" width="0.0350%" height="15" fill="rgb(236,46,54)" fg:x="988" fg:w="1"/><text x="34.8075%" y="191.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="34.5575%" y="165" width="0.0350%" height="15" fill="rgb(245,213,5)" fg:x="988" fg:w="1"/><text x="34.8075%" y="175.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="34.5575%" y="149" width="0.0350%" height="15" fill="rgb(230,144,27)" fg:x="988" fg:w="1"/><text x="34.8075%" y="159.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="34.5575%" y="133" width="0.0350%" height="15" fill="rgb(220,86,6)" fg:x="988" fg:w="1"/><text x="34.8075%" y="143.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="34.5575%" y="117" width="0.0350%" height="15" fill="rgb(240,20,13)" fg:x="988" fg:w="1"/><text x="34.8075%" y="127.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="34.5575%" y="101" width="0.0350%" height="15" fill="rgb(217,89,34)" fg:x="988" fg:w="1"/><text x="34.8075%" y="111.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="34.5575%" y="85" width="0.0350%" height="15" fill="rgb(229,13,5)" fg:x="988" fg:w="1"/><text x="34.8075%" y="95.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="34.5575%" y="69" width="0.0350%" height="15" fill="rgb(244,67,35)" fg:x="988" fg:w="1"/><text x="34.8075%" y="79.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="34.5575%" y="53" width="0.0350%" height="15" fill="rgb(221,40,2)" fg:x="988" fg:w="1"/><text x="34.8075%" y="63.50"></text></g><g><title>update_cfs_group (1 samples, 0.03%)</title><rect x="34.5575%" y="37" width="0.0350%" height="15" fill="rgb(237,157,21)" fg:x="988" fg:w="1"/><text x="34.8075%" y="47.50"></text></g><g><title>_int_malloc (2 samples, 0.07%)</title><rect x="34.5925%" y="197" width="0.0700%" height="15" fill="rgb(222,94,11)" fg:x="989" fg:w="2"/><text x="34.8425%" y="207.50"></text></g><g><title>_int_realloc (6 samples, 0.21%)</title><rect x="34.4876%" y="213" width="0.2099%" height="15" fill="rgb(249,113,6)" fg:x="986" fg:w="6"/><text x="34.7376%" y="223.50"></text></g><g><title>unlink_chunk (1 samples, 0.03%)</title><rect x="34.6625%" y="197" width="0.0350%" height="15" fill="rgb(238,137,36)" fg:x="991" fg:w="1"/><text x="34.9125%" y="207.50"></text></g><g><title>arena_for_chunk (1 samples, 0.03%)</title><rect x="34.6974%" y="213" width="0.0350%" height="15" fill="rgb(210,102,26)" fg:x="992" fg:w="1"/><text x="34.9474%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (14 samples, 0.49%)</title><rect x="34.3127%" y="357" width="0.4897%" height="15" fill="rgb(218,30,30)" fg:x="981" fg:w="14"/><text x="34.5627%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (13 samples, 0.45%)</title><rect x="34.3477%" y="341" width="0.4547%" height="15" fill="rgb(214,67,26)" fg:x="982" fg:w="13"/><text x="34.5977%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.42%)</title><rect x="34.3827%" y="325" width="0.4197%" height="15" fill="rgb(251,9,53)" fg:x="983" fg:w="12"/><text x="34.6327%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.42%)</title><rect x="34.3827%" y="309" width="0.4197%" height="15" fill="rgb(228,204,25)" fg:x="983" fg:w="12"/><text x="34.6327%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.42%)</title><rect x="34.3827%" y="293" width="0.4197%" height="15" fill="rgb(207,153,8)" fg:x="983" fg:w="12"/><text x="34.6327%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11 samples, 0.38%)</title><rect x="34.4176%" y="277" width="0.3847%" height="15" fill="rgb(242,9,16)" fg:x="984" fg:w="11"/><text x="34.6676%" y="287.50"></text></g><g><title>alloc::alloc::Global::grow_impl (11 samples, 0.38%)</title><rect x="34.4176%" y="261" width="0.3847%" height="15" fill="rgb(217,211,10)" fg:x="984" fg:w="11"/><text x="34.6676%" y="271.50"></text></g><g><title>alloc::alloc::realloc (11 samples, 0.38%)</title><rect x="34.4176%" y="245" width="0.3847%" height="15" fill="rgb(219,228,52)" fg:x="984" fg:w="11"/><text x="34.6676%" y="255.50"></text></g><g><title>__GI___libc_realloc (11 samples, 0.38%)</title><rect x="34.4176%" y="229" width="0.3847%" height="15" fill="rgb(231,92,29)" fg:x="984" fg:w="11"/><text x="34.6676%" y="239.50"></text></g><g><title>musable (2 samples, 0.07%)</title><rect x="34.7324%" y="213" width="0.0700%" height="15" fill="rgb(232,8,23)" fg:x="993" fg:w="2"/><text x="34.9824%" y="223.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="34.7674%" y="197" width="0.0350%" height="15" fill="rgb(216,211,34)" fg:x="994" fg:w="1"/><text x="35.0174%" y="207.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="34.7674%" y="181" width="0.0350%" height="15" fill="rgb(236,151,0)" fg:x="994" fg:w="1"/><text x="35.0174%" y="191.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="34.7674%" y="165" width="0.0350%" height="15" fill="rgb(209,168,3)" fg:x="994" fg:w="1"/><text x="35.0174%" y="175.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.03%)</title><rect x="34.7674%" y="149" width="0.0350%" height="15" fill="rgb(208,129,28)" fg:x="994" fg:w="1"/><text x="35.0174%" y="159.50"></text></g><g><title>sched_core_idle_cpu (1 samples, 0.03%)</title><rect x="34.7674%" y="133" width="0.0350%" height="15" fill="rgb(229,78,22)" fg:x="994" fg:w="1"/><text x="35.0174%" y="143.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.38%)</title><rect x="34.8024%" y="357" width="0.3847%" height="15" fill="rgb(228,187,13)" fg:x="995" fg:w="11"/><text x="35.0524%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (11 samples, 0.38%)</title><rect x="34.8024%" y="341" width="0.3847%" height="15" fill="rgb(240,119,24)" fg:x="995" fg:w="11"/><text x="35.0524%" y="351.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (38 samples, 1.33%)</title><rect x="33.9279%" y="437" width="1.3291%" height="15" fill="rgb(209,194,42)" fg:x="970" fg:w="38"/><text x="34.1779%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (37 samples, 1.29%)</title><rect x="33.9629%" y="421" width="1.2942%" height="15" fill="rgb(247,200,46)" fg:x="971" fg:w="37"/><text x="34.2129%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (31 samples, 1.08%)</title><rect x="34.1728%" y="405" width="1.0843%" height="15" fill="rgb(218,76,16)" fg:x="977" fg:w="31"/><text x="34.4228%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (31 samples, 1.08%)</title><rect x="34.1728%" y="389" width="1.0843%" height="15" fill="rgb(225,21,48)" fg:x="977" fg:w="31"/><text x="34.4228%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (31 samples, 1.08%)</title><rect x="34.1728%" y="373" width="1.0843%" height="15" fill="rgb(239,223,50)" fg:x="977" fg:w="31"/><text x="34.4228%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.07%)</title><rect x="35.1871%" y="357" width="0.0700%" height="15" fill="rgb(244,45,21)" fg:x="1006" fg:w="2"/><text x="35.4371%" y="367.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (128 samples, 4.48%)</title><rect x="30.9199%" y="485" width="4.4771%" height="15" fill="rgb(232,33,43)" fg:x="884" fg:w="128"/><text x="31.1699%" y="495.50">serde..</text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (119 samples, 4.16%)</title><rect x="31.2347%" y="469" width="4.1623%" height="15" fill="rgb(209,8,3)" fg:x="893" fg:w="119"/><text x="31.4847%" y="479.50">serde..</text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (59 samples, 2.06%)</title><rect x="33.3333%" y="453" width="2.0637%" height="15" fill="rgb(214,25,53)" fg:x="953" fg:w="59"/><text x="33.5833%" y="463.50">s..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.14%)</title><rect x="35.2571%" y="437" width="0.1399%" height="15" fill="rgb(254,186,54)" fg:x="1008" fg:w="4"/><text x="35.5071%" y="447.50"></text></g><g><title>mmap_payload_storage::payload::Payload::to_bytes (221 samples, 7.73%)</title><rect x="28.7863%" y="741" width="7.7300%" height="15" fill="rgb(208,174,49)" fg:x="823" fg:w="221"/><text x="29.0363%" y="751.50">mmap_payloa..</text></g><g><title>serde_cbor::ser::to_vec (221 samples, 7.73%)</title><rect x="28.7863%" y="725" width="7.7300%" height="15" fill="rgb(233,191,51)" fg:x="823" fg:w="221"/><text x="29.0363%" y="735.50">serde_cbor:..</text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::ser::Serialize for mmap_payload_storage::payload::Payload&gt;::serialize (221 samples, 7.73%)</title><rect x="28.7863%" y="709" width="7.7300%" height="15" fill="rgb(222,134,10)" fg:x="823" fg:w="221"/><text x="29.0363%" y="719.50">mmap_payloa..</text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_newtype_struct (221 samples, 7.73%)</title><rect x="28.7863%" y="693" width="7.7300%" height="15" fill="rgb(230,226,20)" fg:x="823" fg:w="221"/><text x="29.0363%" y="703.50">&lt;&amp;mut serde..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::ser::Serialize&gt;::serialize (221 samples, 7.73%)</title><rect x="28.7863%" y="677" width="7.7300%" height="15" fill="rgb(251,111,25)" fg:x="823" fg:w="221"/><text x="29.0363%" y="687.50">&lt;serde_json..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (218 samples, 7.63%)</title><rect x="28.8912%" y="661" width="7.6250%" height="15" fill="rgb(224,40,46)" fg:x="826" fg:w="218"/><text x="29.1412%" y="671.50">serde::ser..</text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_value (210 samples, 7.35%)</title><rect x="29.1710%" y="645" width="7.3452%" height="15" fill="rgb(236,108,47)" fg:x="834" fg:w="210"/><text x="29.4210%" y="655.50">&lt;serde_cbo..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (210 samples, 7.35%)</title><rect x="29.1710%" y="629" width="7.3452%" height="15" fill="rgb(234,93,0)" fg:x="834" fg:w="210"/><text x="29.4210%" y="639.50">serde_json..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::vec::Vec&lt;T&gt;&gt;::serialize (198 samples, 6.93%)</title><rect x="29.5908%" y="613" width="6.9255%" height="15" fill="rgb(224,213,32)" fg:x="846" fg:w="198"/><text x="29.8408%" y="623.50">serde::se..</text></g><g><title>serde::ser::Serializer::collect_seq (198 samples, 6.93%)</title><rect x="29.5908%" y="597" width="6.9255%" height="15" fill="rgb(251,11,48)" fg:x="846" fg:w="198"/><text x="29.8408%" y="607.50">serde::se..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (187 samples, 6.54%)</title><rect x="29.9755%" y="581" width="6.5407%" height="15" fill="rgb(236,173,5)" fg:x="857" fg:w="187"/><text x="30.2255%" y="591.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (187 samples, 6.54%)</title><rect x="29.9755%" y="565" width="6.5407%" height="15" fill="rgb(230,95,12)" fg:x="857" fg:w="187"/><text x="30.2255%" y="575.50">core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each::call::_{{closure}} (168 samples, 5.88%)</title><rect x="30.6401%" y="549" width="5.8762%" height="15" fill="rgb(232,209,1)" fg:x="876" fg:w="168"/><text x="30.8901%" y="559.50">core::i..</text></g><g><title>serde::ser::Serializer::collect_seq::_{{closure}} (168 samples, 5.88%)</title><rect x="30.6401%" y="533" width="5.8762%" height="15" fill="rgb(232,6,1)" fg:x="876" fg:w="168"/><text x="30.8901%" y="543.50">serde::..</text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeSeq&gt;::serialize_element (168 samples, 5.88%)</title><rect x="30.6401%" y="517" width="5.8762%" height="15" fill="rgb(210,224,50)" fg:x="876" fg:w="168"/><text x="30.8901%" y="527.50">&lt;serde_..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for &amp;T&gt;::serialize (168 samples, 5.88%)</title><rect x="30.6401%" y="501" width="5.8762%" height="15" fill="rgb(228,127,35)" fg:x="876" fg:w="168"/><text x="30.8901%" y="511.50">serde::..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (32 samples, 1.12%)</title><rect x="35.3970%" y="485" width="1.1193%" height="15" fill="rgb(245,102,45)" fg:x="1012" fg:w="32"/><text x="35.6470%" y="495.50"></text></g><g><title>&lt;serde_json::number::Number as serde::ser::Serialize&gt;::serialize (21 samples, 0.73%)</title><rect x="35.7817%" y="469" width="0.7345%" height="15" fill="rgb(214,1,49)" fg:x="1023" fg:w="21"/><text x="36.0317%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (6 samples, 0.21%)</title><rect x="36.5163%" y="693" width="0.2099%" height="15" fill="rgb(226,163,40)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.21%)</title><rect x="36.5163%" y="677" width="0.2099%" height="15" fill="rgb(239,212,28)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.21%)</title><rect x="36.5163%" y="661" width="0.2099%" height="15" fill="rgb(220,20,13)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (6 samples, 0.21%)</title><rect x="36.5163%" y="645" width="0.2099%" height="15" fill="rgb(210,164,35)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.21%)</title><rect x="36.5163%" y="629" width="0.2099%" height="15" fill="rgb(248,109,41)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.21%)</title><rect x="36.5163%" y="613" width="0.2099%" height="15" fill="rgb(238,23,50)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="623.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.21%)</title><rect x="36.5163%" y="597" width="0.2099%" height="15" fill="rgb(211,48,49)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="607.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.21%)</title><rect x="36.5163%" y="581" width="0.2099%" height="15" fill="rgb(223,36,21)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="591.50"></text></g><g><title>_int_malloc (6 samples, 0.21%)</title><rect x="36.5163%" y="565" width="0.2099%" height="15" fill="rgb(207,123,46)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="575.50"></text></g><g><title>malloc_consolidate (6 samples, 0.21%)</title><rect x="36.5163%" y="549" width="0.2099%" height="15" fill="rgb(240,218,32)" fg:x="1044" fg:w="6"/><text x="36.7663%" y="559.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="36.7261%" y="677" width="0.0350%" height="15" fill="rgb(252,5,43)" fg:x="1050" fg:w="1"/><text x="36.9761%" y="687.50"></text></g><g><title>systrim (1 samples, 0.03%)</title><rect x="36.7261%" y="661" width="0.0350%" height="15" fill="rgb(252,84,19)" fg:x="1050" fg:w="1"/><text x="36.9761%" y="671.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::get_at (3 samples, 0.10%)</title><rect x="38.6149%" y="661" width="0.1049%" height="15" fill="rgb(243,152,39)" fg:x="1104" fg:w="3"/><text x="38.8649%" y="671.50"></text></g><g><title>lz4_flex::block::compress::get_batch (8 samples, 0.28%)</title><rect x="38.7198%" y="645" width="0.2798%" height="15" fill="rgb(234,160,15)" fg:x="1107" fg:w="8"/><text x="38.9698%" y="655.50"></text></g><g><title>lz4_flex::block::compress::read_u32_ptr (8 samples, 0.28%)</title><rect x="38.7198%" y="629" width="0.2798%" height="15" fill="rgb(237,34,20)" fg:x="1107" fg:w="8"/><text x="38.9698%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.28%)</title><rect x="38.7198%" y="613" width="0.2798%" height="15" fill="rgb(229,97,13)" fg:x="1107" fg:w="8"/><text x="38.9698%" y="623.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::get_hash_at (13 samples, 0.45%)</title><rect x="38.7198%" y="661" width="0.4547%" height="15" fill="rgb(234,71,50)" fg:x="1107" fg:w="13"/><text x="38.9698%" y="671.50"></text></g><g><title>lz4_flex::block::hashtable::hash (5 samples, 0.17%)</title><rect x="38.9997%" y="645" width="0.1749%" height="15" fill="rgb(253,155,4)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="655.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_mul (5 samples, 0.17%)</title><rect x="38.9997%" y="629" width="0.1749%" height="15" fill="rgb(222,185,37)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="639.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.17%)</title><rect x="38.9997%" y="613" width="0.1749%" height="15" fill="rgb(251,177,13)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="623.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.17%)</title><rect x="38.9997%" y="597" width="0.1749%" height="15" fill="rgb(250,179,40)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="607.50"></text></g><g><title>irqentry_exit (5 samples, 0.17%)</title><rect x="38.9997%" y="581" width="0.1749%" height="15" fill="rgb(242,44,2)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="591.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.17%)</title><rect x="38.9997%" y="565" width="0.1749%" height="15" fill="rgb(216,177,13)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="575.50"></text></g><g><title>schedule (5 samples, 0.17%)</title><rect x="38.9997%" y="549" width="0.1749%" height="15" fill="rgb(216,106,43)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="559.50"></text></g><g><title>__schedule (5 samples, 0.17%)</title><rect x="38.9997%" y="533" width="0.1749%" height="15" fill="rgb(216,183,2)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="543.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.17%)</title><rect x="38.9997%" y="517" width="0.1749%" height="15" fill="rgb(249,75,3)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="527.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.17%)</title><rect x="38.9997%" y="501" width="0.1749%" height="15" fill="rgb(219,67,39)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="511.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.17%)</title><rect x="38.9997%" y="485" width="0.1749%" height="15" fill="rgb(253,228,2)" fg:x="1115" fg:w="5"/><text x="39.2497%" y="495.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.14%)</title><rect x="39.0346%" y="469" width="0.1399%" height="15" fill="rgb(235,138,27)" fg:x="1116" fg:w="4"/><text x="39.2846%" y="479.50"></text></g><g><title>intel_pmu_enable_all (4 samples, 0.14%)</title><rect x="39.0346%" y="453" width="0.1399%" height="15" fill="rgb(236,97,51)" fg:x="1116" fg:w="4"/><text x="39.2846%" y="463.50"></text></g><g><title>native_write_msr (4 samples, 0.14%)</title><rect x="39.0346%" y="437" width="0.1399%" height="15" fill="rgb(240,80,30)" fg:x="1116" fg:w="4"/><text x="39.2846%" y="447.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::put_at (4 samples, 0.14%)</title><rect x="39.1745%" y="661" width="0.1399%" height="15" fill="rgb(230,178,19)" fg:x="1120" fg:w="4"/><text x="39.4245%" y="671.50"></text></g><g><title>lz4_flex::block::compress::backtrack_match (1 samples, 0.03%)</title><rect x="39.3144%" y="661" width="0.0350%" height="15" fill="rgb(210,190,27)" fg:x="1124" fg:w="1"/><text x="39.5644%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="39.3144%" y="645" width="0.0350%" height="15" fill="rgb(222,107,31)" fg:x="1124" fg:w="1"/><text x="39.5644%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (1 samples, 0.03%)</title><rect x="39.3144%" y="629" width="0.0350%" height="15" fill="rgb(216,127,34)" fg:x="1124" fg:w="1"/><text x="39.5644%" y="639.50"></text></g><g><title>lz4_flex::block::compress::copy_literals_wild (3 samples, 0.10%)</title><rect x="39.3494%" y="661" width="0.1049%" height="15" fill="rgb(234,116,52)" fg:x="1125" fg:w="3"/><text x="39.5994%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="39.3494%" y="645" width="0.1049%" height="15" fill="rgb(222,124,15)" fg:x="1125" fg:w="3"/><text x="39.5994%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="39.3494%" y="629" width="0.1049%" height="15" fill="rgb(231,179,28)" fg:x="1125" fg:w="3"/><text x="39.5994%" y="639.50"></text></g><g><title>lz4_flex::block::compress::push_byte (1 samples, 0.03%)</title><rect x="39.4544%" y="661" width="0.0350%" height="15" fill="rgb(226,93,45)" fg:x="1128" fg:w="1"/><text x="39.7044%" y="671.50"></text></g><g><title>lz4_flex::block::compress::token_from_literal_and_match_length (1 samples, 0.03%)</title><rect x="39.4893%" y="661" width="0.0350%" height="15" fill="rgb(215,8,51)" fg:x="1129" fg:w="1"/><text x="39.7393%" y="671.50"></text></g><g><title>lz4_flex::block::compress::compress_internal (80 samples, 2.80%)</title><rect x="36.7611%" y="677" width="2.7982%" height="15" fill="rgb(223,106,5)" fg:x="1051" fg:w="80"/><text x="37.0111%" y="687.50">lz..</text></g><g><title>lz4_flex::block::compress::write_integer (1 samples, 0.03%)</title><rect x="39.5243%" y="661" width="0.0350%" height="15" fill="rgb(250,191,5)" fg:x="1130" fg:w="1"/><text x="39.7743%" y="671.50"></text></g><g><title>__libc_calloc (8 samples, 0.28%)</title><rect x="39.5593%" y="549" width="0.2798%" height="15" fill="rgb(242,132,44)" fg:x="1131" fg:w="8"/><text x="39.8093%" y="559.50"></text></g><g><title>_int_malloc (7 samples, 0.24%)</title><rect x="39.5943%" y="533" width="0.2448%" height="15" fill="rgb(251,152,29)" fg:x="1132" fg:w="7"/><text x="39.8443%" y="543.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::compress (102 samples, 3.57%)</title><rect x="36.5163%" y="741" width="3.5677%" height="15" fill="rgb(218,179,5)" fg:x="1044" fg:w="102"/><text x="36.7663%" y="751.50">mmap..</text></g><g><title>lz4_flex::block::compress::compress_prepend_size (102 samples, 3.57%)</title><rect x="36.5163%" y="725" width="3.5677%" height="15" fill="rgb(227,67,19)" fg:x="1044" fg:w="102"/><text x="36.7663%" y="735.50">lz4_..</text></g><g><title>lz4_flex::block::compress::compress_into_vec_with_dict (102 samples, 3.57%)</title><rect x="36.5163%" y="709" width="3.5677%" height="15" fill="rgb(233,119,31)" fg:x="1044" fg:w="102"/><text x="36.7663%" y="719.50">lz4_..</text></g><g><title>lz4_flex::block::compress::compress_into_sink_with_dict (96 samples, 3.36%)</title><rect x="36.7261%" y="693" width="3.3578%" height="15" fill="rgb(241,120,22)" fg:x="1050" fg:w="96"/><text x="36.9761%" y="703.50">lz4..</text></g><g><title>lz4_flex::block::hashtable::HashTable4KU16::new (15 samples, 0.52%)</title><rect x="39.5593%" y="677" width="0.5247%" height="15" fill="rgb(224,102,30)" fg:x="1131" fg:w="15"/><text x="39.8093%" y="687.50"></text></g><g><title>alloc::vec::from_elem (15 samples, 0.52%)</title><rect x="39.5593%" y="661" width="0.5247%" height="15" fill="rgb(210,164,37)" fg:x="1131" fg:w="15"/><text x="39.8093%" y="671.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (15 samples, 0.52%)</title><rect x="39.5593%" y="645" width="0.5247%" height="15" fill="rgb(226,191,16)" fg:x="1131" fg:w="15"/><text x="39.8093%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (15 samples, 0.52%)</title><rect x="39.5593%" y="629" width="0.5247%" height="15" fill="rgb(214,40,45)" fg:x="1131" fg:w="15"/><text x="39.8093%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (15 samples, 0.52%)</title><rect x="39.5593%" y="613" width="0.5247%" height="15" fill="rgb(244,29,26)" fg:x="1131" fg:w="15"/><text x="39.8093%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (15 samples, 0.52%)</title><rect x="39.5593%" y="597" width="0.5247%" height="15" fill="rgb(216,16,5)" fg:x="1131" fg:w="15"/><text x="39.8093%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.52%)</title><rect x="39.5593%" y="581" width="0.5247%" height="15" fill="rgb(249,76,35)" fg:x="1131" fg:w="15"/><text x="39.8093%" y="591.50"></text></g><g><title>alloc::alloc::alloc_zeroed (15 samples, 0.52%)</title><rect x="39.5593%" y="565" width="0.5247%" height="15" fill="rgb(207,11,44)" fg:x="1131" fg:w="15"/><text x="39.8093%" y="575.50"></text></g><g><title>__memset_avx2_unaligned_erms (7 samples, 0.24%)</title><rect x="39.8391%" y="549" width="0.2448%" height="15" fill="rgb(228,190,49)" fg:x="1139" fg:w="7"/><text x="40.0891%" y="559.50"></text></g><g><title>down_read_trylock (1 samples, 0.03%)</title><rect x="40.3987%" y="629" width="0.0350%" height="15" fill="rgb(214,173,12)" fg:x="1155" fg:w="1"/><text x="40.6487%" y="639.50"></text></g><g><title>__filemap_get_folio (2 samples, 0.07%)</title><rect x="40.5037%" y="533" width="0.0700%" height="15" fill="rgb(218,26,35)" fg:x="1158" fg:w="2"/><text x="40.7537%" y="543.50"></text></g><g><title>filemap_get_entry (2 samples, 0.07%)</title><rect x="40.5037%" y="517" width="0.0700%" height="15" fill="rgb(220,200,19)" fg:x="1158" fg:w="2"/><text x="40.7537%" y="527.50"></text></g><g><title>xas_load (1 samples, 0.03%)</title><rect x="40.5386%" y="501" width="0.0350%" height="15" fill="rgb(239,95,49)" fg:x="1159" fg:w="1"/><text x="40.7886%" y="511.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.03%)</title><rect x="40.6086%" y="453" width="0.0350%" height="15" fill="rgb(235,85,53)" fg:x="1161" fg:w="1"/><text x="40.8586%" y="463.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="40.6086%" y="437" width="0.0350%" height="15" fill="rgb(233,133,31)" fg:x="1161" fg:w="1"/><text x="40.8586%" y="447.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="40.6086%" y="421" width="0.0350%" height="15" fill="rgb(218,25,20)" fg:x="1161" fg:w="1"/><text x="40.8586%" y="431.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="40.6436%" y="453" width="0.0350%" height="15" fill="rgb(252,210,38)" fg:x="1162" fg:w="1"/><text x="40.8936%" y="463.50"></text></g><g><title>mem_cgroup_commit_charge (1 samples, 0.03%)</title><rect x="40.6436%" y="437" width="0.0350%" height="15" fill="rgb(242,134,21)" fg:x="1162" fg:w="1"/><text x="40.8936%" y="447.50"></text></g><g><title>xa_get_order (1 samples, 0.03%)</title><rect x="40.6786%" y="453" width="0.0350%" height="15" fill="rgb(213,28,48)" fg:x="1163" fg:w="1"/><text x="40.9286%" y="463.50"></text></g><g><title>xas_load (1 samples, 0.03%)</title><rect x="40.6786%" y="437" width="0.0350%" height="15" fill="rgb(250,196,2)" fg:x="1163" fg:w="1"/><text x="40.9286%" y="447.50"></text></g><g><title>__filemap_add_folio (5 samples, 0.17%)</title><rect x="40.5736%" y="469" width="0.1749%" height="15" fill="rgb(227,5,17)" fg:x="1160" fg:w="5"/><text x="40.8236%" y="479.50"></text></g><g><title>xas_store (1 samples, 0.03%)</title><rect x="40.7135%" y="453" width="0.0350%" height="15" fill="rgb(221,226,24)" fg:x="1164" fg:w="1"/><text x="40.9635%" y="463.50"></text></g><g><title>xas_create (1 samples, 0.03%)</title><rect x="40.7135%" y="437" width="0.0350%" height="15" fill="rgb(211,5,48)" fg:x="1164" fg:w="1"/><text x="40.9635%" y="447.50"></text></g><g><title>xas_descend (1 samples, 0.03%)</title><rect x="40.7135%" y="421" width="0.0350%" height="15" fill="rgb(219,150,6)" fg:x="1164" fg:w="1"/><text x="40.9635%" y="431.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="40.7485%" y="469" width="0.0350%" height="15" fill="rgb(251,46,16)" fg:x="1165" fg:w="1"/><text x="40.9985%" y="479.50"></text></g><g><title>filemap_add_folio (8 samples, 0.28%)</title><rect x="40.5736%" y="485" width="0.2798%" height="15" fill="rgb(220,204,40)" fg:x="1160" fg:w="8"/><text x="40.8236%" y="495.50"></text></g><g><title>folio_add_lru (2 samples, 0.07%)</title><rect x="40.7835%" y="469" width="0.0700%" height="15" fill="rgb(211,85,2)" fg:x="1166" fg:w="2"/><text x="41.0335%" y="479.50"></text></g><g><title>folio_batch_move_lru (2 samples, 0.07%)</title><rect x="40.7835%" y="453" width="0.0700%" height="15" fill="rgb(229,17,7)" fg:x="1166" fg:w="2"/><text x="41.0335%" y="463.50"></text></g><g><title>lru_add_fn (2 samples, 0.07%)</title><rect x="40.7835%" y="437" width="0.0700%" height="15" fill="rgb(239,72,28)" fg:x="1166" fg:w="2"/><text x="41.0335%" y="447.50"></text></g><g><title>lru_gen_add_folio (1 samples, 0.03%)</title><rect x="40.8185%" y="421" width="0.0350%" height="15" fill="rgb(230,47,54)" fg:x="1167" fg:w="1"/><text x="41.0685%" y="431.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.03%)</title><rect x="40.8185%" y="405" width="0.0350%" height="15" fill="rgb(214,50,8)" fg:x="1167" fg:w="1"/><text x="41.0685%" y="415.50"></text></g><g><title>__next_zones_zonelist (2 samples, 0.07%)</title><rect x="40.8534%" y="421" width="0.0700%" height="15" fill="rgb(216,198,43)" fg:x="1168" fg:w="2"/><text x="41.1034%" y="431.50"></text></g><g><title>clear_page_erms (2 samples, 0.07%)</title><rect x="40.9234%" y="405" width="0.0700%" height="15" fill="rgb(234,20,35)" fg:x="1170" fg:w="2"/><text x="41.1734%" y="415.50"></text></g><g><title>filemap_alloc_folio (8 samples, 0.28%)</title><rect x="40.8534%" y="485" width="0.2798%" height="15" fill="rgb(254,45,19)" fg:x="1168" fg:w="8"/><text x="41.1034%" y="495.50"></text></g><g><title>folio_alloc (8 samples, 0.28%)</title><rect x="40.8534%" y="469" width="0.2798%" height="15" fill="rgb(219,14,44)" fg:x="1168" fg:w="8"/><text x="41.1034%" y="479.50"></text></g><g><title>alloc_pages_mpol (8 samples, 0.28%)</title><rect x="40.8534%" y="453" width="0.2798%" height="15" fill="rgb(217,220,26)" fg:x="1168" fg:w="8"/><text x="41.1034%" y="463.50"></text></g><g><title>__alloc_pages (8 samples, 0.28%)</title><rect x="40.8534%" y="437" width="0.2798%" height="15" fill="rgb(213,158,28)" fg:x="1168" fg:w="8"/><text x="41.1034%" y="447.50"></text></g><g><title>get_page_from_freelist (6 samples, 0.21%)</title><rect x="40.9234%" y="421" width="0.2099%" height="15" fill="rgb(252,51,52)" fg:x="1170" fg:w="6"/><text x="41.1734%" y="431.50"></text></g><g><title>rmqueue (4 samples, 0.14%)</title><rect x="40.9934%" y="405" width="0.1399%" height="15" fill="rgb(246,89,16)" fg:x="1172" fg:w="4"/><text x="41.2434%" y="415.50"></text></g><g><title>__rmqueue_pcplist (4 samples, 0.14%)</title><rect x="40.9934%" y="389" width="0.1399%" height="15" fill="rgb(216,158,49)" fg:x="1172" fg:w="4"/><text x="41.2434%" y="399.50"></text></g><g><title>rmqueue_bulk (4 samples, 0.14%)</title><rect x="40.9934%" y="373" width="0.1399%" height="15" fill="rgb(236,107,19)" fg:x="1172" fg:w="4"/><text x="41.2434%" y="383.50"></text></g><g><title>ext4_map_blocks (1 samples, 0.03%)</title><rect x="41.1682%" y="437" width="0.0350%" height="15" fill="rgb(228,185,30)" fg:x="1177" fg:w="1"/><text x="41.4182%" y="447.50"></text></g><g><title>memset_orig (5 samples, 0.17%)</title><rect x="41.2032%" y="437" width="0.1749%" height="15" fill="rgb(246,134,8)" fg:x="1178" fg:w="5"/><text x="41.4532%" y="447.50"></text></g><g><title>read_pages (8 samples, 0.28%)</title><rect x="41.1333%" y="485" width="0.2798%" height="15" fill="rgb(214,143,50)" fg:x="1176" fg:w="8"/><text x="41.3833%" y="495.50"></text></g><g><title>ext4_readahead (8 samples, 0.28%)</title><rect x="41.1333%" y="469" width="0.2798%" height="15" fill="rgb(228,75,8)" fg:x="1176" fg:w="8"/><text x="41.3833%" y="479.50"></text></g><g><title>ext4_mpage_readpages (8 samples, 0.28%)</title><rect x="41.1333%" y="453" width="0.2798%" height="15" fill="rgb(207,175,4)" fg:x="1176" fg:w="8"/><text x="41.3833%" y="463.50"></text></g><g><title>xa_load (1 samples, 0.03%)</title><rect x="41.3781%" y="437" width="0.0350%" height="15" fill="rgb(205,108,24)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="447.50"></text></g><g><title>xas_start (1 samples, 0.03%)</title><rect x="41.3781%" y="421" width="0.0350%" height="15" fill="rgb(244,120,49)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="41.3781%" y="405" width="0.0350%" height="15" fill="rgb(223,47,38)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="415.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="41.3781%" y="389" width="0.0350%" height="15" fill="rgb(229,179,11)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="399.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="41.3781%" y="373" width="0.0350%" height="15" fill="rgb(231,122,1)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="383.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="41.3781%" y="357" width="0.0350%" height="15" fill="rgb(245,119,9)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="367.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="41.3781%" y="341" width="0.0350%" height="15" fill="rgb(241,163,25)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="351.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="41.3781%" y="325" width="0.0350%" height="15" fill="rgb(217,214,3)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="335.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="41.3781%" y="309" width="0.0350%" height="15" fill="rgb(240,86,28)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="319.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="41.3781%" y="293" width="0.0350%" height="15" fill="rgb(215,47,9)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="303.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="41.3781%" y="277" width="0.0350%" height="15" fill="rgb(252,25,45)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="287.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="41.3781%" y="261" width="0.0350%" height="15" fill="rgb(251,164,9)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="271.50"></text></g><g><title>update_load_avg (1 samples, 0.03%)</title><rect x="41.3781%" y="245" width="0.0350%" height="15" fill="rgb(233,194,0)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="255.50"></text></g><g><title>__update_load_avg_se (1 samples, 0.03%)</title><rect x="41.3781%" y="229" width="0.0350%" height="15" fill="rgb(249,111,24)" fg:x="1183" fg:w="1"/><text x="41.6281%" y="239.50"></text></g><g><title>xa_load (1 samples, 0.03%)</title><rect x="41.4131%" y="485" width="0.0350%" height="15" fill="rgb(250,223,3)" fg:x="1184" fg:w="1"/><text x="41.6631%" y="495.50"></text></g><g><title>xas_descend (1 samples, 0.03%)</title><rect x="41.4131%" y="469" width="0.0350%" height="15" fill="rgb(236,178,37)" fg:x="1184" fg:w="1"/><text x="41.6631%" y="479.50"></text></g><g><title>__do_fault (29 samples, 1.01%)</title><rect x="40.4687%" y="565" width="1.0143%" height="15" fill="rgb(241,158,50)" fg:x="1157" fg:w="29"/><text x="40.7187%" y="575.50"></text></g><g><title>filemap_fault (29 samples, 1.01%)</title><rect x="40.4687%" y="549" width="1.0143%" height="15" fill="rgb(213,121,41)" fg:x="1157" fg:w="29"/><text x="40.7187%" y="559.50"></text></g><g><title>do_sync_mmap_readahead (26 samples, 0.91%)</title><rect x="40.5736%" y="533" width="0.9094%" height="15" fill="rgb(240,92,3)" fg:x="1160" fg:w="26"/><text x="40.8236%" y="543.50"></text></g><g><title>page_cache_ra_order (26 samples, 0.91%)</title><rect x="40.5736%" y="517" width="0.9094%" height="15" fill="rgb(205,123,3)" fg:x="1160" fg:w="26"/><text x="40.8236%" y="527.50"></text></g><g><title>page_cache_ra_unbounded (26 samples, 0.91%)</title><rect x="40.5736%" y="501" width="0.9094%" height="15" fill="rgb(205,97,47)" fg:x="1160" fg:w="26"/><text x="40.8236%" y="511.50"></text></g><g><title>xas_descend (1 samples, 0.03%)</title><rect x="41.4481%" y="485" width="0.0350%" height="15" fill="rgb(247,152,14)" fg:x="1185" fg:w="1"/><text x="41.6981%" y="495.50"></text></g><g><title>ext4_convert_inline_data (1 samples, 0.03%)</title><rect x="41.4830%" y="549" width="0.0350%" height="15" fill="rgb(248,195,53)" fg:x="1186" fg:w="1"/><text x="41.7330%" y="559.50"></text></g><g><title>ext4_da_get_block_prep (3 samples, 0.10%)</title><rect x="41.5880%" y="501" width="0.1049%" height="15" fill="rgb(226,201,16)" fg:x="1189" fg:w="3"/><text x="41.8380%" y="511.50"></text></g><g><title>ext4_da_map_blocks.constprop.0 (3 samples, 0.10%)</title><rect x="41.5880%" y="485" width="0.1049%" height="15" fill="rgb(205,98,0)" fg:x="1189" fg:w="3"/><text x="41.8380%" y="495.50"></text></g><g><title>ext4_es_insert_delayed_block (1 samples, 0.03%)</title><rect x="41.6579%" y="469" width="0.0350%" height="15" fill="rgb(214,191,48)" fg:x="1191" fg:w="1"/><text x="41.9079%" y="479.50"></text></g><g><title>ext4_es_can_be_merged.isra.0 (1 samples, 0.03%)</title><rect x="41.6579%" y="453" width="0.0350%" height="15" fill="rgb(237,112,39)" fg:x="1191" fg:w="1"/><text x="41.9079%" y="463.50"></text></g><g><title>___slab_alloc (1 samples, 0.03%)</title><rect x="41.7279%" y="421" width="0.0350%" height="15" fill="rgb(247,203,27)" fg:x="1193" fg:w="1"/><text x="41.9779%" y="431.50"></text></g><g><title>__memcg_slab_post_alloc_hook (1 samples, 0.03%)</title><rect x="41.7629%" y="421" width="0.0350%" height="15" fill="rgb(235,124,28)" fg:x="1194" fg:w="1"/><text x="42.0129%" y="431.50"></text></g><g><title>mod_objcg_state (1 samples, 0.03%)</title><rect x="41.7629%" y="405" width="0.0350%" height="15" fill="rgb(208,207,46)" fg:x="1194" fg:w="1"/><text x="42.0129%" y="415.50"></text></g><g><title>memcg_account_kmem (1 samples, 0.03%)</title><rect x="41.7978%" y="421" width="0.0350%" height="15" fill="rgb(234,176,4)" fg:x="1195" fg:w="1"/><text x="42.0478%" y="431.50"></text></g><g><title>folio_create_buffers (5 samples, 0.17%)</title><rect x="41.6929%" y="501" width="0.1749%" height="15" fill="rgb(230,133,28)" fg:x="1192" fg:w="5"/><text x="41.9429%" y="511.50"></text></g><g><title>create_empty_buffers (5 samples, 0.17%)</title><rect x="41.6929%" y="485" width="0.1749%" height="15" fill="rgb(211,137,40)" fg:x="1192" fg:w="5"/><text x="41.9429%" y="495.50"></text></g><g><title>folio_alloc_buffers (5 samples, 0.17%)</title><rect x="41.6929%" y="469" width="0.1749%" height="15" fill="rgb(254,35,13)" fg:x="1192" fg:w="5"/><text x="41.9429%" y="479.50"></text></g><g><title>alloc_buffer_head (5 samples, 0.17%)</title><rect x="41.6929%" y="453" width="0.1749%" height="15" fill="rgb(225,49,51)" fg:x="1192" fg:w="5"/><text x="41.9429%" y="463.50"></text></g><g><title>kmem_cache_alloc (4 samples, 0.14%)</title><rect x="41.7279%" y="437" width="0.1399%" height="15" fill="rgb(251,10,15)" fg:x="1193" fg:w="4"/><text x="41.9779%" y="447.50"></text></g><g><title>obj_cgroup_charge (1 samples, 0.03%)</title><rect x="41.8328%" y="421" width="0.0350%" height="15" fill="rgb(228,207,15)" fg:x="1196" fg:w="1"/><text x="42.0828%" y="431.50"></text></g><g><title>consume_obj_stock (1 samples, 0.03%)</title><rect x="41.8328%" y="405" width="0.0350%" height="15" fill="rgb(241,99,19)" fg:x="1196" fg:w="1"/><text x="42.0828%" y="415.50"></text></g><g><title>__block_write_begin_int (10 samples, 0.35%)</title><rect x="41.5880%" y="517" width="0.3498%" height="15" fill="rgb(207,104,49)" fg:x="1189" fg:w="10"/><text x="41.8380%" y="527.50"></text></g><g><title>mark_buffer_dirty (2 samples, 0.07%)</title><rect x="41.8678%" y="501" width="0.0700%" height="15" fill="rgb(234,99,18)" fg:x="1197" fg:w="2"/><text x="42.1178%" y="511.50"></text></g><g><title>block_page_mkwrite (13 samples, 0.45%)</title><rect x="41.5180%" y="533" width="0.4547%" height="15" fill="rgb(213,191,49)" fg:x="1187" fg:w="13"/><text x="41.7680%" y="543.50"></text></g><g><title>folio_mark_dirty (1 samples, 0.03%)</title><rect x="41.9377%" y="517" width="0.0350%" height="15" fill="rgb(210,226,19)" fg:x="1199" fg:w="1"/><text x="42.1877%" y="527.50"></text></g><g><title>ext4_dirty_folio (1 samples, 0.03%)</title><rect x="41.9377%" y="501" width="0.0350%" height="15" fill="rgb(229,97,18)" fg:x="1199" fg:w="1"/><text x="42.1877%" y="511.50"></text></g><g><title>block_dirty_folio (1 samples, 0.03%)</title><rect x="41.9377%" y="485" width="0.0350%" height="15" fill="rgb(211,167,15)" fg:x="1199" fg:w="1"/><text x="42.1877%" y="495.50"></text></g><g><title>do_page_mkwrite (15 samples, 0.52%)</title><rect x="41.4830%" y="565" width="0.5247%" height="15" fill="rgb(210,169,34)" fg:x="1186" fg:w="15"/><text x="41.7330%" y="575.50"></text></g><g><title>ext4_page_mkwrite (14 samples, 0.49%)</title><rect x="41.5180%" y="549" width="0.4897%" height="15" fill="rgb(241,121,31)" fg:x="1187" fg:w="14"/><text x="41.7680%" y="559.50"></text></g><g><title>mnt_get_write_access_file (1 samples, 0.03%)</title><rect x="41.9727%" y="533" width="0.0350%" height="15" fill="rgb(232,40,11)" fg:x="1200" fg:w="1"/><text x="42.2227%" y="543.50"></text></g><g><title>fault_dirty_shared_page (2 samples, 0.07%)</title><rect x="42.0077%" y="565" width="0.0700%" height="15" fill="rgb(205,86,26)" fg:x="1201" fg:w="2"/><text x="42.2577%" y="575.50"></text></g><g><title>balance_dirty_pages_ratelimited (1 samples, 0.03%)</title><rect x="42.0427%" y="549" width="0.0350%" height="15" fill="rgb(231,126,28)" fg:x="1202" fg:w="1"/><text x="42.2927%" y="559.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (1 samples, 0.03%)</title><rect x="42.0427%" y="533" width="0.0350%" height="15" fill="rgb(219,221,18)" fg:x="1202" fg:w="1"/><text x="42.2927%" y="543.50"></text></g><g><title>balance_dirty_pages (1 samples, 0.03%)</title><rect x="42.0427%" y="517" width="0.0350%" height="15" fill="rgb(211,40,0)" fg:x="1202" fg:w="1"/><text x="42.2927%" y="527.50"></text></g><g><title>mem_cgroup_wb_stats (1 samples, 0.03%)</title><rect x="42.0427%" y="501" width="0.0350%" height="15" fill="rgb(239,85,43)" fg:x="1202" fg:w="1"/><text x="42.2927%" y="511.50"></text></g><g><title>mem_cgroup_flush_stats.part.0 (1 samples, 0.03%)</title><rect x="42.0427%" y="485" width="0.0350%" height="15" fill="rgb(231,55,21)" fg:x="1202" fg:w="1"/><text x="42.2927%" y="495.50"></text></g><g><title>cgroup_rstat_flush (1 samples, 0.03%)</title><rect x="42.0427%" y="469" width="0.0350%" height="15" fill="rgb(225,184,43)" fg:x="1202" fg:w="1"/><text x="42.2927%" y="479.50"></text></g><g><title>cgroup_rstat_flush_locked (1 samples, 0.03%)</title><rect x="42.0427%" y="453" width="0.0350%" height="15" fill="rgb(251,158,41)" fg:x="1202" fg:w="1"/><text x="42.2927%" y="463.50"></text></g><g><title>mem_cgroup_css_rstat_flush (1 samples, 0.03%)</title><rect x="42.0427%" y="437" width="0.0350%" height="15" fill="rgb(234,159,37)" fg:x="1202" fg:w="1"/><text x="42.2927%" y="447.50"></text></g><g><title>do_fault (47 samples, 1.64%)</title><rect x="40.4687%" y="581" width="1.6439%" height="15" fill="rgb(216,204,22)" fg:x="1157" fg:w="47"/><text x="40.7187%" y="591.50"></text></g><g><title>finish_fault (1 samples, 0.03%)</title><rect x="42.0776%" y="565" width="0.0350%" height="15" fill="rgb(214,17,3)" fg:x="1203" fg:w="1"/><text x="42.3276%" y="575.50"></text></g><g><title>set_pte_range (1 samples, 0.03%)</title><rect x="42.0776%" y="549" width="0.0350%" height="15" fill="rgb(212,111,17)" fg:x="1203" fg:w="1"/><text x="42.3276%" y="559.50"></text></g><g><title>handle_mm_fault (49 samples, 1.71%)</title><rect x="40.4337%" y="629" width="1.7139%" height="15" fill="rgb(221,157,24)" fg:x="1156" fg:w="49"/><text x="40.6837%" y="639.50"></text></g><g><title>__handle_mm_fault (49 samples, 1.71%)</title><rect x="40.4337%" y="613" width="1.7139%" height="15" fill="rgb(252,16,13)" fg:x="1156" fg:w="49"/><text x="40.6837%" y="623.50"></text></g><g><title>handle_pte_fault (49 samples, 1.71%)</title><rect x="40.4337%" y="597" width="1.7139%" height="15" fill="rgb(221,62,2)" fg:x="1156" fg:w="49"/><text x="40.6837%" y="607.50"></text></g><g><title>pte_offset_map_nolock (1 samples, 0.03%)</title><rect x="42.1126%" y="581" width="0.0350%" height="15" fill="rgb(247,87,22)" fg:x="1204" fg:w="1"/><text x="42.3626%" y="591.50"></text></g><g><title>__pte_offset_map (1 samples, 0.03%)</title><rect x="42.1126%" y="565" width="0.0350%" height="15" fill="rgb(215,73,9)" fg:x="1204" fg:w="1"/><text x="42.3626%" y="575.50"></text></g><g><title>__rcu_read_lock (1 samples, 0.03%)</title><rect x="42.1476%" y="613" width="0.0350%" height="15" fill="rgb(207,175,33)" fg:x="1205" fg:w="1"/><text x="42.3976%" y="623.50"></text></g><g><title>asm_exc_page_fault (54 samples, 1.89%)</title><rect x="40.3288%" y="677" width="1.8888%" height="15" fill="rgb(243,129,54)" fg:x="1153" fg:w="54"/><text x="40.5788%" y="687.50">a..</text></g><g><title>exc_page_fault (53 samples, 1.85%)</title><rect x="40.3638%" y="661" width="1.8538%" height="15" fill="rgb(227,119,45)" fg:x="1154" fg:w="53"/><text x="40.6138%" y="671.50">e..</text></g><g><title>do_user_addr_fault (53 samples, 1.85%)</title><rect x="40.3638%" y="645" width="1.8538%" height="15" fill="rgb(205,109,36)" fg:x="1154" fg:w="53"/><text x="40.6138%" y="655.50">d..</text></g><g><title>lock_vma_under_rcu (2 samples, 0.07%)</title><rect x="42.1476%" y="629" width="0.0700%" height="15" fill="rgb(205,6,39)" fg:x="1205" fg:w="2"/><text x="42.3976%" y="639.50"></text></g><g><title>mas_walk (1 samples, 0.03%)</title><rect x="42.1826%" y="613" width="0.0350%" height="15" fill="rgb(221,32,16)" fg:x="1206" fg:w="1"/><text x="42.4326%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (64 samples, 2.24%)</title><rect x="40.0839%" y="725" width="2.2385%" height="15" fill="rgb(228,144,50)" fg:x="1146" fg:w="64"/><text x="40.3339%" y="735.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (64 samples, 2.24%)</title><rect x="40.0839%" y="709" width="2.2385%" height="15" fill="rgb(229,201,53)" fg:x="1146" fg:w="64"/><text x="40.3339%" y="719.50">c..</text></g><g><title>__memcpy_avx_unaligned_erms (64 samples, 2.24%)</title><rect x="40.0839%" y="693" width="2.2385%" height="15" fill="rgb(249,153,27)" fg:x="1146" fg:w="64"/><text x="40.3339%" y="703.50">_..</text></g><g><title>sync_regs (3 samples, 0.10%)</title><rect x="42.2176%" y="677" width="0.1049%" height="15" fill="rgb(227,106,25)" fg:x="1207" fg:w="3"/><text x="42.4676%" y="687.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::insert_value (68 samples, 2.38%)</title><rect x="40.0839%" y="741" width="2.3785%" height="15" fill="rgb(230,65,29)" fg:x="1146" fg:w="68"/><text x="40.3339%" y="751.50">mm..</text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::write_page_header (4 samples, 0.14%)</title><rect x="42.3225%" y="725" width="0.1399%" height="15" fill="rgb(221,57,46)" fg:x="1210" fg:w="4"/><text x="42.5725%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.14%)</title><rect x="42.3225%" y="709" width="0.1399%" height="15" fill="rgb(229,161,17)" fg:x="1210" fg:w="4"/><text x="42.5725%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="42.3225%" y="693" width="0.1399%" height="15" fill="rgb(222,213,11)" fg:x="1210" fg:w="4"/><text x="42.5725%" y="703.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="42.4624%" y="693" width="0.0350%" height="15" fill="rgb(235,35,13)" fg:x="1214" fg:w="1"/><text x="42.7124%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="42.4624%" y="677" width="0.0350%" height="15" fill="rgb(233,158,34)" fg:x="1214" fg:w="1"/><text x="42.7124%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="42.4624%" y="661" width="0.0350%" height="15" fill="rgb(215,151,48)" fg:x="1214" fg:w="1"/><text x="42.7124%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="42.4624%" y="645" width="0.0350%" height="15" fill="rgb(229,84,14)" fg:x="1214" fg:w="1"/><text x="42.7124%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="42.4624%" y="629" width="0.0350%" height="15" fill="rgb(229,68,14)" fg:x="1214" fg:w="1"/><text x="42.7124%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="42.4624%" y="613" width="0.0350%" height="15" fill="rgb(243,106,26)" fg:x="1214" fg:w="1"/><text x="42.7124%" y="623.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.03%)</title><rect x="42.4624%" y="597" width="0.0350%" height="15" fill="rgb(206,45,38)" fg:x="1214" fg:w="1"/><text x="42.7124%" y="607.50"></text></g><g><title>hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.03%)</title><rect x="42.5673%" y="645" width="0.0350%" height="15" fill="rgb(226,6,15)" fg:x="1217" fg:w="1"/><text x="42.8173%" y="655.50"></text></g><g><title>storage_bench::random_data_bench (920 samples, 32.18%)</title><rect x="10.4582%" y="1093" width="32.1791%" height="15" fill="rgb(232,22,54)" fg:x="299" fg:w="920"/><text x="10.7082%" y="1103.50">storage_bench::random_data_bench</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (892 samples, 31.20%)</title><rect x="11.4376%" y="1077" width="31.1997%" height="15" fill="rgb(229,222,32)" fg:x="327" fg:w="892"/><text x="11.6876%" y="1087.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (892 samples, 31.20%)</title><rect x="11.4376%" y="1061" width="31.1997%" height="15" fill="rgb(228,62,29)" fg:x="327" fg:w="892"/><text x="11.6876%" y="1071.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::ben..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (892 samples, 31.20%)</title><rect x="11.4376%" y="1045" width="31.1997%" height="15" fill="rgb(251,103,34)" fg:x="327" fg:w="892"/><text x="11.6876%" y="1055.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run..</text></g><g><title>criterion::routine::Routine::test (892 samples, 31.20%)</title><rect x="11.4376%" y="1029" width="31.1997%" height="15" fill="rgb(233,12,30)" fg:x="327" fg:w="892"/><text x="11.6876%" y="1039.50">criterion::routine::Routine::test</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (892 samples, 31.20%)</title><rect x="11.4376%" y="1013" width="31.1997%" height="15" fill="rgb(238,52,0)" fg:x="327" fg:w="892"/><text x="11.6876%" y="1023.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (892 samples, 31.20%)</title><rect x="11.4376%" y="997" width="31.1997%" height="15" fill="rgb(223,98,5)" fg:x="327" fg:w="892"/><text x="11.6876%" y="1007.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (892 samples, 31.20%)</title><rect x="11.4376%" y="981" width="31.1997%" height="15" fill="rgb(228,75,37)" fg:x="327" fg:w="892"/><text x="11.6876%" y="991.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (892 samples, 31.20%)</title><rect x="11.4376%" y="965" width="31.1997%" height="15" fill="rgb(205,115,49)" fg:x="327" fg:w="892"/><text x="11.6876%" y="975.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (892 samples, 31.20%)</title><rect x="11.4376%" y="949" width="31.1997%" height="15" fill="rgb(250,154,43)" fg:x="327" fg:w="892"/><text x="11.6876%" y="959.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (892 samples, 31.20%)</title><rect x="11.4376%" y="933" width="31.1997%" height="15" fill="rgb(226,43,29)" fg:x="327" fg:w="892"/><text x="11.6876%" y="943.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (892 samples, 31.20%)</title><rect x="11.4376%" y="917" width="31.1997%" height="15" fill="rgb(249,228,39)" fg:x="327" fg:w="892"/><text x="11.6876%" y="927.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (892 samples, 31.20%)</title><rect x="11.4376%" y="901" width="31.1997%" height="15" fill="rgb(216,79,43)" fg:x="327" fg:w="892"/><text x="11.6876%" y="911.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (892 samples, 31.20%)</title><rect x="11.4376%" y="885" width="31.1997%" height="15" fill="rgb(228,95,12)" fg:x="327" fg:w="892"/><text x="11.6876%" y="895.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (892 samples, 31.20%)</title><rect x="11.4376%" y="869" width="31.1997%" height="15" fill="rgb(249,221,15)" fg:x="327" fg:w="892"/><text x="11.6876%" y="879.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits:..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (892 samples, 31.20%)</title><rect x="11.4376%" y="853" width="31.1997%" height="15" fill="rgb(233,34,13)" fg:x="327" fg:w="892"/><text x="11.6876%" y="863.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (892 samples, 31.20%)</title><rect x="11.4376%" y="837" width="31.1997%" height="15" fill="rgb(214,103,39)" fg:x="327" fg:w="892"/><text x="11.6876%" y="847.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion:..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (892 samples, 31.20%)</title><rect x="11.4376%" y="821" width="31.1997%" height="15" fill="rgb(251,126,39)" fg:x="327" fg:w="892"/><text x="11.6876%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::ben..</text></g><g><title>storage_bench::random_data_bench::_{{closure}} (892 samples, 31.20%)</title><rect x="11.4376%" y="805" width="31.1997%" height="15" fill="rgb(214,216,36)" fg:x="327" fg:w="892"/><text x="11.6876%" y="815.50">storage_bench::random_data_bench::_{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (892 samples, 31.20%)</title><rect x="11.4376%" y="789" width="31.1997%" height="15" fill="rgb(220,221,8)" fg:x="327" fg:w="892"/><text x="11.6876%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>storage_bench::random_data_bench::_{{closure}}::_{{closure}} (892 samples, 31.20%)</title><rect x="11.4376%" y="773" width="31.1997%" height="15" fill="rgb(240,216,3)" fg:x="327" fg:w="892"/><text x="11.6876%" y="783.50">storage_bench::random_data_bench::_{{closure}}::_{..</text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::put_payload (406 samples, 14.20%)</title><rect x="28.4365%" y="757" width="14.2008%" height="15" fill="rgb(232,218,17)" fg:x="813" fg:w="406"/><text x="28.6865%" y="767.50">mmap_payload_storage::..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (5 samples, 0.17%)</title><rect x="42.4624%" y="741" width="0.1749%" height="15" fill="rgb(229,163,45)" fg:x="1214" fg:w="5"/><text x="42.7124%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (5 samples, 0.17%)</title><rect x="42.4624%" y="725" width="0.1749%" height="15" fill="rgb(231,110,42)" fg:x="1214" fg:w="5"/><text x="42.7124%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (5 samples, 0.17%)</title><rect x="42.4624%" y="709" width="0.1749%" height="15" fill="rgb(208,170,48)" fg:x="1214" fg:w="5"/><text x="42.7124%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (4 samples, 0.14%)</title><rect x="42.4974%" y="693" width="0.1399%" height="15" fill="rgb(239,116,25)" fg:x="1215" fg:w="4"/><text x="42.7474%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (4 samples, 0.14%)</title><rect x="42.4974%" y="677" width="0.1399%" height="15" fill="rgb(219,200,50)" fg:x="1215" fg:w="4"/><text x="42.7474%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (4 samples, 0.14%)</title><rect x="42.4974%" y="661" width="0.1399%" height="15" fill="rgb(245,200,0)" fg:x="1215" fg:w="4"/><text x="42.7474%" y="671.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.03%)</title><rect x="42.6023%" y="645" width="0.0350%" height="15" fill="rgb(245,119,33)" fg:x="1218" fg:w="1"/><text x="42.8523%" y="655.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="42.6023%" y="629" width="0.0350%" height="15" fill="rgb(231,125,12)" fg:x="1218" fg:w="1"/><text x="42.8523%" y="639.50"></text></g><g><title>_compound_head (2 samples, 0.07%)</title><rect x="42.6373%" y="661" width="0.0700%" height="15" fill="rgb(216,96,41)" fg:x="1219" fg:w="2"/><text x="42.8873%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload_storage::PayloadStorage&gt; (4 samples, 0.14%)</title><rect x="42.6373%" y="1077" width="0.1399%" height="15" fill="rgb(248,43,45)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;u32,mmap_payload_storage::slotted_page::SlottedPageMmap&gt;&gt; (4 samples, 0.14%)</title><rect x="42.6373%" y="1061" width="0.1399%" height="15" fill="rgb(217,222,7)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="1071.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;u32,mmap_payload_storage::slotted_page::SlottedPageMmap,std::hash::random::RandomState&gt;&gt; (4 samples, 0.14%)</title><rect x="42.6373%" y="1045" width="0.1399%" height="15" fill="rgb(233,28,6)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(u32,mmap_payload_storage::slotted_page::SlottedPageMmap)&gt;&gt; (4 samples, 0.14%)</title><rect x="42.6373%" y="1029" width="0.1399%" height="15" fill="rgb(231,218,15)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="1039.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="42.6373%" y="1013" width="0.1399%" height="15" fill="rgb(226,171,48)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="1023.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (4 samples, 0.14%)</title><rect x="42.6373%" y="997" width="0.1399%" height="15" fill="rgb(235,201,9)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="1007.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (4 samples, 0.14%)</title><rect x="42.6373%" y="981" width="0.1399%" height="15" fill="rgb(217,80,15)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="991.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (4 samples, 0.14%)</title><rect x="42.6373%" y="965" width="0.1399%" height="15" fill="rgb(219,152,8)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="975.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (4 samples, 0.14%)</title><rect x="42.6373%" y="949" width="0.1399%" height="15" fill="rgb(243,107,38)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="959.50"></text></g><g><title>core::ptr::drop_in_place&lt;(u32,mmap_payload_storage::slotted_page::SlottedPageMmap)&gt; (4 samples, 0.14%)</title><rect x="42.6373%" y="933" width="0.1399%" height="15" fill="rgb(231,17,5)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="943.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::slotted_page::SlottedPageMmap&gt; (4 samples, 0.14%)</title><rect x="42.6373%" y="917" width="0.1399%" height="15" fill="rgb(209,25,54)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="927.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::MmapMut&gt; (4 samples, 0.14%)</title><rect x="42.6373%" y="901" width="0.1399%" height="15" fill="rgb(219,0,2)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="911.50"></text></g><g><title>core::ptr::drop_in_place&lt;memmap2::os::MmapInner&gt; (4 samples, 0.14%)</title><rect x="42.6373%" y="885" width="0.1399%" height="15" fill="rgb(246,9,5)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="895.50"></text></g><g><title>__GI_munmap (4 samples, 0.14%)</title><rect x="42.6373%" y="869" width="0.1399%" height="15" fill="rgb(226,159,4)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="879.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.14%)</title><rect x="42.6373%" y="853" width="0.1399%" height="15" fill="rgb(219,175,34)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="863.50"></text></g><g><title>do_syscall_64 (4 samples, 0.14%)</title><rect x="42.6373%" y="837" width="0.1399%" height="15" fill="rgb(236,10,46)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="847.50"></text></g><g><title>x64_sys_call (4 samples, 0.14%)</title><rect x="42.6373%" y="821" width="0.1399%" height="15" fill="rgb(240,211,16)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="831.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.14%)</title><rect x="42.6373%" y="805" width="0.1399%" height="15" fill="rgb(205,3,43)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="815.50"></text></g><g><title>__vm_munmap (4 samples, 0.14%)</title><rect x="42.6373%" y="789" width="0.1399%" height="15" fill="rgb(245,7,22)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="799.50"></text></g><g><title>do_vmi_munmap (4 samples, 0.14%)</title><rect x="42.6373%" y="773" width="0.1399%" height="15" fill="rgb(239,132,32)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="783.50"></text></g><g><title>do_vmi_align_munmap (4 samples, 0.14%)</title><rect x="42.6373%" y="757" width="0.1399%" height="15" fill="rgb(228,202,34)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="767.50"></text></g><g><title>unmap_region (4 samples, 0.14%)</title><rect x="42.6373%" y="741" width="0.1399%" height="15" fill="rgb(254,200,22)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="751.50"></text></g><g><title>unmap_vmas (4 samples, 0.14%)</title><rect x="42.6373%" y="725" width="0.1399%" height="15" fill="rgb(219,10,39)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="735.50"></text></g><g><title>unmap_single_vma (4 samples, 0.14%)</title><rect x="42.6373%" y="709" width="0.1399%" height="15" fill="rgb(226,210,39)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="719.50"></text></g><g><title>unmap_page_range (4 samples, 0.14%)</title><rect x="42.6373%" y="693" width="0.1399%" height="15" fill="rgb(208,219,16)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="703.50"></text></g><g><title>zap_pmd_range.isra.0 (4 samples, 0.14%)</title><rect x="42.6373%" y="677" width="0.1399%" height="15" fill="rgb(216,158,51)" fg:x="1219" fg:w="4"/><text x="42.8873%" y="687.50"></text></g><g><title>zap_pte_range (2 samples, 0.07%)</title><rect x="42.7072%" y="661" width="0.0700%" height="15" fill="rgb(233,14,44)" fg:x="1221" fg:w="2"/><text x="42.9572%" y="671.50"></text></g><g><title>tlb_flush_rmaps (2 samples, 0.07%)</title><rect x="42.7072%" y="645" width="0.0700%" height="15" fill="rgb(237,97,39)" fg:x="1221" fg:w="2"/><text x="42.9572%" y="655.50"></text></g><g><title>tlb_flush_rmap_batch (2 samples, 0.07%)</title><rect x="42.7072%" y="629" width="0.0700%" height="15" fill="rgb(218,198,43)" fg:x="1221" fg:w="2"/><text x="42.9572%" y="639.50"></text></g><g><title>folio_remove_rmap_ptes (2 samples, 0.07%)</title><rect x="42.7072%" y="613" width="0.0700%" height="15" fill="rgb(231,104,20)" fg:x="1221" fg:w="2"/><text x="42.9572%" y="623.50"></text></g><g><title>__lruvec_stat_mod_folio (2 samples, 0.07%)</title><rect x="42.7072%" y="597" width="0.0700%" height="15" fill="rgb(254,36,13)" fg:x="1221" fg:w="2"/><text x="42.9572%" y="607.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="42.7422%" y="581" width="0.0350%" height="15" fill="rgb(248,14,50)" fg:x="1222" fg:w="1"/><text x="42.9922%" y="591.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.03%)</title><rect x="42.7422%" y="565" width="0.0350%" height="15" fill="rgb(217,107,29)" fg:x="1222" fg:w="1"/><text x="42.9922%" y="575.50"></text></g><g><title>__folio_batch_release (2 samples, 0.07%)</title><rect x="42.7772%" y="741" width="0.0700%" height="15" fill="rgb(251,169,33)" fg:x="1223" fg:w="2"/><text x="43.0272%" y="751.50"></text></g><g><title>release_pages (2 samples, 0.07%)</title><rect x="42.7772%" y="725" width="0.0700%" height="15" fill="rgb(217,108,32)" fg:x="1223" fg:w="2"/><text x="43.0272%" y="735.50"></text></g><g><title>__mem_cgroup_uncharge_list (2 samples, 0.07%)</title><rect x="42.7772%" y="709" width="0.0700%" height="15" fill="rgb(219,66,42)" fg:x="1223" fg:w="2"/><text x="43.0272%" y="719.50"></text></g><g><title>uncharge_batch (1 samples, 0.03%)</title><rect x="42.8122%" y="693" width="0.0350%" height="15" fill="rgb(206,180,7)" fg:x="1224" fg:w="1"/><text x="43.0622%" y="703.50"></text></g><g><title>page_counter_uncharge (1 samples, 0.03%)</title><rect x="42.8122%" y="677" width="0.0350%" height="15" fill="rgb(208,226,31)" fg:x="1224" fg:w="1"/><text x="43.0622%" y="687.50"></text></g><g><title>page_counter_cancel (1 samples, 0.03%)</title><rect x="42.8122%" y="661" width="0.0350%" height="15" fill="rgb(218,26,49)" fg:x="1224" fg:w="1"/><text x="43.0622%" y="671.50"></text></g><g><title>propagate_protected_usage (1 samples, 0.03%)</title><rect x="42.8122%" y="645" width="0.0350%" height="15" fill="rgb(233,197,48)" fg:x="1224" fg:w="1"/><text x="43.0622%" y="655.50"></text></g><g><title>filemap_unaccount_folio (1 samples, 0.03%)</title><rect x="42.8471%" y="725" width="0.0350%" height="15" fill="rgb(252,181,51)" fg:x="1225" fg:w="1"/><text x="43.0971%" y="735.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.03%)</title><rect x="42.8471%" y="709" width="0.0350%" height="15" fill="rgb(253,90,19)" fg:x="1225" fg:w="1"/><text x="43.0971%" y="719.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="42.8471%" y="693" width="0.0350%" height="15" fill="rgb(215,171,30)" fg:x="1225" fg:w="1"/><text x="43.0971%" y="703.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="42.8471%" y="677" width="0.0350%" height="15" fill="rgb(214,222,9)" fg:x="1225" fg:w="1"/><text x="43.0971%" y="687.50"></text></g><g><title>delete_from_page_cache_batch (2 samples, 0.07%)</title><rect x="42.8471%" y="741" width="0.0700%" height="15" fill="rgb(223,3,22)" fg:x="1225" fg:w="2"/><text x="43.0971%" y="751.50"></text></g><g><title>xas_store (1 samples, 0.03%)</title><rect x="42.8821%" y="725" width="0.0350%" height="15" fill="rgb(225,196,46)" fg:x="1226" fg:w="1"/><text x="43.1321%" y="735.50"></text></g><g><title>find_lock_entries (2 samples, 0.07%)</title><rect x="42.9171%" y="741" width="0.0700%" height="15" fill="rgb(209,110,37)" fg:x="1227" fg:w="2"/><text x="43.1671%" y="751.50"></text></g><g><title>drop_buffers.constprop.0 (1 samples, 0.03%)</title><rect x="43.0920%" y="645" width="0.0350%" height="15" fill="rgb(249,89,12)" fg:x="1232" fg:w="1"/><text x="43.3420%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;tempfile::dir::TempDir&gt; (12 samples, 0.42%)</title><rect x="42.7772%" y="1077" width="0.4197%" height="15" fill="rgb(226,27,33)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="1087.50"></text></g><g><title>&lt;tempfile::dir::TempDir as core::ops::drop::Drop&gt;::drop (12 samples, 0.42%)</title><rect x="42.7772%" y="1061" width="0.4197%" height="15" fill="rgb(213,82,22)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="1071.50"></text></g><g><title>std::fs::remove_dir_all (12 samples, 0.42%)</title><rect x="42.7772%" y="1045" width="0.4197%" height="15" fill="rgb(248,140,0)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="1055.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all (12 samples, 0.42%)</title><rect x="42.7772%" y="1029" width="0.4197%" height="15" fill="rgb(228,106,3)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="1039.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_modern (12 samples, 0.42%)</title><rect x="42.7772%" y="1013" width="0.4197%" height="15" fill="rgb(209,23,37)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="1023.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_path_with_cstr (12 samples, 0.42%)</title><rect x="42.7772%" y="997" width="0.4197%" height="15" fill="rgb(241,93,50)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="1007.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr (12 samples, 0.42%)</title><rect x="42.7772%" y="981" width="0.4197%" height="15" fill="rgb(253,46,43)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="991.50"></text></g><g><title>std::sys::pal::common::small_c_string::run_with_cstr_stack (12 samples, 0.42%)</title><rect x="42.7772%" y="965" width="0.4197%" height="15" fill="rgb(226,206,43)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="975.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_modern::_{{closure}} (12 samples, 0.42%)</title><rect x="42.7772%" y="949" width="0.4197%" height="15" fill="rgb(217,54,7)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="959.50"></text></g><g><title>std::sys::pal::unix::fs::remove_dir_impl::remove_dir_all_recursive (12 samples, 0.42%)</title><rect x="42.7772%" y="933" width="0.4197%" height="15" fill="rgb(223,5,52)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="943.50"></text></g><g><title>__GI_unlinkat (12 samples, 0.42%)</title><rect x="42.7772%" y="917" width="0.4197%" height="15" fill="rgb(206,52,46)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="927.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (12 samples, 0.42%)</title><rect x="42.7772%" y="901" width="0.4197%" height="15" fill="rgb(253,136,11)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="911.50"></text></g><g><title>do_syscall_64 (12 samples, 0.42%)</title><rect x="42.7772%" y="885" width="0.4197%" height="15" fill="rgb(208,106,33)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="895.50"></text></g><g><title>x64_sys_call (12 samples, 0.42%)</title><rect x="42.7772%" y="869" width="0.4197%" height="15" fill="rgb(206,54,4)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="879.50"></text></g><g><title>__x64_sys_unlinkat (12 samples, 0.42%)</title><rect x="42.7772%" y="853" width="0.4197%" height="15" fill="rgb(213,3,15)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="863.50"></text></g><g><title>do_unlinkat (12 samples, 0.42%)</title><rect x="42.7772%" y="837" width="0.4197%" height="15" fill="rgb(252,211,39)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="847.50"></text></g><g><title>iput (12 samples, 0.42%)</title><rect x="42.7772%" y="821" width="0.4197%" height="15" fill="rgb(223,6,36)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="831.50"></text></g><g><title>evict (12 samples, 0.42%)</title><rect x="42.7772%" y="805" width="0.4197%" height="15" fill="rgb(252,169,45)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="815.50"></text></g><g><title>ext4_evict_inode (12 samples, 0.42%)</title><rect x="42.7772%" y="789" width="0.4197%" height="15" fill="rgb(212,48,26)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="799.50"></text></g><g><title>truncate_inode_pages_final (12 samples, 0.42%)</title><rect x="42.7772%" y="773" width="0.4197%" height="15" fill="rgb(251,102,48)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="783.50"></text></g><g><title>truncate_inode_pages_range (12 samples, 0.42%)</title><rect x="42.7772%" y="757" width="0.4197%" height="15" fill="rgb(243,208,16)" fg:x="1223" fg:w="12"/><text x="43.0272%" y="767.50"></text></g><g><title>truncate_cleanup_folio (6 samples, 0.21%)</title><rect x="42.9871%" y="741" width="0.2099%" height="15" fill="rgb(219,96,24)" fg:x="1229" fg:w="6"/><text x="43.2371%" y="751.50"></text></g><g><title>ext4_invalidate_folio (5 samples, 0.17%)</title><rect x="43.0220%" y="725" width="0.1749%" height="15" fill="rgb(219,33,29)" fg:x="1230" fg:w="5"/><text x="43.2720%" y="735.50"></text></g><g><title>block_invalidate_folio (5 samples, 0.17%)</title><rect x="43.0220%" y="709" width="0.1749%" height="15" fill="rgb(223,176,5)" fg:x="1230" fg:w="5"/><text x="43.2720%" y="719.50"></text></g><g><title>filemap_release_folio (3 samples, 0.10%)</title><rect x="43.0920%" y="693" width="0.1049%" height="15" fill="rgb(228,140,14)" fg:x="1232" fg:w="3"/><text x="43.3420%" y="703.50"></text></g><g><title>ext4_release_folio (3 samples, 0.10%)</title><rect x="43.0920%" y="677" width="0.1049%" height="15" fill="rgb(217,179,31)" fg:x="1232" fg:w="3"/><text x="43.3420%" y="687.50"></text></g><g><title>jbd2_journal_try_to_free_buffers (3 samples, 0.10%)</title><rect x="43.0920%" y="661" width="0.1049%" height="15" fill="rgb(230,9,30)" fg:x="1232" fg:w="3"/><text x="43.3420%" y="671.50"></text></g><g><title>try_to_free_buffers (2 samples, 0.07%)</title><rect x="43.1270%" y="645" width="0.0700%" height="15" fill="rgb(230,136,20)" fg:x="1233" fg:w="2"/><text x="43.3770%" y="655.50"></text></g><g><title>free_buffer_head (2 samples, 0.07%)</title><rect x="43.1270%" y="629" width="0.0700%" height="15" fill="rgb(215,210,22)" fg:x="1233" fg:w="2"/><text x="43.3770%" y="639.50"></text></g><g><title>kmem_cache_free (2 samples, 0.07%)</title><rect x="43.1270%" y="613" width="0.0700%" height="15" fill="rgb(218,43,5)" fg:x="1233" fg:w="2"/><text x="43.3770%" y="623.50"></text></g><g><title>__memcg_slab_free_hook (1 samples, 0.03%)</title><rect x="43.1619%" y="597" width="0.0350%" height="15" fill="rgb(216,11,5)" fg:x="1234" fg:w="1"/><text x="43.4119%" y="607.50"></text></g><g><title>mod_objcg_state (1 samples, 0.03%)</title><rect x="43.1619%" y="581" width="0.0350%" height="15" fill="rgb(209,82,29)" fg:x="1234" fg:w="1"/><text x="43.4119%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="43.5117%" y="613" width="0.0350%" height="15" fill="rgb(244,115,12)" fg:x="1244" fg:w="1"/><text x="43.7617%" y="623.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.03%)</title><rect x="43.5117%" y="597" width="0.0350%" height="15" fill="rgb(222,82,18)" fg:x="1244" fg:w="1"/><text x="43.7617%" y="607.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="43.5467%" y="581" width="0.0350%" height="15" fill="rgb(249,227,8)" fg:x="1245" fg:w="1"/><text x="43.7967%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.07%)</title><rect x="43.5817%" y="581" width="0.0700%" height="15" fill="rgb(253,141,45)" fg:x="1246" fg:w="2"/><text x="43.8317%" y="591.50"></text></g><g><title>_int_malloc (14 samples, 0.49%)</title><rect x="44.1063%" y="549" width="0.4897%" height="15" fill="rgb(234,184,4)" fg:x="1261" fg:w="14"/><text x="44.3563%" y="559.50"></text></g><g><title>tcache_put (2 samples, 0.07%)</title><rect x="44.5261%" y="533" width="0.0700%" height="15" fill="rgb(218,194,23)" fg:x="1273" fg:w="2"/><text x="44.7761%" y="543.50"></text></g><g><title>checked_request2size (2 samples, 0.07%)</title><rect x="44.5960%" y="549" width="0.0700%" height="15" fill="rgb(235,66,41)" fg:x="1275" fg:w="2"/><text x="44.8460%" y="559.50"></text></g><g><title>__GI___libc_malloc (27 samples, 0.94%)</title><rect x="43.8265%" y="565" width="0.9444%" height="15" fill="rgb(245,217,1)" fg:x="1253" fg:w="27"/><text x="44.0765%" y="575.50"></text></g><g><title>tcache_get (3 samples, 0.10%)</title><rect x="44.6660%" y="549" width="0.1049%" height="15" fill="rgb(229,91,1)" fg:x="1277" fg:w="3"/><text x="44.9160%" y="559.50"></text></g><g><title>tcache_get_n (3 samples, 0.10%)</title><rect x="44.6660%" y="533" width="0.1049%" height="15" fill="rgb(207,101,30)" fg:x="1277" fg:w="3"/><text x="44.9160%" y="543.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="44.7709%" y="565" width="0.0350%" height="15" fill="rgb(223,82,49)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="575.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="44.7709%" y="549" width="0.0350%" height="15" fill="rgb(218,167,17)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="559.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="44.7709%" y="533" width="0.0350%" height="15" fill="rgb(208,103,14)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="543.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="44.7709%" y="517" width="0.0350%" height="15" fill="rgb(238,20,8)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="527.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="44.7709%" y="501" width="0.0350%" height="15" fill="rgb(218,80,54)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="511.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="44.7709%" y="485" width="0.0350%" height="15" fill="rgb(240,144,17)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="495.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="44.7709%" y="469" width="0.0350%" height="15" fill="rgb(245,27,50)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="479.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="44.7709%" y="453" width="0.0350%" height="15" fill="rgb(251,51,7)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="463.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="44.7709%" y="437" width="0.0350%" height="15" fill="rgb(245,217,29)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="447.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="44.7709%" y="421" width="0.0350%" height="15" fill="rgb(221,176,29)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="431.50"></text></g><g><title>update_curr (1 samples, 0.03%)</title><rect x="44.7709%" y="405" width="0.0350%" height="15" fill="rgb(212,180,24)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="415.50"></text></g><g><title>update_min_vruntime (1 samples, 0.03%)</title><rect x="44.7709%" y="389" width="0.0350%" height="15" fill="rgb(254,24,2)" fg:x="1280" fg:w="1"/><text x="45.0209%" y="399.50"></text></g><g><title>alloc::raw_vec::finish_grow (34 samples, 1.19%)</title><rect x="43.6516%" y="581" width="1.1892%" height="15" fill="rgb(230,100,2)" fg:x="1248" fg:w="34"/><text x="43.9016%" y="591.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="44.8059%" y="565" width="0.0350%" height="15" fill="rgb(219,142,25)" fg:x="1281" fg:w="1"/><text x="45.0559%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (40 samples, 1.40%)</title><rect x="43.4767%" y="645" width="1.3991%" height="15" fill="rgb(240,73,43)" fg:x="1243" fg:w="40"/><text x="43.7267%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (40 samples, 1.40%)</title><rect x="43.4767%" y="629" width="1.3991%" height="15" fill="rgb(214,114,15)" fg:x="1243" fg:w="40"/><text x="43.7267%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (38 samples, 1.33%)</title><rect x="43.5467%" y="613" width="1.3291%" height="15" fill="rgb(207,130,4)" fg:x="1245" fg:w="38"/><text x="43.7967%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (38 samples, 1.33%)</title><rect x="43.5467%" y="597" width="1.3291%" height="15" fill="rgb(221,25,40)" fg:x="1245" fg:w="38"/><text x="43.7967%" y="607.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="44.8409%" y="581" width="0.0350%" height="15" fill="rgb(241,184,7)" fg:x="1282" fg:w="1"/><text x="45.0909%" y="591.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="44.8409%" y="565" width="0.0350%" height="15" fill="rgb(235,159,4)" fg:x="1282" fg:w="1"/><text x="45.0909%" y="575.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="44.8409%" y="549" width="0.0350%" height="15" fill="rgb(214,87,48)" fg:x="1282" fg:w="1"/><text x="45.0909%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.35%)</title><rect x="44.8758%" y="645" width="0.3498%" height="15" fill="rgb(246,198,24)" fg:x="1283" fg:w="10"/><text x="45.1258%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (10 samples, 0.35%)</title><rect x="44.8758%" y="629" width="0.3498%" height="15" fill="rgb(209,66,40)" fg:x="1283" fg:w="10"/><text x="45.1258%" y="639.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="45.1906%" y="613" width="0.0350%" height="15" fill="rgb(233,147,39)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="623.50"></text></g><g><title>common_interrupt (1 samples, 0.03%)</title><rect x="45.1906%" y="597" width="0.0350%" height="15" fill="rgb(231,145,52)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="607.50"></text></g><g><title>__common_interrupt (1 samples, 0.03%)</title><rect x="45.1906%" y="581" width="0.0350%" height="15" fill="rgb(206,20,26)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="591.50"></text></g><g><title>handle_edge_irq (1 samples, 0.03%)</title><rect x="45.1906%" y="565" width="0.0350%" height="15" fill="rgb(238,220,4)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="575.50"></text></g><g><title>handle_irq_event (1 samples, 0.03%)</title><rect x="45.1906%" y="549" width="0.0350%" height="15" fill="rgb(252,195,42)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="559.50"></text></g><g><title>__handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="45.1906%" y="533" width="0.0350%" height="15" fill="rgb(209,10,6)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="543.50"></text></g><g><title>xhci_msi_irq (1 samples, 0.03%)</title><rect x="45.1906%" y="517" width="0.0350%" height="15" fill="rgb(229,3,52)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="527.50"></text></g><g><title>xhci_irq (1 samples, 0.03%)</title><rect x="45.1906%" y="501" width="0.0350%" height="15" fill="rgb(253,49,37)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="511.50"></text></g><g><title>xhci_update_erst_dequeue (1 samples, 0.03%)</title><rect x="45.1906%" y="485" width="0.0350%" height="15" fill="rgb(240,103,49)" fg:x="1292" fg:w="1"/><text x="45.4406%" y="495.50"></text></g><g><title>alloc::string::String::push_str (53 samples, 1.85%)</title><rect x="43.4767%" y="709" width="1.8538%" height="15" fill="rgb(250,182,30)" fg:x="1243" fg:w="53"/><text x="43.7267%" y="719.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (53 samples, 1.85%)</title><rect x="43.4767%" y="693" width="1.8538%" height="15" fill="rgb(248,8,30)" fg:x="1243" fg:w="53"/><text x="43.7267%" y="703.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (53 samples, 1.85%)</title><rect x="43.4767%" y="677" width="1.8538%" height="15" fill="rgb(237,120,30)" fg:x="1243" fg:w="53"/><text x="43.7267%" y="687.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (53 samples, 1.85%)</title><rect x="43.4767%" y="661" width="1.8538%" height="15" fill="rgb(221,146,34)" fg:x="1243" fg:w="53"/><text x="43.7267%" y="671.50">a..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.10%)</title><rect x="45.2256%" y="645" width="0.1049%" height="15" fill="rgb(242,55,13)" fg:x="1293" fg:w="3"/><text x="45.4756%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (57 samples, 1.99%)</title><rect x="43.3718%" y="725" width="1.9937%" height="15" fill="rgb(242,112,31)" fg:x="1240" fg:w="57"/><text x="43.6218%" y="735.50">&lt;..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="45.3305%" y="709" width="0.0350%" height="15" fill="rgb(249,192,27)" fg:x="1296" fg:w="1"/><text x="45.5805%" y="719.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="45.3305%" y="693" width="0.0350%" height="15" fill="rgb(208,204,44)" fg:x="1296" fg:w="1"/><text x="45.5805%" y="703.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="45.3305%" y="677" width="0.0350%" height="15" fill="rgb(208,93,54)" fg:x="1296" fg:w="1"/><text x="45.5805%" y="687.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="45.3305%" y="661" width="0.0350%" height="15" fill="rgb(242,1,31)" fg:x="1296" fg:w="1"/><text x="45.5805%" y="671.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="45.3305%" y="645" width="0.0350%" height="15" fill="rgb(241,83,25)" fg:x="1296" fg:w="1"/><text x="45.5805%" y="655.50"></text></g><g><title>_raw_spin_lock_irq (1 samples, 0.03%)</title><rect x="45.3305%" y="629" width="0.0350%" height="15" fill="rgb(205,169,50)" fg:x="1296" fg:w="1"/><text x="45.5805%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (62 samples, 2.17%)</title><rect x="43.2669%" y="741" width="2.1686%" height="15" fill="rgb(239,186,37)" fg:x="1237" fg:w="62"/><text x="43.5169%" y="751.50">&lt;..</text></g><g><title>core::fmt::Formatter::pad (2 samples, 0.07%)</title><rect x="45.3655%" y="725" width="0.0700%" height="15" fill="rgb(205,221,10)" fg:x="1297" fg:w="2"/><text x="45.6155%" y="735.50"></text></g><g><title>core::fmt::Formatter::new (4 samples, 0.14%)</title><rect x="45.4355%" y="741" width="0.1399%" height="15" fill="rgb(218,196,15)" fg:x="1299" fg:w="4"/><text x="45.6855%" y="751.50"></text></g><g><title>&lt;T as alloc::string::ToString&gt;::to_string (68 samples, 2.38%)</title><rect x="43.2669%" y="757" width="2.3785%" height="15" fill="rgb(218,196,35)" fg:x="1237" fg:w="68"/><text x="43.5169%" y="767.50">&lt;T..</text></g><g><title>core::result::Result&lt;T,E&gt;::expect (2 samples, 0.07%)</title><rect x="45.5754%" y="741" width="0.0700%" height="15" fill="rgb(233,63,24)" fg:x="1303" fg:w="2"/><text x="45.8254%" y="751.50"></text></g><g><title>&lt;csv::byte_record::Position as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="45.7153%" y="709" width="0.0350%" height="15" fill="rgb(225,8,4)" fg:x="1307" fg:w="1"/><text x="45.9653%" y="719.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (1 samples, 0.03%)</title><rect x="45.7153%" y="693" width="0.0350%" height="15" fill="rgb(234,105,35)" fg:x="1307" fg:w="1"/><text x="45.9653%" y="703.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (4 samples, 0.14%)</title><rect x="45.7852%" y="693" width="0.1399%" height="15" fill="rgb(236,21,32)" fg:x="1309" fg:w="4"/><text x="46.0352%" y="703.50"></text></g><g><title>core::slice::ascii::is_ascii (4 samples, 0.14%)</title><rect x="45.7852%" y="677" width="0.1399%" height="15" fill="rgb(228,109,6)" fg:x="1309" fg:w="4"/><text x="46.0352%" y="687.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (13 samples, 0.45%)</title><rect x="45.7503%" y="709" width="0.4547%" height="15" fill="rgb(229,215,31)" fg:x="1308" fg:w="13"/><text x="46.0003%" y="719.50"></text></g><g><title>core::str::converts::from_utf8 (8 samples, 0.28%)</title><rect x="45.9251%" y="693" width="0.2798%" height="15" fill="rgb(221,52,54)" fg:x="1313" fg:w="8"/><text x="46.1751%" y="703.50"></text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 0.24%)</title><rect x="45.9601%" y="677" width="0.2448%" height="15" fill="rgb(252,129,43)" fg:x="1314" fg:w="7"/><text x="46.2101%" y="687.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (1 samples, 0.03%)</title><rect x="46.2050%" y="645" width="0.0350%" height="15" fill="rgb(248,183,27)" fg:x="1321" fg:w="1"/><text x="46.4550%" y="655.50"></text></g><g><title>next_uptodate_folio (3 samples, 0.10%)</title><rect x="46.3449%" y="389" width="0.1049%" height="15" fill="rgb(250,0,22)" fg:x="1325" fg:w="3"/><text x="46.5949%" y="399.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="46.4498%" y="373" width="0.0350%" height="15" fill="rgb(213,166,10)" fg:x="1328" fg:w="1"/><text x="46.6998%" y="383.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="46.4848%" y="325" width="0.0350%" height="15" fill="rgb(207,163,36)" fg:x="1329" fg:w="1"/><text x="46.7348%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (10 samples, 0.35%)</title><rect x="46.2050%" y="677" width="0.3498%" height="15" fill="rgb(208,122,22)" fg:x="1321" fg:w="10"/><text x="46.4550%" y="687.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (10 samples, 0.35%)</title><rect x="46.2050%" y="661" width="0.3498%" height="15" fill="rgb(207,104,49)" fg:x="1321" fg:w="10"/><text x="46.4550%" y="671.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (9 samples, 0.31%)</title><rect x="46.2399%" y="645" width="0.3148%" height="15" fill="rgb(248,211,50)" fg:x="1322" fg:w="9"/><text x="46.4899%" y="655.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_buf (9 samples, 0.31%)</title><rect x="46.2399%" y="629" width="0.3148%" height="15" fill="rgb(217,13,45)" fg:x="1322" fg:w="9"/><text x="46.4899%" y="639.50"></text></g><g><title>core::io::borrowed_buf::BorrowedCursor::append (9 samples, 0.31%)</title><rect x="46.2399%" y="613" width="0.3148%" height="15" fill="rgb(211,216,49)" fg:x="1322" fg:w="9"/><text x="46.4899%" y="623.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::copy_from_slice (9 samples, 0.31%)</title><rect x="46.2399%" y="597" width="0.3148%" height="15" fill="rgb(221,58,53)" fg:x="1322" fg:w="9"/><text x="46.4899%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9 samples, 0.31%)</title><rect x="46.2399%" y="581" width="0.3148%" height="15" fill="rgb(220,112,41)" fg:x="1322" fg:w="9"/><text x="46.4899%" y="591.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.31%)</title><rect x="46.2399%" y="565" width="0.3148%" height="15" fill="rgb(236,38,28)" fg:x="1322" fg:w="9"/><text x="46.4899%" y="575.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.31%)</title><rect x="46.2399%" y="549" width="0.3148%" height="15" fill="rgb(227,195,22)" fg:x="1322" fg:w="9"/><text x="46.4899%" y="559.50"></text></g><g><title>asm_exc_page_fault (6 samples, 0.21%)</title><rect x="46.3449%" y="533" width="0.2099%" height="15" fill="rgb(214,55,33)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="543.50"></text></g><g><title>exc_page_fault (6 samples, 0.21%)</title><rect x="46.3449%" y="517" width="0.2099%" height="15" fill="rgb(248,80,13)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="527.50"></text></g><g><title>do_user_addr_fault (6 samples, 0.21%)</title><rect x="46.3449%" y="501" width="0.2099%" height="15" fill="rgb(238,52,6)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="511.50"></text></g><g><title>handle_mm_fault (6 samples, 0.21%)</title><rect x="46.3449%" y="485" width="0.2099%" height="15" fill="rgb(224,198,47)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="495.50"></text></g><g><title>__handle_mm_fault (6 samples, 0.21%)</title><rect x="46.3449%" y="469" width="0.2099%" height="15" fill="rgb(233,171,20)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="479.50"></text></g><g><title>handle_pte_fault (6 samples, 0.21%)</title><rect x="46.3449%" y="453" width="0.2099%" height="15" fill="rgb(241,30,25)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="463.50"></text></g><g><title>do_fault (6 samples, 0.21%)</title><rect x="46.3449%" y="437" width="0.2099%" height="15" fill="rgb(207,171,38)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="447.50"></text></g><g><title>do_read_fault (6 samples, 0.21%)</title><rect x="46.3449%" y="421" width="0.2099%" height="15" fill="rgb(234,70,1)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="431.50"></text></g><g><title>filemap_map_pages (6 samples, 0.21%)</title><rect x="46.3449%" y="405" width="0.2099%" height="15" fill="rgb(232,178,18)" fg:x="1325" fg:w="6"/><text x="46.5949%" y="415.50"></text></g><g><title>set_pte_range (3 samples, 0.10%)</title><rect x="46.4498%" y="389" width="0.1049%" height="15" fill="rgb(241,78,40)" fg:x="1328" fg:w="3"/><text x="46.6998%" y="399.50"></text></g><g><title>folio_add_file_rmap_ptes (2 samples, 0.07%)</title><rect x="46.4848%" y="373" width="0.0700%" height="15" fill="rgb(222,35,25)" fg:x="1329" fg:w="2"/><text x="46.7348%" y="383.50"></text></g><g><title>__lruvec_stat_mod_folio (2 samples, 0.07%)</title><rect x="46.4848%" y="357" width="0.0700%" height="15" fill="rgb(207,92,16)" fg:x="1329" fg:w="2"/><text x="46.7348%" y="367.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.07%)</title><rect x="46.4848%" y="341" width="0.0700%" height="15" fill="rgb(216,59,51)" fg:x="1329" fg:w="2"/><text x="46.7348%" y="351.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.03%)</title><rect x="46.5198%" y="325" width="0.0350%" height="15" fill="rgb(213,80,28)" fg:x="1330" fg:w="1"/><text x="46.7698%" y="335.50"></text></g><g><title>csv::reader::ReaderState::add_record (2 samples, 0.07%)</title><rect x="46.5547%" y="677" width="0.0700%" height="15" fill="rgb(220,93,7)" fg:x="1331" fg:w="2"/><text x="46.8047%" y="687.50"></text></g><g><title>asm_sysvec_reschedule_ipi (5 samples, 0.17%)</title><rect x="47.4292%" y="645" width="0.1749%" height="15" fill="rgb(225,24,44)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="655.50"></text></g><g><title>sysvec_reschedule_ipi (5 samples, 0.17%)</title><rect x="47.4292%" y="629" width="0.1749%" height="15" fill="rgb(243,74,40)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="639.50"></text></g><g><title>irqentry_exit (5 samples, 0.17%)</title><rect x="47.4292%" y="613" width="0.1749%" height="15" fill="rgb(228,39,7)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="623.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.17%)</title><rect x="47.4292%" y="597" width="0.1749%" height="15" fill="rgb(227,79,8)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="607.50"></text></g><g><title>schedule (5 samples, 0.17%)</title><rect x="47.4292%" y="581" width="0.1749%" height="15" fill="rgb(236,58,11)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="591.50"></text></g><g><title>__schedule (5 samples, 0.17%)</title><rect x="47.4292%" y="565" width="0.1749%" height="15" fill="rgb(249,63,35)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="575.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.17%)</title><rect x="47.4292%" y="549" width="0.1749%" height="15" fill="rgb(252,114,16)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="559.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.17%)</title><rect x="47.4292%" y="533" width="0.1749%" height="15" fill="rgb(254,151,24)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="543.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.17%)</title><rect x="47.4292%" y="517" width="0.1749%" height="15" fill="rgb(253,54,39)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="527.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.17%)</title><rect x="47.4292%" y="501" width="0.1749%" height="15" fill="rgb(243,25,45)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="511.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.17%)</title><rect x="47.4292%" y="485" width="0.1749%" height="15" fill="rgb(234,134,9)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="495.50"></text></g><g><title>native_write_msr (5 samples, 0.17%)</title><rect x="47.4292%" y="469" width="0.1749%" height="15" fill="rgb(227,166,31)" fg:x="1356" fg:w="5"/><text x="47.6792%" y="479.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.03%)</title><rect x="47.6041%" y="645" width="0.0350%" height="15" fill="rgb(245,143,41)" fg:x="1361" fg:w="1"/><text x="47.8541%" y="655.50"></text></g><g><title>csv_core::reader::Dfa::get_output (15 samples, 0.52%)</title><rect x="47.6390%" y="645" width="0.5247%" height="15" fill="rgb(238,181,32)" fg:x="1362" fg:w="15"/><text x="47.8890%" y="655.50"></text></g><g><title>csv_core::reader::Dfa::new_read_record_result (1 samples, 0.03%)</title><rect x="48.1637%" y="645" width="0.0350%" height="15" fill="rgb(224,113,18)" fg:x="1377" fg:w="1"/><text x="48.4137%" y="655.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 0.03%)</title><rect x="48.1637%" y="629" width="0.0350%" height="15" fill="rgb(240,229,28)" fg:x="1377" fg:w="1"/><text x="48.4137%" y="639.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="48.1637%" y="613" width="0.0350%" height="15" fill="rgb(250,185,3)" fg:x="1377" fg:w="1"/><text x="48.4137%" y="623.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (1 samples, 0.03%)</title><rect x="48.1637%" y="597" width="0.0350%" height="15" fill="rgb(212,59,25)" fg:x="1377" fg:w="1"/><text x="48.4137%" y="607.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (110 samples, 3.85%)</title><rect x="45.6453%" y="741" width="3.8475%" height="15" fill="rgb(221,87,20)" fg:x="1305" fg:w="110"/><text x="45.8953%" y="751.50">csv:..</text></g><g><title>csv::string_record::StringRecord::read (109 samples, 3.81%)</title><rect x="45.6803%" y="725" width="3.8125%" height="15" fill="rgb(213,74,28)" fg:x="1306" fg:w="109"/><text x="45.9303%" y="735.50">csv:..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (94 samples, 3.29%)</title><rect x="46.2050%" y="709" width="3.2879%" height="15" fill="rgb(224,132,34)" fg:x="1321" fg:w="94"/><text x="46.4550%" y="719.50">csv..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (94 samples, 3.29%)</title><rect x="46.2050%" y="693" width="3.2879%" height="15" fill="rgb(222,101,24)" fg:x="1321" fg:w="94"/><text x="46.4550%" y="703.50">csv..</text></g><g><title>csv_core::reader::Reader::read_record (82 samples, 2.87%)</title><rect x="46.6247%" y="677" width="2.8681%" height="15" fill="rgb(254,142,4)" fg:x="1333" fg:w="82"/><text x="46.8747%" y="687.50">cs..</text></g><g><title>csv_core::reader::Reader::read_record_dfa (82 samples, 2.87%)</title><rect x="46.6247%" y="661" width="2.8681%" height="15" fill="rgb(230,229,49)" fg:x="1333" fg:w="82"/><text x="46.8747%" y="671.50">cs..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (37 samples, 1.29%)</title><rect x="48.1987%" y="645" width="1.2942%" height="15" fill="rgb(238,70,47)" fg:x="1378" fg:w="37"/><text x="48.4487%" y="655.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="49.4579%" y="629" width="0.0350%" height="15" fill="rgb(231,160,17)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="639.50"></text></g><g><title>common_interrupt (1 samples, 0.03%)</title><rect x="49.4579%" y="613" width="0.0350%" height="15" fill="rgb(218,68,53)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="623.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="49.4579%" y="597" width="0.0350%" height="15" fill="rgb(236,111,10)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="607.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.03%)</title><rect x="49.4579%" y="581" width="0.0350%" height="15" fill="rgb(224,34,41)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="591.50"></text></g><g><title>handle_softirqs (1 samples, 0.03%)</title><rect x="49.4579%" y="565" width="0.0350%" height="15" fill="rgb(241,118,19)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="575.50"></text></g><g><title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="49.4579%" y="549" width="0.0350%" height="15" fill="rgb(238,129,25)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="559.50"></text></g><g><title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="49.4579%" y="533" width="0.0350%" height="15" fill="rgb(238,22,31)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="543.50"></text></g><g><title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="49.4579%" y="517" width="0.0350%" height="15" fill="rgb(222,174,48)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="527.50"></text></g><g><title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="49.4579%" y="501" width="0.0350%" height="15" fill="rgb(206,152,40)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="511.50"></text></g><g><title>btusb_intr_complete (1 samples, 0.03%)</title><rect x="49.4579%" y="485" width="0.0350%" height="15" fill="rgb(218,99,54)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="495.50"></text></g><g><title>btusb_recv_intr (1 samples, 0.03%)</title><rect x="49.4579%" y="469" width="0.0350%" height="15" fill="rgb(220,174,26)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="479.50"></text></g><g><title>queue_delayed_work_on (1 samples, 0.03%)</title><rect x="49.4579%" y="453" width="0.0350%" height="15" fill="rgb(245,116,9)" fg:x="1414" fg:w="1"/><text x="49.7079%" y="463.50"></text></g><g><title>&lt;csv::byte_record::Bounds as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="49.4928%" y="709" width="0.0350%" height="15" fill="rgb(209,72,35)" fg:x="1415" fg:w="1"/><text x="49.7428%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.03%)</title><rect x="49.4928%" y="693" width="0.0350%" height="15" fill="rgb(226,126,21)" fg:x="1415" fg:w="1"/><text x="49.7428%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.03%)</title><rect x="49.4928%" y="677" width="0.0350%" height="15" fill="rgb(227,192,1)" fg:x="1415" fg:w="1"/><text x="49.7428%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.03%)</title><rect x="49.4928%" y="661" width="0.0350%" height="15" fill="rgb(237,180,29)" fg:x="1415" fg:w="1"/><text x="49.7428%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.03%)</title><rect x="49.4928%" y="645" width="0.0350%" height="15" fill="rgb(230,197,35)" fg:x="1415" fg:w="1"/><text x="49.7428%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="49.4928%" y="629" width="0.0350%" height="15" fill="rgb(246,193,31)" fg:x="1415" fg:w="1"/><text x="49.7428%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="49.4928%" y="613" width="0.0350%" height="15" fill="rgb(241,36,4)" fg:x="1415" fg:w="1"/><text x="49.7428%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="49.4928%" y="597" width="0.0350%" height="15" fill="rgb(241,130,17)" fg:x="1415" fg:w="1"/><text x="49.7428%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="49.5278%" y="645" width="0.0350%" height="15" fill="rgb(206,137,32)" fg:x="1416" fg:w="1"/><text x="49.7778%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.03%)</title><rect x="49.5278%" y="629" width="0.0350%" height="15" fill="rgb(237,228,51)" fg:x="1416" fg:w="1"/><text x="49.7778%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (1 samples, 0.03%)</title><rect x="49.5278%" y="613" width="0.0350%" height="15" fill="rgb(243,6,42)" fg:x="1416" fg:w="1"/><text x="49.7778%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="49.5278%" y="597" width="0.0350%" height="15" fill="rgb(251,74,28)" fg:x="1416" fg:w="1"/><text x="49.7778%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="49.5278%" y="581" width="0.0350%" height="15" fill="rgb(218,20,49)" fg:x="1416" fg:w="1"/><text x="49.7778%" y="591.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="49.5278%" y="565" width="0.0350%" height="15" fill="rgb(238,28,14)" fg:x="1416" fg:w="1"/><text x="49.7778%" y="575.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="49.5278%" y="549" width="0.0350%" height="15" fill="rgb(229,40,46)" fg:x="1416" fg:w="1"/><text x="49.7778%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.07%)</title><rect x="49.5278%" y="709" width="0.0700%" height="15" fill="rgb(244,195,20)" fg:x="1416" fg:w="2"/><text x="49.7778%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.07%)</title><rect x="49.5278%" y="693" width="0.0700%" height="15" fill="rgb(253,56,35)" fg:x="1416" fg:w="2"/><text x="49.7778%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.07%)</title><rect x="49.5278%" y="677" width="0.0700%" height="15" fill="rgb(210,149,44)" fg:x="1416" fg:w="2"/><text x="49.7778%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.07%)</title><rect x="49.5278%" y="661" width="0.0700%" height="15" fill="rgb(240,135,12)" fg:x="1416" fg:w="2"/><text x="49.7778%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.03%)</title><rect x="49.5628%" y="645" width="0.0350%" height="15" fill="rgb(251,24,50)" fg:x="1417" fg:w="1"/><text x="49.8128%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="49.5628%" y="629" width="0.0350%" height="15" fill="rgb(243,200,47)" fg:x="1417" fg:w="1"/><text x="49.8128%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="49.5628%" y="613" width="0.0350%" height="15" fill="rgb(224,166,26)" fg:x="1417" fg:w="1"/><text x="49.8128%" y="623.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.07%)</title><rect x="49.5978%" y="597" width="0.0700%" height="15" fill="rgb(233,0,47)" fg:x="1418" fg:w="2"/><text x="49.8478%" y="607.50"></text></g><g><title>tcache_get (2 samples, 0.07%)</title><rect x="49.5978%" y="581" width="0.0700%" height="15" fill="rgb(253,80,5)" fg:x="1418" fg:w="2"/><text x="49.8478%" y="591.50"></text></g><g><title>tcache_get_n (2 samples, 0.07%)</title><rect x="49.5978%" y="565" width="0.0700%" height="15" fill="rgb(214,133,25)" fg:x="1418" fg:w="2"/><text x="49.8478%" y="575.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="49.6677%" y="597" width="0.0350%" height="15" fill="rgb(209,27,14)" fg:x="1420" fg:w="1"/><text x="49.9177%" y="607.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="49.6677%" y="581" width="0.0350%" height="15" fill="rgb(219,102,51)" fg:x="1420" fg:w="1"/><text x="49.9177%" y="591.50"></text></g><g><title>&lt;csv::reader::StringRecordsIter&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (117 samples, 4.09%)</title><rect x="45.6453%" y="757" width="4.0923%" height="15" fill="rgb(237,18,16)" fg:x="1305" fg:w="117"/><text x="45.8953%" y="767.50">&lt;csv..</text></g><g><title>csv::string_record::StringRecord::clone_truncated (7 samples, 0.24%)</title><rect x="49.4928%" y="741" width="0.2448%" height="15" fill="rgb(241,85,17)" fg:x="1415" fg:w="7"/><text x="49.7428%" y="751.50"></text></g><g><title>csv::byte_record::ByteRecord::clone_truncated (7 samples, 0.24%)</title><rect x="49.4928%" y="725" width="0.2448%" height="15" fill="rgb(236,90,42)" fg:x="1415" fg:w="7"/><text x="49.7428%" y="735.50"></text></g><g><title>csv::byte_record::ByteRecord::new (4 samples, 0.14%)</title><rect x="49.5978%" y="709" width="0.1399%" height="15" fill="rgb(249,57,21)" fg:x="1418" fg:w="4"/><text x="49.8478%" y="719.50"></text></g><g><title>csv::byte_record::ByteRecord::with_capacity (4 samples, 0.14%)</title><rect x="49.5978%" y="693" width="0.1399%" height="15" fill="rgb(243,12,36)" fg:x="1418" fg:w="4"/><text x="49.8478%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (4 samples, 0.14%)</title><rect x="49.5978%" y="677" width="0.1399%" height="15" fill="rgb(253,128,47)" fg:x="1418" fg:w="4"/><text x="49.8478%" y="687.50"></text></g><g><title>alloc::alloc::exchange_malloc (4 samples, 0.14%)</title><rect x="49.5978%" y="661" width="0.1399%" height="15" fill="rgb(207,33,20)" fg:x="1418" fg:w="4"/><text x="49.8478%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.14%)</title><rect x="49.5978%" y="645" width="0.1399%" height="15" fill="rgb(233,215,35)" fg:x="1418" fg:w="4"/><text x="49.8478%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.14%)</title><rect x="49.5978%" y="629" width="0.1399%" height="15" fill="rgb(249,188,52)" fg:x="1418" fg:w="4"/><text x="49.8478%" y="639.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.14%)</title><rect x="49.5978%" y="613" width="0.1399%" height="15" fill="rgb(225,12,32)" fg:x="1418" fg:w="4"/><text x="49.8478%" y="623.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="49.7027%" y="597" width="0.0350%" height="15" fill="rgb(247,98,14)" fg:x="1421" fg:w="1"/><text x="49.9527%" y="607.50"></text></g><g><title>_int_malloc (8 samples, 0.28%)</title><rect x="50.2274%" y="517" width="0.2798%" height="15" fill="rgb(247,219,48)" fg:x="1436" fg:w="8"/><text x="50.4774%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="50.4722%" y="501" width="0.0350%" height="15" fill="rgb(253,60,48)" fg:x="1443" fg:w="1"/><text x="50.7222%" y="511.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="50.4722%" y="485" width="0.0350%" height="15" fill="rgb(245,15,52)" fg:x="1443" fg:w="1"/><text x="50.7222%" y="495.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="50.4722%" y="469" width="0.0350%" height="15" fill="rgb(220,133,28)" fg:x="1443" fg:w="1"/><text x="50.7222%" y="479.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="50.4722%" y="453" width="0.0350%" height="15" fill="rgb(217,180,4)" fg:x="1443" fg:w="1"/><text x="50.7222%" y="463.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="50.4722%" y="437" width="0.0350%" height="15" fill="rgb(251,24,1)" fg:x="1443" fg:w="1"/><text x="50.7222%" y="447.50"></text></g><g><title>enqueue_hrtimer (1 samples, 0.03%)</title><rect x="50.4722%" y="421" width="0.0350%" height="15" fill="rgb(212,185,49)" fg:x="1443" fg:w="1"/><text x="50.7222%" y="431.50"></text></g><g><title>timerqueue_add (1 samples, 0.03%)</title><rect x="50.4722%" y="405" width="0.0350%" height="15" fill="rgb(215,175,22)" fg:x="1443" fg:w="1"/><text x="50.7222%" y="415.50"></text></g><g><title>checked_request2size (2 samples, 0.07%)</title><rect x="50.5072%" y="517" width="0.0700%" height="15" fill="rgb(250,205,14)" fg:x="1444" fg:w="2"/><text x="50.7572%" y="527.50"></text></g><g><title>__GI___libc_malloc (29 samples, 1.01%)</title><rect x="49.7726%" y="533" width="1.0143%" height="15" fill="rgb(225,211,22)" fg:x="1423" fg:w="29"/><text x="50.0226%" y="543.50"></text></g><g><title>tcache_get (6 samples, 0.21%)</title><rect x="50.5771%" y="517" width="0.2099%" height="15" fill="rgb(251,179,42)" fg:x="1446" fg:w="6"/><text x="50.8271%" y="527.50"></text></g><g><title>tcache_get_n (6 samples, 0.21%)</title><rect x="50.5771%" y="501" width="0.2099%" height="15" fill="rgb(208,216,51)" fg:x="1446" fg:w="6"/><text x="50.8271%" y="511.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="50.7870%" y="533" width="0.0350%" height="15" fill="rgb(235,36,11)" fg:x="1452" fg:w="1"/><text x="51.0370%" y="543.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="50.7870%" y="517" width="0.0350%" height="15" fill="rgb(213,189,28)" fg:x="1452" fg:w="1"/><text x="51.0370%" y="527.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="50.8220%" y="533" width="0.0350%" height="15" fill="rgb(227,203,42)" fg:x="1453" fg:w="1"/><text x="51.0720%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (32 samples, 1.12%)</title><rect x="49.7726%" y="581" width="1.1193%" height="15" fill="rgb(244,72,36)" fg:x="1423" fg:w="32"/><text x="50.0226%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (32 samples, 1.12%)</title><rect x="49.7726%" y="565" width="1.1193%" height="15" fill="rgb(213,53,17)" fg:x="1423" fg:w="32"/><text x="50.0226%" y="575.50"></text></g><g><title>alloc::alloc::alloc (32 samples, 1.12%)</title><rect x="49.7726%" y="549" width="1.1193%" height="15" fill="rgb(207,167,3)" fg:x="1423" fg:w="32"/><text x="50.0226%" y="559.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="50.8569%" y="533" width="0.0350%" height="15" fill="rgb(216,98,30)" fg:x="1454" fg:w="1"/><text x="51.1069%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 1.19%)</title><rect x="49.7377%" y="629" width="1.1892%" height="15" fill="rgb(236,123,15)" fg:x="1422" fg:w="34"/><text x="49.9877%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 1.19%)</title><rect x="49.7377%" y="613" width="1.1892%" height="15" fill="rgb(248,81,50)" fg:x="1422" fg:w="34"/><text x="49.9877%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (34 samples, 1.19%)</title><rect x="49.7377%" y="597" width="1.1892%" height="15" fill="rgb(214,120,4)" fg:x="1422" fg:w="34"/><text x="49.9877%" y="607.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="50.8919%" y="581" width="0.0350%" height="15" fill="rgb(208,179,34)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="591.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="50.8919%" y="565" width="0.0350%" height="15" fill="rgb(227,140,7)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="575.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="50.8919%" y="549" width="0.0350%" height="15" fill="rgb(214,22,6)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="559.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="50.8919%" y="533" width="0.0350%" height="15" fill="rgb(207,137,27)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="543.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="50.8919%" y="517" width="0.0350%" height="15" fill="rgb(210,8,46)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="527.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="50.8919%" y="501" width="0.0350%" height="15" fill="rgb(240,16,54)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="511.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="50.8919%" y="485" width="0.0350%" height="15" fill="rgb(211,209,29)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="495.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="50.8919%" y="469" width="0.0350%" height="15" fill="rgb(226,228,24)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="479.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="50.8919%" y="453" width="0.0350%" height="15" fill="rgb(222,84,9)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="463.50"></text></g><g><title>perf_event_task_tick (1 samples, 0.03%)</title><rect x="50.8919%" y="437" width="0.0350%" height="15" fill="rgb(234,203,30)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="447.50"></text></g><g><title>perf_adjust_freq_unthr_context (1 samples, 0.03%)</title><rect x="50.8919%" y="421" width="0.0350%" height="15" fill="rgb(238,109,14)" fg:x="1455" fg:w="1"/><text x="51.1419%" y="431.50"></text></g><g><title>&lt;str as alloc::string::ToString&gt;::to_string (43 samples, 1.50%)</title><rect x="49.7377%" y="757" width="1.5040%" height="15" fill="rgb(233,206,34)" fg:x="1422" fg:w="43"/><text x="49.9877%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (43 samples, 1.50%)</title><rect x="49.7377%" y="741" width="1.5040%" height="15" fill="rgb(220,167,47)" fg:x="1422" fg:w="43"/><text x="49.9877%" y="751.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (43 samples, 1.50%)</title><rect x="49.7377%" y="725" width="1.5040%" height="15" fill="rgb(238,105,10)" fg:x="1422" fg:w="43"/><text x="49.9877%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (43 samples, 1.50%)</title><rect x="49.7377%" y="709" width="1.5040%" height="15" fill="rgb(213,227,17)" fg:x="1422" fg:w="43"/><text x="49.9877%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (43 samples, 1.50%)</title><rect x="49.7377%" y="693" width="1.5040%" height="15" fill="rgb(217,132,38)" fg:x="1422" fg:w="43"/><text x="49.9877%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (43 samples, 1.50%)</title><rect x="49.7377%" y="677" width="1.5040%" height="15" fill="rgb(242,146,4)" fg:x="1422" fg:w="43"/><text x="49.9877%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (43 samples, 1.50%)</title><rect x="49.7377%" y="661" width="1.5040%" height="15" fill="rgb(212,61,9)" fg:x="1422" fg:w="43"/><text x="49.9877%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (43 samples, 1.50%)</title><rect x="49.7377%" y="645" width="1.5040%" height="15" fill="rgb(247,126,22)" fg:x="1422" fg:w="43"/><text x="49.9877%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.31%)</title><rect x="50.9269%" y="629" width="0.3148%" height="15" fill="rgb(220,196,2)" fg:x="1456" fg:w="9"/><text x="51.1769%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.31%)</title><rect x="50.9269%" y="613" width="0.3148%" height="15" fill="rgb(208,46,4)" fg:x="1456" fg:w="9"/><text x="51.1769%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.28%)</title><rect x="50.9619%" y="597" width="0.2798%" height="15" fill="rgb(252,104,46)" fg:x="1457" fg:w="8"/><text x="51.2119%" y="607.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="51.2417%" y="709" width="0.0350%" height="15" fill="rgb(237,152,48)" fg:x="1465" fg:w="1"/><text x="51.4917%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="51.2417%" y="693" width="0.0350%" height="15" fill="rgb(221,59,37)" fg:x="1465" fg:w="1"/><text x="51.4917%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="51.2417%" y="677" width="0.0350%" height="15" fill="rgb(209,202,51)" fg:x="1465" fg:w="1"/><text x="51.4917%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="51.2417%" y="661" width="0.0350%" height="15" fill="rgb(228,81,30)" fg:x="1465" fg:w="1"/><text x="51.4917%" y="671.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="51.2417%" y="645" width="0.0350%" height="15" fill="rgb(227,42,39)" fg:x="1465" fg:w="1"/><text x="51.4917%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="51.2767%" y="693" width="0.0700%" height="15" fill="rgb(221,26,2)" fg:x="1466" fg:w="2"/><text x="51.5267%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.07%)</title><rect x="51.2767%" y="677" width="0.0700%" height="15" fill="rgb(254,61,31)" fg:x="1466" fg:w="2"/><text x="51.5267%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.07%)</title><rect x="51.2767%" y="661" width="0.0700%" height="15" fill="rgb(222,173,38)" fg:x="1466" fg:w="2"/><text x="51.5267%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.07%)</title><rect x="51.2767%" y="645" width="0.0700%" height="15" fill="rgb(218,50,12)" fg:x="1466" fg:w="2"/><text x="51.5267%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.07%)</title><rect x="51.2767%" y="629" width="0.0700%" height="15" fill="rgb(223,88,40)" fg:x="1466" fg:w="2"/><text x="51.5267%" y="639.50"></text></g><g><title>__GI___libc_free (2 samples, 0.07%)</title><rect x="51.2767%" y="613" width="0.0700%" height="15" fill="rgb(237,54,19)" fg:x="1466" fg:w="2"/><text x="51.5267%" y="623.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.03%)</title><rect x="51.3116%" y="597" width="0.0350%" height="15" fill="rgb(251,129,25)" fg:x="1467" fg:w="1"/><text x="51.5616%" y="607.50"></text></g><g><title>_int_free (2 samples, 0.07%)</title><rect x="51.3466%" y="581" width="0.0700%" height="15" fill="rgb(238,97,19)" fg:x="1468" fg:w="2"/><text x="51.5966%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::string_record::StringRecord&gt; (7 samples, 0.24%)</title><rect x="51.2417%" y="757" width="0.2448%" height="15" fill="rgb(240,169,18)" fg:x="1465" fg:w="7"/><text x="51.4917%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecord&gt; (7 samples, 0.24%)</title><rect x="51.2417%" y="741" width="0.2448%" height="15" fill="rgb(230,187,49)" fg:x="1465" fg:w="7"/><text x="51.4917%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;csv::byte_record::ByteRecordInner&gt;&gt; (7 samples, 0.24%)</title><rect x="51.2417%" y="725" width="0.2448%" height="15" fill="rgb(209,44,26)" fg:x="1465" fg:w="7"/><text x="51.4917%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::ByteRecordInner&gt; (6 samples, 0.21%)</title><rect x="51.2767%" y="709" width="0.2099%" height="15" fill="rgb(244,0,6)" fg:x="1466" fg:w="6"/><text x="51.5267%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;csv::byte_record::Bounds&gt; (4 samples, 0.14%)</title><rect x="51.3466%" y="693" width="0.1399%" height="15" fill="rgb(248,18,21)" fg:x="1468" fg:w="4"/><text x="51.5966%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;usize&gt;&gt; (4 samples, 0.14%)</title><rect x="51.3466%" y="677" width="0.1399%" height="15" fill="rgb(245,180,19)" fg:x="1468" fg:w="4"/><text x="51.5966%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;usize&gt;&gt; (4 samples, 0.14%)</title><rect x="51.3466%" y="661" width="0.1399%" height="15" fill="rgb(252,118,36)" fg:x="1468" fg:w="4"/><text x="51.5966%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.14%)</title><rect x="51.3466%" y="645" width="0.1399%" height="15" fill="rgb(210,224,19)" fg:x="1468" fg:w="4"/><text x="51.5966%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.14%)</title><rect x="51.3466%" y="629" width="0.1399%" height="15" fill="rgb(218,30,24)" fg:x="1468" fg:w="4"/><text x="51.5966%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.14%)</title><rect x="51.3466%" y="613" width="0.1399%" height="15" fill="rgb(219,75,50)" fg:x="1468" fg:w="4"/><text x="51.5966%" y="623.50"></text></g><g><title>__GI___libc_free (4 samples, 0.14%)</title><rect x="51.3466%" y="597" width="0.1399%" height="15" fill="rgb(234,72,50)" fg:x="1468" fg:w="4"/><text x="51.5966%" y="607.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.07%)</title><rect x="51.4166%" y="581" width="0.0700%" height="15" fill="rgb(219,100,48)" fg:x="1470" fg:w="2"/><text x="51.6666%" y="591.50"></text></g><g><title>malloc_consolidate (1 samples, 0.03%)</title><rect x="51.4516%" y="565" width="0.0350%" height="15" fill="rgb(253,5,41)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="575.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="51.4516%" y="549" width="0.0350%" height="15" fill="rgb(247,181,11)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="559.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="51.4516%" y="533" width="0.0350%" height="15" fill="rgb(222,223,25)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="543.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="51.4516%" y="517" width="0.0350%" height="15" fill="rgb(214,198,28)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="527.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="51.4516%" y="501" width="0.0350%" height="15" fill="rgb(230,46,43)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="511.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="51.4516%" y="485" width="0.0350%" height="15" fill="rgb(233,65,53)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="495.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="51.4516%" y="469" width="0.0350%" height="15" fill="rgb(221,121,27)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="479.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="51.4516%" y="453" width="0.0350%" height="15" fill="rgb(247,70,47)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="463.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="51.4516%" y="437" width="0.0350%" height="15" fill="rgb(228,85,35)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="447.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="51.4516%" y="421" width="0.0350%" height="15" fill="rgb(209,50,18)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="431.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="51.4516%" y="405" width="0.0350%" height="15" fill="rgb(250,19,35)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="415.50"></text></g><g><title>update_curr (1 samples, 0.03%)</title><rect x="51.4516%" y="389" width="0.0350%" height="15" fill="rgb(253,107,29)" fg:x="1471" fg:w="1"/><text x="51.7016%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="51.4865%" y="693" width="0.0350%" height="15" fill="rgb(252,179,29)" fg:x="1472" fg:w="1"/><text x="51.7365%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (4 samples, 0.14%)</title><rect x="51.6964%" y="613" width="0.1399%" height="15" fill="rgb(238,194,6)" fg:x="1478" fg:w="4"/><text x="51.9464%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (4 samples, 0.14%)</title><rect x="51.6964%" y="597" width="0.1399%" height="15" fill="rgb(238,164,29)" fg:x="1478" fg:w="4"/><text x="51.9464%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.14%)</title><rect x="51.6964%" y="581" width="0.1399%" height="15" fill="rgb(224,25,9)" fg:x="1478" fg:w="4"/><text x="51.9464%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.14%)</title><rect x="51.6964%" y="565" width="0.1399%" height="15" fill="rgb(244,153,23)" fg:x="1478" fg:w="4"/><text x="51.9464%" y="575.50"></text></g><g><title>__GI___libc_free (4 samples, 0.14%)</title><rect x="51.6964%" y="549" width="0.1399%" height="15" fill="rgb(212,203,14)" fg:x="1478" fg:w="4"/><text x="51.9464%" y="559.50"></text></g><g><title>_int_free (3 samples, 0.10%)</title><rect x="51.7314%" y="533" width="0.1049%" height="15" fill="rgb(220,164,20)" fg:x="1479" fg:w="3"/><text x="51.9814%" y="543.50"></text></g><g><title>tcache_put (1 samples, 0.03%)</title><rect x="51.8013%" y="517" width="0.0350%" height="15" fill="rgb(222,203,48)" fg:x="1481" fg:w="1"/><text x="52.0513%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (5 samples, 0.17%)</title><rect x="51.6964%" y="629" width="0.1749%" height="15" fill="rgb(215,159,22)" fg:x="1478" fg:w="5"/><text x="51.9464%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::take_front (1 samples, 0.03%)</title><rect x="51.8363%" y="613" width="0.0350%" height="15" fill="rgb(216,183,47)" fg:x="1482" fg:w="1"/><text x="52.0863%" y="623.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.03%)</title><rect x="51.8363%" y="597" width="0.0350%" height="15" fill="rgb(229,195,25)" fg:x="1482" fg:w="1"/><text x="52.0863%" y="607.50"></text></g><g><title>core::mem::replace (1 samples, 0.03%)</title><rect x="51.8363%" y="581" width="0.0350%" height="15" fill="rgb(224,132,51)" fg:x="1482" fg:w="1"/><text x="52.0863%" y="591.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="51.8363%" y="565" width="0.0350%" height="15" fill="rgb(240,63,7)" fg:x="1482" fg:w="1"/><text x="52.0863%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.07%)</title><rect x="52.0112%" y="533" width="0.0700%" height="15" fill="rgb(249,182,41)" fg:x="1487" fg:w="2"/><text x="52.2612%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (7 samples, 0.24%)</title><rect x="51.9063%" y="549" width="0.2448%" height="15" fill="rgb(243,47,26)" fg:x="1484" fg:w="7"/><text x="52.1563%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (2 samples, 0.07%)</title><rect x="52.0811%" y="533" width="0.0700%" height="15" fill="rgb(233,48,2)" fg:x="1489" fg:w="2"/><text x="52.3311%" y="543.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (2 samples, 0.07%)</title><rect x="52.0811%" y="517" width="0.0700%" height="15" fill="rgb(244,165,34)" fg:x="1489" fg:w="2"/><text x="52.3311%" y="527.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (2 samples, 0.07%)</title><rect x="52.1511%" y="549" width="0.0700%" height="15" fill="rgb(207,89,7)" fg:x="1491" fg:w="2"/><text x="52.4011%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (2 samples, 0.07%)</title><rect x="52.1511%" y="533" width="0.0700%" height="15" fill="rgb(244,117,36)" fg:x="1491" fg:w="2"/><text x="52.4011%" y="543.50"></text></g><g><title>__GI___libc_free (8 samples, 0.28%)</title><rect x="52.2211%" y="501" width="0.2798%" height="15" fill="rgb(226,144,34)" fg:x="1493" fg:w="8"/><text x="52.4711%" y="511.50"></text></g><g><title>_int_free (5 samples, 0.17%)</title><rect x="52.3260%" y="485" width="0.1749%" height="15" fill="rgb(213,23,19)" fg:x="1496" fg:w="5"/><text x="52.5760%" y="495.50"></text></g><g><title>tcache_put (2 samples, 0.07%)</title><rect x="52.4309%" y="469" width="0.0700%" height="15" fill="rgb(217,75,12)" fg:x="1499" fg:w="2"/><text x="52.6809%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.31%)</title><rect x="52.2211%" y="533" width="0.3148%" height="15" fill="rgb(224,159,17)" fg:x="1493" fg:w="9"/><text x="52.4711%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.31%)</title><rect x="52.2211%" y="517" width="0.3148%" height="15" fill="rgb(217,118,1)" fg:x="1493" fg:w="9"/><text x="52.4711%" y="527.50"></text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="52.5009%" y="501" width="0.0350%" height="15" fill="rgb(232,180,48)" fg:x="1501" fg:w="1"/><text x="52.7509%" y="511.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (20 samples, 0.70%)</title><rect x="51.8713%" y="581" width="0.6995%" height="15" fill="rgb(230,27,33)" fg:x="1483" fg:w="20"/><text x="52.1213%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (20 samples, 0.70%)</title><rect x="51.8713%" y="565" width="0.6995%" height="15" fill="rgb(205,31,21)" fg:x="1483" fg:w="20"/><text x="52.1213%" y="575.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (10 samples, 0.35%)</title><rect x="52.2211%" y="549" width="0.3498%" height="15" fill="rgb(253,59,4)" fg:x="1493" fg:w="10"/><text x="52.4711%" y="559.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.03%)</title><rect x="52.5359%" y="533" width="0.0350%" height="15" fill="rgb(224,201,9)" fg:x="1502" fg:w="1"/><text x="52.7859%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (22 samples, 0.77%)</title><rect x="51.8713%" y="613" width="0.7695%" height="15" fill="rgb(229,206,30)" fg:x="1483" fg:w="22"/><text x="52.1213%" y="623.50"></text></g><g><title>alloc::collections::btree::mem::replace (22 samples, 0.77%)</title><rect x="51.8713%" y="597" width="0.7695%" height="15" fill="rgb(212,67,47)" fg:x="1483" fg:w="22"/><text x="52.1213%" y="607.50"></text></g><g><title>core::ptr::write (2 samples, 0.07%)</title><rect x="52.5708%" y="581" width="0.0700%" height="15" fill="rgb(211,96,50)" fg:x="1503" fg:w="2"/><text x="52.8208%" y="591.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (33 samples, 1.15%)</title><rect x="51.6614%" y="645" width="1.1542%" height="15" fill="rgb(252,114,18)" fg:x="1477" fg:w="33"/><text x="51.9114%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (27 samples, 0.94%)</title><rect x="51.8713%" y="629" width="0.9444%" height="15" fill="rgb(223,58,37)" fg:x="1483" fg:w="27"/><text x="52.1213%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (5 samples, 0.17%)</title><rect x="52.6408%" y="613" width="0.1749%" height="15" fill="rgb(237,70,4)" fg:x="1505" fg:w="5"/><text x="52.8908%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (1 samples, 0.03%)</title><rect x="52.7807%" y="597" width="0.0350%" height="15" fill="rgb(244,85,46)" fg:x="1509" fg:w="1"/><text x="53.0307%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.03%)</title><rect x="52.7807%" y="581" width="0.0350%" height="15" fill="rgb(223,39,52)" fg:x="1509" fg:w="1"/><text x="53.0307%" y="591.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (1 samples, 0.03%)</title><rect x="52.7807%" y="565" width="0.0350%" height="15" fill="rgb(218,200,14)" fg:x="1509" fg:w="1"/><text x="53.0307%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.03%)</title><rect x="52.7807%" y="549" width="0.0350%" height="15" fill="rgb(208,171,16)" fg:x="1509" fg:w="1"/><text x="53.0307%" y="559.50"></text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="52.7807%" y="533" width="0.0350%" height="15" fill="rgb(234,200,18)" fg:x="1509" fg:w="1"/><text x="53.0307%" y="543.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="54.9843%" y="485" width="0.0350%" height="15" fill="rgb(228,45,11)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="495.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="54.9843%" y="469" width="0.0350%" height="15" fill="rgb(237,182,11)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="479.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="54.9843%" y="453" width="0.0350%" height="15" fill="rgb(241,175,49)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="463.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="54.9843%" y="437" width="0.0350%" height="15" fill="rgb(247,38,35)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="447.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="54.9843%" y="421" width="0.0350%" height="15" fill="rgb(228,39,49)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="431.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="54.9843%" y="405" width="0.0350%" height="15" fill="rgb(226,101,26)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="415.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="54.9843%" y="389" width="0.0350%" height="15" fill="rgb(206,141,19)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="399.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="54.9843%" y="373" width="0.0350%" height="15" fill="rgb(211,200,13)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="383.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="54.9843%" y="357" width="0.0350%" height="15" fill="rgb(241,121,6)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="367.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="54.9843%" y="341" width="0.0350%" height="15" fill="rgb(234,221,29)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="351.50"></text></g><g><title>update_curr (1 samples, 0.03%)</title><rect x="54.9843%" y="325" width="0.0350%" height="15" fill="rgb(229,136,5)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="335.50"></text></g><g><title>update_curr_se (1 samples, 0.03%)</title><rect x="54.9843%" y="309" width="0.0350%" height="15" fill="rgb(238,36,11)" fg:x="1572" fg:w="1"/><text x="55.2343%" y="319.50"></text></g><g><title>free_perturb (2 samples, 0.07%)</title><rect x="55.0192%" y="485" width="0.0700%" height="15" fill="rgb(251,55,41)" fg:x="1573" fg:w="2"/><text x="55.2692%" y="495.50"></text></g><g><title>_int_free (31 samples, 1.08%)</title><rect x="54.1098%" y="501" width="1.0843%" height="15" fill="rgb(242,34,40)" fg:x="1547" fg:w="31"/><text x="54.3598%" y="511.50"></text></g><g><title>tcache_put (3 samples, 0.10%)</title><rect x="55.0892%" y="485" width="0.1049%" height="15" fill="rgb(215,42,17)" fg:x="1575" fg:w="3"/><text x="55.3392%" y="495.50"></text></g><g><title>__GI___libc_free (59 samples, 2.06%)</title><rect x="53.1654%" y="517" width="2.0637%" height="15" fill="rgb(207,44,46)" fg:x="1520" fg:w="59"/><text x="53.4154%" y="527.50">_..</text></g><g><title>arena_for_chunk (1 samples, 0.03%)</title><rect x="55.1941%" y="501" width="0.0350%" height="15" fill="rgb(211,206,28)" fg:x="1578" fg:w="1"/><text x="55.4441%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (60 samples, 2.10%)</title><rect x="53.1654%" y="549" width="2.0986%" height="15" fill="rgb(237,167,16)" fg:x="1520" fg:w="60"/><text x="53.4154%" y="559.50">&lt;..</text></g><g><title>alloc::alloc::dealloc (60 samples, 2.10%)</title><rect x="53.1654%" y="533" width="2.0986%" height="15" fill="rgb(233,66,6)" fg:x="1520" fg:w="60"/><text x="53.4154%" y="543.50">a..</text></g><g><title>__rust_dealloc (1 samples, 0.03%)</title><rect x="55.2291%" y="517" width="0.0350%" height="15" fill="rgb(246,123,29)" fg:x="1579" fg:w="1"/><text x="55.4791%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (73 samples, 2.55%)</title><rect x="52.8157%" y="613" width="2.5533%" height="15" fill="rgb(209,62,40)" fg:x="1510" fg:w="73"/><text x="53.0657%" y="623.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (73 samples, 2.55%)</title><rect x="52.8157%" y="597" width="2.5533%" height="15" fill="rgb(218,4,25)" fg:x="1510" fg:w="73"/><text x="53.0657%" y="607.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (73 samples, 2.55%)</title><rect x="52.8157%" y="581" width="2.5533%" height="15" fill="rgb(253,91,49)" fg:x="1510" fg:w="73"/><text x="53.0657%" y="591.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (73 samples, 2.55%)</title><rect x="52.8157%" y="565" width="2.5533%" height="15" fill="rgb(228,155,29)" fg:x="1510" fg:w="73"/><text x="53.0657%" y="575.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.10%)</title><rect x="55.2641%" y="549" width="0.1049%" height="15" fill="rgb(243,57,37)" fg:x="1580" fg:w="3"/><text x="55.5141%" y="559.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="57.8174%" y="501" width="0.0350%" height="15" fill="rgb(244,167,17)" fg:x="1653" fg:w="1"/><text x="58.0674%" y="511.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="57.8174%" y="485" width="0.0350%" height="15" fill="rgb(207,181,38)" fg:x="1653" fg:w="1"/><text x="58.0674%" y="495.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="57.8174%" y="469" width="0.0350%" height="15" fill="rgb(211,8,23)" fg:x="1653" fg:w="1"/><text x="58.0674%" y="479.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="57.8174%" y="453" width="0.0350%" height="15" fill="rgb(235,11,44)" fg:x="1653" fg:w="1"/><text x="58.0674%" y="463.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="57.8174%" y="437" width="0.0350%" height="15" fill="rgb(248,18,52)" fg:x="1653" fg:w="1"/><text x="58.0674%" y="447.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="57.8174%" y="421" width="0.0350%" height="15" fill="rgb(208,4,7)" fg:x="1653" fg:w="1"/><text x="58.0674%" y="431.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (3 samples, 0.10%)</title><rect x="57.7824%" y="565" width="0.1049%" height="15" fill="rgb(240,17,39)" fg:x="1652" fg:w="3"/><text x="58.0324%" y="575.50"></text></g><g><title>sysvec_apic_timer_interrupt (3 samples, 0.10%)</title><rect x="57.7824%" y="549" width="0.1049%" height="15" fill="rgb(207,170,3)" fg:x="1652" fg:w="3"/><text x="58.0324%" y="559.50"></text></g><g><title>__sysvec_apic_timer_interrupt (3 samples, 0.10%)</title><rect x="57.7824%" y="533" width="0.1049%" height="15" fill="rgb(236,100,52)" fg:x="1652" fg:w="3"/><text x="58.0324%" y="543.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.07%)</title><rect x="57.8174%" y="517" width="0.0700%" height="15" fill="rgb(246,78,51)" fg:x="1653" fg:w="2"/><text x="58.0674%" y="527.50"></text></g><g><title>tick_program_event (1 samples, 0.03%)</title><rect x="57.8524%" y="501" width="0.0350%" height="15" fill="rgb(211,17,15)" fg:x="1654" fg:w="1"/><text x="58.1024%" y="511.50"></text></g><g><title>free_perturb (2 samples, 0.07%)</title><rect x="57.8874%" y="565" width="0.0700%" height="15" fill="rgb(209,59,46)" fg:x="1655" fg:w="2"/><text x="58.1374%" y="575.50"></text></g><g><title>__GI___libc_free (72 samples, 2.52%)</title><rect x="55.5089%" y="597" width="2.5184%" height="15" fill="rgb(210,92,25)" fg:x="1587" fg:w="72"/><text x="55.7589%" y="607.50">__..</text></g><g><title>_int_free (41 samples, 1.43%)</title><rect x="56.5932%" y="581" width="1.4341%" height="15" fill="rgb(238,174,52)" fg:x="1618" fg:w="41"/><text x="56.8432%" y="591.50"></text></g><g><title>tcache_put (2 samples, 0.07%)</title><rect x="57.9573%" y="565" width="0.0700%" height="15" fill="rgb(230,73,7)" fg:x="1657" fg:w="2"/><text x="58.2073%" y="575.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (150 samples, 5.25%)</title><rect x="52.8157%" y="629" width="5.2466%" height="15" fill="rgb(243,124,40)" fg:x="1510" fg:w="150"/><text x="53.0657%" y="639.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (77 samples, 2.69%)</title><rect x="55.3690%" y="613" width="2.6932%" height="15" fill="rgb(244,170,11)" fg:x="1583" fg:w="77"/><text x="55.6190%" y="623.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="58.0273%" y="597" width="0.0350%" height="15" fill="rgb(207,114,54)" fg:x="1659" fg:w="1"/><text x="58.2773%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="58.0273%" y="581" width="0.0350%" height="15" fill="rgb(205,42,20)" fg:x="1659" fg:w="1"/><text x="58.2773%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="58.0273%" y="565" width="0.0350%" height="15" fill="rgb(230,30,28)" fg:x="1659" fg:w="1"/><text x="58.2773%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="58.0273%" y="549" width="0.0350%" height="15" fill="rgb(205,73,54)" fg:x="1659" fg:w="1"/><text x="58.2773%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="58.0273%" y="533" width="0.0350%" height="15" fill="rgb(254,227,23)" fg:x="1659" fg:w="1"/><text x="58.2773%" y="543.50"></text></g><g><title>core::mem::drop (188 samples, 6.58%)</title><rect x="51.5215%" y="693" width="6.5757%" height="15" fill="rgb(228,202,34)" fg:x="1473" fg:w="188"/><text x="51.7715%" y="703.50">core::mem..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (188 samples, 6.58%)</title><rect x="51.5215%" y="677" width="6.5757%" height="15" fill="rgb(222,225,37)" fg:x="1473" fg:w="188"/><text x="51.7715%" y="687.50">core::ptr..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (188 samples, 6.58%)</title><rect x="51.5215%" y="661" width="6.5757%" height="15" fill="rgb(221,14,54)" fg:x="1473" fg:w="188"/><text x="51.7715%" y="671.50">&lt;alloc::c..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (151 samples, 5.28%)</title><rect x="52.8157%" y="645" width="5.2816%" height="15" fill="rgb(254,102,2)" fg:x="1510" fg:w="151"/><text x="53.0657%" y="655.50">alloc:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="58.0623%" y="629" width="0.0350%" height="15" fill="rgb(232,104,17)" fg:x="1660" fg:w="1"/><text x="58.3123%" y="639.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="58.0623%" y="613" width="0.0350%" height="15" fill="rgb(250,220,14)" fg:x="1660" fg:w="1"/><text x="58.3123%" y="623.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (1 samples, 0.03%)</title><rect x="58.0623%" y="597" width="0.0350%" height="15" fill="rgb(241,158,9)" fg:x="1660" fg:w="1"/><text x="58.3123%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;mmap_payload_storage::payload::Payload&gt; (190 samples, 6.65%)</title><rect x="51.4865%" y="757" width="6.6457%" height="15" fill="rgb(246,9,43)" fg:x="1472" fg:w="190"/><text x="51.7365%" y="767.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (190 samples, 6.65%)</title><rect x="51.4865%" y="741" width="6.6457%" height="15" fill="rgb(206,73,33)" fg:x="1472" fg:w="190"/><text x="51.7365%" y="751.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (190 samples, 6.65%)</title><rect x="51.4865%" y="725" width="6.6457%" height="15" fill="rgb(222,79,8)" fg:x="1472" fg:w="190"/><text x="51.7365%" y="735.50">core::ptr..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (190 samples, 6.65%)</title><rect x="51.4865%" y="709" width="6.6457%" height="15" fill="rgb(234,8,54)" fg:x="1472" fg:w="190"/><text x="51.7365%" y="719.50">&lt;alloc::c..</text></g><g><title>core::ptr::read (1 samples, 0.03%)</title><rect x="58.0972%" y="693" width="0.0350%" height="15" fill="rgb(209,134,38)" fg:x="1661" fg:w="1"/><text x="58.3472%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.03%)</title><rect x="58.1322%" y="725" width="0.0350%" height="15" fill="rgb(230,127,29)" fg:x="1662" fg:w="1"/><text x="58.3822%" y="735.50"></text></g><g><title>csv::byte_record::ByteRecord::get::_{{closure}} (1 samples, 0.03%)</title><rect x="58.1322%" y="709" width="0.0350%" height="15" fill="rgb(242,44,41)" fg:x="1662" fg:w="1"/><text x="58.3822%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="58.1322%" y="693" width="0.0350%" height="15" fill="rgb(222,56,43)" fg:x="1662" fg:w="1"/><text x="58.3822%" y="703.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="58.1322%" y="677" width="0.0350%" height="15" fill="rgb(238,39,47)" fg:x="1662" fg:w="1"/><text x="58.3822%" y="687.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="58.1322%" y="661" width="0.0350%" height="15" fill="rgb(226,79,43)" fg:x="1662" fg:w="1"/><text x="58.3822%" y="671.50"></text></g><g><title>csv::string_record::StringRecord::get (5 samples, 0.17%)</title><rect x="58.1322%" y="757" width="0.1749%" height="15" fill="rgb(242,105,53)" fg:x="1662" fg:w="5"/><text x="58.3822%" y="767.50"></text></g><g><title>csv::byte_record::ByteRecord::get (5 samples, 0.17%)</title><rect x="58.1322%" y="741" width="0.1749%" height="15" fill="rgb(251,132,46)" fg:x="1662" fg:w="5"/><text x="58.3822%" y="751.50"></text></g><g><title>csv::byte_record::Bounds::get (4 samples, 0.14%)</title><rect x="58.1672%" y="725" width="0.1399%" height="15" fill="rgb(231,77,14)" fg:x="1663" fg:w="4"/><text x="58.4172%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="58.3071%" y="741" width="0.0350%" height="15" fill="rgb(240,135,9)" fg:x="1667" fg:w="1"/><text x="58.5571%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="58.3071%" y="725" width="0.0350%" height="15" fill="rgb(248,109,14)" fg:x="1667" fg:w="1"/><text x="58.5571%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="58.3071%" y="709" width="0.0350%" height="15" fill="rgb(227,146,52)" fg:x="1667" fg:w="1"/><text x="58.5571%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="58.3071%" y="693" width="0.0350%" height="15" fill="rgb(232,54,3)" fg:x="1667" fg:w="1"/><text x="58.5571%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="58.3071%" y="677" width="0.0350%" height="15" fill="rgb(229,201,43)" fg:x="1667" fg:w="1"/><text x="58.5571%" y="687.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="58.3071%" y="661" width="0.0350%" height="15" fill="rgb(252,161,33)" fg:x="1667" fg:w="1"/><text x="58.5571%" y="671.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="58.3421%" y="661" width="0.0350%" height="15" fill="rgb(226,146,40)" fg:x="1668" fg:w="1"/><text x="58.5921%" y="671.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.07%)</title><rect x="59.8811%" y="373" width="0.0700%" height="15" fill="rgb(219,47,25)" fg:x="1712" fg:w="2"/><text x="60.1311%" y="383.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (11 samples, 0.38%)</title><rect x="59.8111%" y="389" width="0.3847%" height="15" fill="rgb(250,135,13)" fg:x="1710" fg:w="11"/><text x="60.0611%" y="399.50"></text></g><g><title>serde_cbor::read::SliceRead::end (7 samples, 0.24%)</title><rect x="59.9510%" y="373" width="0.2448%" height="15" fill="rgb(219,229,18)" fg:x="1714" fg:w="7"/><text x="60.2010%" y="383.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="60.1609%" y="357" width="0.0350%" height="15" fill="rgb(217,152,27)" fg:x="1720" fg:w="1"/><text x="60.4109%" y="367.50"></text></g><g><title>_int_malloc (7 samples, 0.24%)</title><rect x="61.0003%" y="149" width="0.2448%" height="15" fill="rgb(225,71,47)" fg:x="1744" fg:w="7"/><text x="61.2503%" y="159.50"></text></g><g><title>checked_request2size (4 samples, 0.14%)</title><rect x="61.2452%" y="149" width="0.1399%" height="15" fill="rgb(220,139,14)" fg:x="1751" fg:w="4"/><text x="61.4952%" y="159.50"></text></g><g><title>__GI___libc_malloc (36 samples, 1.26%)</title><rect x="60.3358%" y="165" width="1.2592%" height="15" fill="rgb(247,54,32)" fg:x="1725" fg:w="36"/><text x="60.5858%" y="175.50"></text></g><g><title>tcache_get (6 samples, 0.21%)</title><rect x="61.3851%" y="149" width="0.2099%" height="15" fill="rgb(252,131,39)" fg:x="1755" fg:w="6"/><text x="61.6351%" y="159.50"></text></g><g><title>tcache_get_n (6 samples, 0.21%)</title><rect x="61.3851%" y="133" width="0.2099%" height="15" fill="rgb(210,108,39)" fg:x="1755" fg:w="6"/><text x="61.6351%" y="143.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="61.5950%" y="165" width="0.0350%" height="15" fill="rgb(205,23,29)" fg:x="1761" fg:w="1"/><text x="61.8450%" y="175.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="61.5950%" y="149" width="0.0350%" height="15" fill="rgb(246,139,46)" fg:x="1761" fg:w="1"/><text x="61.8450%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (39 samples, 1.36%)</title><rect x="60.3008%" y="261" width="1.3641%" height="15" fill="rgb(250,81,26)" fg:x="1724" fg:w="39"/><text x="60.5508%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (39 samples, 1.36%)</title><rect x="60.3008%" y="245" width="1.3641%" height="15" fill="rgb(214,104,7)" fg:x="1724" fg:w="39"/><text x="60.5508%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (39 samples, 1.36%)</title><rect x="60.3008%" y="229" width="1.3641%" height="15" fill="rgb(233,189,8)" fg:x="1724" fg:w="39"/><text x="60.5508%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 1.33%)</title><rect x="60.3358%" y="213" width="1.3291%" height="15" fill="rgb(228,141,17)" fg:x="1725" fg:w="38"/><text x="60.5858%" y="223.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 1.33%)</title><rect x="60.3358%" y="197" width="1.3291%" height="15" fill="rgb(247,157,1)" fg:x="1725" fg:w="38"/><text x="60.5858%" y="207.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 1.33%)</title><rect x="60.3358%" y="181" width="1.3291%" height="15" fill="rgb(249,225,5)" fg:x="1725" fg:w="38"/><text x="60.5858%" y="191.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="61.6299%" y="165" width="0.0350%" height="15" fill="rgb(242,55,13)" fg:x="1762" fg:w="1"/><text x="61.8799%" y="175.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (44 samples, 1.54%)</title><rect x="60.1959%" y="389" width="1.5390%" height="15" fill="rgb(230,49,50)" fg:x="1721" fg:w="44"/><text x="60.4459%" y="399.50"></text></g><g><title>&lt;serde_json::value::de::KeyClassifier as serde::de::Visitor&gt;::visit_str (44 samples, 1.54%)</title><rect x="60.1959%" y="373" width="1.5390%" height="15" fill="rgb(241,111,38)" fg:x="1721" fg:w="44"/><text x="60.4459%" y="383.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (41 samples, 1.43%)</title><rect x="60.3008%" y="357" width="1.4341%" height="15" fill="rgb(252,155,4)" fg:x="1724" fg:w="41"/><text x="60.5508%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (41 samples, 1.43%)</title><rect x="60.3008%" y="341" width="1.4341%" height="15" fill="rgb(212,69,32)" fg:x="1724" fg:w="41"/><text x="60.5508%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (41 samples, 1.43%)</title><rect x="60.3008%" y="325" width="1.4341%" height="15" fill="rgb(243,107,47)" fg:x="1724" fg:w="41"/><text x="60.5508%" y="335.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (41 samples, 1.43%)</title><rect x="60.3008%" y="309" width="1.4341%" height="15" fill="rgb(247,130,12)" fg:x="1724" fg:w="41"/><text x="60.5508%" y="319.50"></text></g><g><title>alloc::slice::hack::to_vec (41 samples, 1.43%)</title><rect x="60.3008%" y="293" width="1.4341%" height="15" fill="rgb(233,74,16)" fg:x="1724" fg:w="41"/><text x="60.5508%" y="303.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (41 samples, 1.43%)</title><rect x="60.3008%" y="277" width="1.4341%" height="15" fill="rgb(208,58,18)" fg:x="1724" fg:w="41"/><text x="60.5508%" y="287.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.07%)</title><rect x="61.6649%" y="261" width="0.0700%" height="15" fill="rgb(242,225,1)" fg:x="1763" fg:w="2"/><text x="61.9149%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="61.6649%" y="245" width="0.0700%" height="15" fill="rgb(249,39,40)" fg:x="1763" fg:w="2"/><text x="61.9149%" y="255.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.07%)</title><rect x="61.6649%" y="229" width="0.0700%" height="15" fill="rgb(207,72,44)" fg:x="1763" fg:w="2"/><text x="61.9149%" y="239.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (122 samples, 4.27%)</title><rect x="59.7761%" y="405" width="4.2672%" height="15" fill="rgb(215,193,12)" fg:x="1709" fg:w="122"/><text x="60.0261%" y="415.50">serde..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (66 samples, 2.31%)</title><rect x="61.7349%" y="389" width="2.3085%" height="15" fill="rgb(248,41,39)" fg:x="1765" fg:w="66"/><text x="61.9849%" y="399.50">s..</text></g><g><title>core::str::converts::from_utf8 (63 samples, 2.20%)</title><rect x="61.8398%" y="373" width="2.2036%" height="15" fill="rgb(253,85,4)" fg:x="1768" fg:w="63"/><text x="62.0898%" y="383.50">c..</text></g><g><title>core::str::validations::run_utf8_validation (58 samples, 2.03%)</title><rect x="62.0147%" y="357" width="2.0287%" height="15" fill="rgb(243,70,31)" fg:x="1773" fg:w="58"/><text x="62.2647%" y="367.50">c..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (144 samples, 5.04%)</title><rect x="59.3564%" y="485" width="5.0367%" height="15" fill="rgb(253,195,26)" fg:x="1697" fg:w="144"/><text x="59.6064%" y="495.50">&lt;core:..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (144 samples, 5.04%)</title><rect x="59.3564%" y="469" width="5.0367%" height="15" fill="rgb(243,42,11)" fg:x="1697" fg:w="144"/><text x="59.6064%" y="479.50">serde:..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_string (144 samples, 5.04%)</title><rect x="59.3564%" y="453" width="5.0367%" height="15" fill="rgb(239,66,17)" fg:x="1697" fg:w="144"/><text x="59.6064%" y="463.50">&lt;&amp;mut ..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (144 samples, 5.04%)</title><rect x="59.3564%" y="437" width="5.0367%" height="15" fill="rgb(217,132,21)" fg:x="1697" fg:w="144"/><text x="59.6064%" y="447.50">&lt;&amp;mut ..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (144 samples, 5.04%)</title><rect x="59.3564%" y="421" width="5.0367%" height="15" fill="rgb(252,202,21)" fg:x="1697" fg:w="144"/><text x="59.6064%" y="431.50">serde_..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (10 samples, 0.35%)</title><rect x="64.0434%" y="405" width="0.3498%" height="15" fill="rgb(233,98,36)" fg:x="1831" fg:w="10"/><text x="64.2934%" y="415.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (10 samples, 0.35%)</title><rect x="64.0434%" y="389" width="0.3498%" height="15" fill="rgb(216,153,54)" fg:x="1831" fg:w="10"/><text x="64.2934%" y="399.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (10 samples, 0.35%)</title><rect x="64.0434%" y="373" width="0.3498%" height="15" fill="rgb(250,99,7)" fg:x="1831" fg:w="10"/><text x="64.2934%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.14%)</title><rect x="64.3931%" y="485" width="0.1399%" height="15" fill="rgb(207,56,50)" fg:x="1841" fg:w="4"/><text x="64.6431%" y="495.50"></text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_key_seed (154 samples, 5.39%)</title><rect x="59.2165%" y="501" width="5.3865%" height="15" fill="rgb(244,61,34)" fg:x="1693" fg:w="154"/><text x="59.4665%" y="511.50">&lt;serde_..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::peek (2 samples, 0.07%)</title><rect x="64.5331%" y="485" width="0.0700%" height="15" fill="rgb(241,50,38)" fg:x="1845" fg:w="2"/><text x="64.7831%" y="495.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::peek (2 samples, 0.07%)</title><rect x="64.5331%" y="469" width="0.0700%" height="15" fill="rgb(212,166,30)" fg:x="1845" fg:w="2"/><text x="64.7831%" y="479.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="64.7779%" y="405" width="0.0350%" height="15" fill="rgb(249,127,32)" fg:x="1852" fg:w="1"/><text x="65.0279%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1 samples, 0.03%)</title><rect x="64.8129%" y="373" width="0.0350%" height="15" fill="rgb(209,103,0)" fg:x="1853" fg:w="1"/><text x="65.0629%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.07%)</title><rect x="64.8129%" y="405" width="0.0700%" height="15" fill="rgb(238,209,51)" fg:x="1853" fg:w="2"/><text x="65.0629%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.07%)</title><rect x="64.8129%" y="389" width="0.0700%" height="15" fill="rgb(237,56,23)" fg:x="1853" fg:w="2"/><text x="65.0629%" y="399.50"></text></g><g><title>core::slice::index::get_offset_len_noubcheck (1 samples, 0.03%)</title><rect x="64.8478%" y="373" width="0.0350%" height="15" fill="rgb(215,153,46)" fg:x="1854" fg:w="1"/><text x="65.0978%" y="383.50"></text></g><g><title>core::slice::index::get_noubcheck (1 samples, 0.03%)</title><rect x="64.8478%" y="357" width="0.0350%" height="15" fill="rgb(224,49,31)" fg:x="1854" fg:w="1"/><text x="65.0978%" y="367.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::read (10 samples, 0.35%)</title><rect x="64.7779%" y="421" width="0.3498%" height="15" fill="rgb(250,18,42)" fg:x="1852" fg:w="10"/><text x="65.0279%" y="431.50"></text></g><g><title>serde_cbor::read::SliceRead::end (7 samples, 0.24%)</title><rect x="64.8828%" y="405" width="0.2448%" height="15" fill="rgb(215,176,39)" fg:x="1855" fg:w="7"/><text x="65.1328%" y="415.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="65.0927%" y="389" width="0.0350%" height="15" fill="rgb(223,77,29)" fg:x="1861" fg:w="1"/><text x="65.3427%" y="399.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="65.1277%" y="421" width="0.0350%" height="15" fill="rgb(234,94,52)" fg:x="1862" fg:w="1"/><text x="65.3777%" y="431.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="65.1277%" y="405" width="0.0350%" height="15" fill="rgb(220,154,50)" fg:x="1862" fg:w="1"/><text x="65.3777%" y="415.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="65.1277%" y="389" width="0.0350%" height="15" fill="rgb(212,11,10)" fg:x="1862" fg:w="1"/><text x="65.3777%" y="399.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="65.1277%" y="373" width="0.0350%" height="15" fill="rgb(205,166,19)" fg:x="1862" fg:w="1"/><text x="65.3777%" y="383.50"></text></g><g><title>alloc_perturb (1 samples, 0.03%)</title><rect x="66.1420%" y="149" width="0.0350%" height="15" fill="rgb(244,198,16)" fg:x="1891" fg:w="1"/><text x="66.3920%" y="159.50"></text></g><g><title>_int_malloc (14 samples, 0.49%)</title><rect x="65.7223%" y="165" width="0.4897%" height="15" fill="rgb(219,69,12)" fg:x="1879" fg:w="14"/><text x="65.9723%" y="175.50"></text></g><g><title>tcache_put (1 samples, 0.03%)</title><rect x="66.1770%" y="149" width="0.0350%" height="15" fill="rgb(245,30,7)" fg:x="1892" fg:w="1"/><text x="66.4270%" y="159.50"></text></g><g><title>checked_request2size (2 samples, 0.07%)</title><rect x="66.2120%" y="165" width="0.0700%" height="15" fill="rgb(218,221,48)" fg:x="1893" fg:w="2"/><text x="66.4620%" y="175.50"></text></g><g><title>__GI___libc_malloc (38 samples, 1.33%)</title><rect x="65.1626%" y="181" width="1.3291%" height="15" fill="rgb(216,66,15)" fg:x="1863" fg:w="38"/><text x="65.4126%" y="191.50"></text></g><g><title>tcache_get (6 samples, 0.21%)</title><rect x="66.2819%" y="165" width="0.2099%" height="15" fill="rgb(226,122,50)" fg:x="1895" fg:w="6"/><text x="66.5319%" y="175.50"></text></g><g><title>tcache_get_n (6 samples, 0.21%)</title><rect x="66.2819%" y="149" width="0.2099%" height="15" fill="rgb(239,156,16)" fg:x="1895" fg:w="6"/><text x="66.5319%" y="159.50"></text></g><g><title>__rdl_alloc (1 samples, 0.03%)</title><rect x="66.4918%" y="181" width="0.0350%" height="15" fill="rgb(224,27,38)" fg:x="1901" fg:w="1"/><text x="66.7418%" y="191.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.03%)</title><rect x="66.4918%" y="165" width="0.0350%" height="15" fill="rgb(224,39,27)" fg:x="1901" fg:w="1"/><text x="66.7418%" y="175.50"></text></g><g><title>__rust_alloc (2 samples, 0.07%)</title><rect x="66.5268%" y="181" width="0.0700%" height="15" fill="rgb(215,92,29)" fg:x="1902" fg:w="2"/><text x="66.7768%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (42 samples, 1.47%)</title><rect x="65.1626%" y="277" width="1.4690%" height="15" fill="rgb(207,159,16)" fg:x="1863" fg:w="42"/><text x="65.4126%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (42 samples, 1.47%)</title><rect x="65.1626%" y="261" width="1.4690%" height="15" fill="rgb(238,163,47)" fg:x="1863" fg:w="42"/><text x="65.4126%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (42 samples, 1.47%)</title><rect x="65.1626%" y="245" width="1.4690%" height="15" fill="rgb(219,91,49)" fg:x="1863" fg:w="42"/><text x="65.4126%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 1.47%)</title><rect x="65.1626%" y="229" width="1.4690%" height="15" fill="rgb(227,167,31)" fg:x="1863" fg:w="42"/><text x="65.4126%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 1.47%)</title><rect x="65.1626%" y="213" width="1.4690%" height="15" fill="rgb(234,80,54)" fg:x="1863" fg:w="42"/><text x="65.4126%" y="223.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 1.47%)</title><rect x="65.1626%" y="197" width="1.4690%" height="15" fill="rgb(212,114,2)" fg:x="1863" fg:w="42"/><text x="65.4126%" y="207.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="66.5967%" y="181" width="0.0350%" height="15" fill="rgb(234,50,24)" fg:x="1904" fg:w="1"/><text x="66.8467%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::convert::From&lt;&amp;str&gt;&gt;::from (45 samples, 1.57%)</title><rect x="65.1626%" y="389" width="1.5740%" height="15" fill="rgb(221,68,8)" fg:x="1863" fg:w="45"/><text x="65.4126%" y="399.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (45 samples, 1.57%)</title><rect x="65.1626%" y="373" width="1.5740%" height="15" fill="rgb(254,180,31)" fg:x="1863" fg:w="45"/><text x="65.4126%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (45 samples, 1.57%)</title><rect x="65.1626%" y="357" width="1.5740%" height="15" fill="rgb(247,130,50)" fg:x="1863" fg:w="45"/><text x="65.4126%" y="367.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (45 samples, 1.57%)</title><rect x="65.1626%" y="341" width="1.5740%" height="15" fill="rgb(211,109,4)" fg:x="1863" fg:w="45"/><text x="65.4126%" y="351.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (45 samples, 1.57%)</title><rect x="65.1626%" y="325" width="1.5740%" height="15" fill="rgb(238,50,21)" fg:x="1863" fg:w="45"/><text x="65.4126%" y="335.50"></text></g><g><title>alloc::slice::hack::to_vec (45 samples, 1.57%)</title><rect x="65.1626%" y="309" width="1.5740%" height="15" fill="rgb(225,57,45)" fg:x="1863" fg:w="45"/><text x="65.4126%" y="319.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (45 samples, 1.57%)</title><rect x="65.1626%" y="293" width="1.5740%" height="15" fill="rgb(209,196,50)" fg:x="1863" fg:w="45"/><text x="65.4126%" y="303.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.10%)</title><rect x="66.6317%" y="277" width="0.1049%" height="15" fill="rgb(242,140,13)" fg:x="1905" fg:w="3"/><text x="66.8817%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="66.6317%" y="261" width="0.1049%" height="15" fill="rgb(217,111,7)" fg:x="1905" fg:w="3"/><text x="66.8817%" y="271.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="66.6317%" y="245" width="0.1049%" height="15" fill="rgb(253,193,51)" fg:x="1905" fg:w="3"/><text x="66.8817%" y="255.50"></text></g><g><title>serde::de::Visitor::visit_borrowed_str (46 samples, 1.61%)</title><rect x="65.1626%" y="421" width="1.6090%" height="15" fill="rgb(252,70,29)" fg:x="1863" fg:w="46"/><text x="65.4126%" y="431.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_str (46 samples, 1.61%)</title><rect x="65.1626%" y="405" width="1.6090%" height="15" fill="rgb(232,127,12)" fg:x="1863" fg:w="46"/><text x="65.4126%" y="415.50"></text></g><g><title>&lt;serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_string (1 samples, 0.03%)</title><rect x="66.7366%" y="389" width="0.0350%" height="15" fill="rgb(211,180,21)" fg:x="1908" fg:w="1"/><text x="66.9866%" y="399.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_str (102 samples, 3.57%)</title><rect x="64.6030%" y="437" width="3.5677%" height="15" fill="rgb(229,72,13)" fg:x="1847" fg:w="102"/><text x="64.8530%" y="447.50">serd..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::convert_str (40 samples, 1.40%)</title><rect x="66.7716%" y="421" width="1.3991%" height="15" fill="rgb(240,211,49)" fg:x="1909" fg:w="40"/><text x="67.0216%" y="431.50"></text></g><g><title>core::str::converts::from_utf8 (36 samples, 1.26%)</title><rect x="66.9115%" y="405" width="1.2592%" height="15" fill="rgb(219,149,40)" fg:x="1913" fg:w="36"/><text x="67.1615%" y="415.50"></text></g><g><title>core::str::validations::run_utf8_validation (28 samples, 0.98%)</title><rect x="67.1913%" y="389" width="0.9794%" height="15" fill="rgb(210,127,46)" fg:x="1921" fg:w="28"/><text x="67.4413%" y="399.50"></text></g><g><title>serde::de::MapAccess::next_entry (283 samples, 9.90%)</title><rect x="58.7618%" y="533" width="9.8986%" height="15" fill="rgb(220,106,7)" fg:x="1680" fg:w="283"/><text x="59.0118%" y="543.50">serde::de::Map..</text></g><g><title>serde::de::MapAccess::next_entry_seed (283 samples, 9.90%)</title><rect x="58.7618%" y="517" width="9.8986%" height="15" fill="rgb(249,31,22)" fg:x="1680" fg:w="283"/><text x="59.0118%" y="527.50">serde::de::Map..</text></g><g><title>&lt;serde_cbor::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (116 samples, 4.06%)</title><rect x="64.6030%" y="501" width="4.0574%" height="15" fill="rgb(253,1,49)" fg:x="1847" fg:w="116"/><text x="64.8530%" y="511.50">&lt;ser..</text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (116 samples, 4.06%)</title><rect x="64.6030%" y="485" width="4.0574%" height="15" fill="rgb(227,144,33)" fg:x="1847" fg:w="116"/><text x="64.8530%" y="495.50">&lt;cor..</text></g><g><title>serde_json::value::de::&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (116 samples, 4.06%)</title><rect x="64.6030%" y="469" width="4.0574%" height="15" fill="rgb(249,163,44)" fg:x="1847" fg:w="116"/><text x="64.8530%" y="479.50">serd..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (116 samples, 4.06%)</title><rect x="64.6030%" y="453" width="4.0574%" height="15" fill="rgb(234,15,39)" fg:x="1847" fg:w="116"/><text x="64.8530%" y="463.50">&lt;&amp;mu..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (14 samples, 0.49%)</title><rect x="68.1707%" y="437" width="0.4897%" height="15" fill="rgb(207,66,16)" fg:x="1949" fg:w="14"/><text x="68.4207%" y="447.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_u8 (6 samples, 0.21%)</title><rect x="68.4505%" y="421" width="0.2099%" height="15" fill="rgb(233,112,24)" fg:x="1957" fg:w="6"/><text x="68.7005%" y="431.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::next (6 samples, 0.21%)</title><rect x="68.4505%" y="405" width="0.2099%" height="15" fill="rgb(230,90,22)" fg:x="1957" fg:w="6"/><text x="68.7005%" y="415.50"></text></g><g><title>&lt;serde_cbor::read::SliceRead as serde_cbor::read::Read&gt;::next (6 samples, 0.21%)</title><rect x="68.4505%" y="389" width="0.2099%" height="15" fill="rgb(229,61,13)" fg:x="1957" fg:w="6"/><text x="68.7005%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,Type&gt;::borrow_mut (1 samples, 0.03%)</title><rect x="69.1501%" y="485" width="0.0350%" height="15" fill="rgb(225,57,24)" fg:x="1977" fg:w="1"/><text x="69.4001%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (2 samples, 0.07%)</title><rect x="69.2550%" y="469" width="0.0700%" height="15" fill="rgb(208,169,48)" fg:x="1980" fg:w="2"/><text x="69.5050%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (2 samples, 0.07%)</title><rect x="69.2550%" y="453" width="0.0700%" height="15" fill="rgb(244,218,51)" fg:x="1980" fg:w="2"/><text x="69.5050%" y="463.50"></text></g><g><title>__memcmp_avx2_movbe (78 samples, 2.73%)</title><rect x="70.0944%" y="373" width="2.7282%" height="15" fill="rgb(214,148,10)" fg:x="2004" fg:w="78"/><text x="70.3444%" y="383.50">__..</text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (101 samples, 3.53%)</title><rect x="69.6397%" y="437" width="3.5327%" height="15" fill="rgb(225,174,27)" fg:x="1991" fg:w="101"/><text x="69.8897%" y="447.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (101 samples, 3.53%)</title><rect x="69.6397%" y="421" width="3.5327%" height="15" fill="rgb(230,96,26)" fg:x="1991" fg:w="101"/><text x="69.8897%" y="431.50">&lt;al..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (101 samples, 3.53%)</title><rect x="69.6397%" y="405" width="3.5327%" height="15" fill="rgb(232,10,30)" fg:x="1991" fg:w="101"/><text x="69.8897%" y="415.50">cor..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (101 samples, 3.53%)</title><rect x="69.6397%" y="389" width="3.5327%" height="15" fill="rgb(222,8,50)" fg:x="1991" fg:w="101"/><text x="69.8897%" y="399.50">&lt;u8..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (10 samples, 0.35%)</title><rect x="72.8227%" y="373" width="0.3498%" height="15" fill="rgb(213,81,27)" fg:x="2082" fg:w="10"/><text x="73.0727%" y="383.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1 samples, 0.03%)</title><rect x="73.2774%" y="405" width="0.0350%" height="15" fill="rgb(245,50,10)" fg:x="2095" fg:w="1"/><text x="73.5274%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="73.1724%" y="437" width="0.1749%" height="15" fill="rgb(216,100,18)" fg:x="2092" fg:w="5"/><text x="73.4224%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.17%)</title><rect x="73.1724%" y="421" width="0.1749%" height="15" fill="rgb(236,147,54)" fg:x="2092" fg:w="5"/><text x="73.4224%" y="431.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (1 samples, 0.03%)</title><rect x="73.3123%" y="405" width="0.0350%" height="15" fill="rgb(205,143,26)" fg:x="2096" fg:w="1"/><text x="73.5623%" y="415.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.03%)</title><rect x="73.3123%" y="389" width="0.0350%" height="15" fill="rgb(236,26,9)" fg:x="2096" fg:w="1"/><text x="73.5623%" y="399.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (1 samples, 0.03%)</title><rect x="73.3123%" y="373" width="0.0350%" height="15" fill="rgb(221,165,53)" fg:x="2096" fg:w="1"/><text x="73.5623%" y="383.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (125 samples, 4.37%)</title><rect x="69.0801%" y="501" width="4.3722%" height="15" fill="rgb(214,110,17)" fg:x="1975" fg:w="125"/><text x="69.3301%" y="511.50">alloc..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (122 samples, 4.27%)</title><rect x="69.1850%" y="485" width="4.2672%" height="15" fill="rgb(237,197,12)" fg:x="1978" fg:w="122"/><text x="69.4350%" y="495.50">alloc..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (118 samples, 4.13%)</title><rect x="69.3249%" y="469" width="4.1273%" height="15" fill="rgb(205,84,17)" fg:x="1982" fg:w="118"/><text x="69.5749%" y="479.50">allo..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (118 samples, 4.13%)</title><rect x="69.3249%" y="453" width="4.1273%" height="15" fill="rgb(237,18,45)" fg:x="1982" fg:w="118"/><text x="69.5749%" y="463.50">allo..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (3 samples, 0.10%)</title><rect x="73.3473%" y="437" width="0.1049%" height="15" fill="rgb(221,87,14)" fg:x="2097" fg:w="3"/><text x="73.5973%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::DormantMut,K,V,NodeType&gt;,HandleType&gt;::awaken (2 samples, 0.07%)</title><rect x="73.9419%" y="469" width="0.0700%" height="15" fill="rgb(238,186,15)" fg:x="2114" fg:w="2"/><text x="74.1919%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (2 samples, 0.07%)</title><rect x="74.0119%" y="469" width="0.0700%" height="15" fill="rgb(208,115,11)" fg:x="2116" fg:w="2"/><text x="74.2619%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.03%)</title><rect x="74.0469%" y="453" width="0.0350%" height="15" fill="rgb(254,175,0)" fg:x="2117" fg:w="1"/><text x="74.2969%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (12 samples, 0.42%)</title><rect x="74.3267%" y="453" width="0.4197%" height="15" fill="rgb(227,24,42)" fg:x="2125" fg:w="12"/><text x="74.5767%" y="463.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (10 samples, 0.35%)</title><rect x="74.3966%" y="437" width="0.3498%" height="15" fill="rgb(223,211,37)" fg:x="2127" fg:w="10"/><text x="74.6466%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (10 samples, 0.35%)</title><rect x="74.3966%" y="421" width="0.3498%" height="15" fill="rgb(235,49,27)" fg:x="2127" fg:w="10"/><text x="74.6466%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::val_area_mut (1 samples, 0.03%)</title><rect x="74.7814%" y="421" width="0.0350%" height="15" fill="rgb(254,97,51)" fg:x="2138" fg:w="1"/><text x="75.0314%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="74.7814%" y="405" width="0.0350%" height="15" fill="rgb(249,51,40)" fg:x="2138" fg:w="1"/><text x="75.0314%" y="415.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 0.03%)</title><rect x="74.7814%" y="389" width="0.0350%" height="15" fill="rgb(210,128,45)" fg:x="2138" fg:w="1"/><text x="75.0314%" y="399.50"></text></g><g><title>core::slice::index::get_offset_len_mut_noubcheck (1 samples, 0.03%)</title><rect x="74.7814%" y="373" width="0.0350%" height="15" fill="rgb(224,137,50)" fg:x="2138" fg:w="1"/><text x="75.0314%" y="383.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (1 samples, 0.03%)</title><rect x="74.7814%" y="357" width="0.0350%" height="15" fill="rgb(242,15,9)" fg:x="2138" fg:w="1"/><text x="75.0314%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (2 samples, 0.07%)</title><rect x="74.7814%" y="437" width="0.0700%" height="15" fill="rgb(233,187,41)" fg:x="2138" fg:w="2"/><text x="75.0314%" y="447.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (1 samples, 0.03%)</title><rect x="74.8164%" y="421" width="0.0350%" height="15" fill="rgb(227,2,29)" fg:x="2139" fg:w="1"/><text x="75.0664%" y="431.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.10%)</title><rect x="74.8513%" y="341" width="0.1049%" height="15" fill="rgb(222,70,3)" fg:x="2140" fg:w="3"/><text x="75.1013%" y="351.50"></text></g><g><title>tcache_get (2 samples, 0.07%)</title><rect x="74.8863%" y="325" width="0.0700%" height="15" fill="rgb(213,11,42)" fg:x="2141" fg:w="2"/><text x="75.1363%" y="335.50"></text></g><g><title>tcache_get_n (2 samples, 0.07%)</title><rect x="74.8863%" y="309" width="0.0700%" height="15" fill="rgb(225,150,9)" fg:x="2141" fg:w="2"/><text x="75.1363%" y="319.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (7 samples, 0.24%)</title><rect x="74.7464%" y="453" width="0.2448%" height="15" fill="rgb(230,162,45)" fg:x="2137" fg:w="7"/><text x="74.9964%" y="463.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (4 samples, 0.14%)</title><rect x="74.8513%" y="437" width="0.1399%" height="15" fill="rgb(222,14,52)" fg:x="2140" fg:w="4"/><text x="75.1013%" y="447.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (4 samples, 0.14%)</title><rect x="74.8513%" y="421" width="0.1399%" height="15" fill="rgb(254,198,14)" fg:x="2140" fg:w="4"/><text x="75.1013%" y="431.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (4 samples, 0.14%)</title><rect x="74.8513%" y="405" width="0.1399%" height="15" fill="rgb(220,217,30)" fg:x="2140" fg:w="4"/><text x="75.1013%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.14%)</title><rect x="74.8513%" y="389" width="0.1399%" height="15" fill="rgb(215,146,41)" fg:x="2140" fg:w="4"/><text x="75.1013%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.14%)</title><rect x="74.8513%" y="373" width="0.1399%" height="15" fill="rgb(217,27,36)" fg:x="2140" fg:w="4"/><text x="75.1013%" y="383.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.14%)</title><rect x="74.8513%" y="357" width="0.1399%" height="15" fill="rgb(219,218,39)" fg:x="2140" fg:w="4"/><text x="75.1013%" y="367.50"></text></g><g><title>core::ptr::read_volatile (1 samples, 0.03%)</title><rect x="74.9563%" y="341" width="0.0350%" height="15" fill="rgb(219,4,42)" fg:x="2143" fg:w="1"/><text x="75.2063%" y="351.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (3 samples, 0.10%)</title><rect x="74.9913%" y="453" width="0.1049%" height="15" fill="rgb(249,119,36)" fg:x="2144" fg:w="3"/><text x="75.2413%" y="463.50"></text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::de::Deserialize for mmap_payload_storage::payload::Payload&gt;::deserialize (480 samples, 16.79%)</title><rect x="58.3421%" y="709" width="16.7891%" height="15" fill="rgb(209,23,33)" fg:x="1668" fg:w="480"/><text x="58.5921%" y="719.50">mmap_payload_storage::payl..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (480 samples, 16.79%)</title><rect x="58.3421%" y="693" width="16.7891%" height="15" fill="rgb(211,10,0)" fg:x="1668" fg:w="480"/><text x="58.5921%" y="703.50">&lt;&amp;mut serde_cbor::de::Dese..</text></g><g><title>&lt;mmap_payload_storage::payload::_::&lt;impl serde::de::Deserialize for mmap_payload_storage::payload::Payload&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_newtype_struct (480 samples, 16.79%)</title><rect x="58.3421%" y="677" width="16.7891%" height="15" fill="rgb(208,99,37)" fg:x="1668" fg:w="480"/><text x="58.5921%" y="687.50">&lt;mmap_payload_storage::pay..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize (479 samples, 16.75%)</title><rect x="58.3771%" y="661" width="16.7541%" height="15" fill="rgb(213,132,31)" fg:x="1669" fg:w="479"/><text x="58.6271%" y="671.50">&lt;serde_json::map::Map&lt;allo..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (479 samples, 16.75%)</title><rect x="58.3771%" y="645" width="16.7541%" height="15" fill="rgb(243,129,40)" fg:x="1669" fg:w="479"/><text x="58.6271%" y="655.50">&lt;&amp;mut serde_cbor::de::Dese..</text></g><g><title>&lt;&amp;mut serde_cbor::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_any (479 samples, 16.75%)</title><rect x="58.3771%" y="629" width="16.7541%" height="15" fill="rgb(210,66,33)" fg:x="1669" fg:w="479"/><text x="58.6271%" y="639.50">&lt;&amp;mut serde_cbor::de::Dese..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (479 samples, 16.75%)</title><rect x="58.3771%" y="613" width="16.7541%" height="15" fill="rgb(209,189,4)" fg:x="1669" fg:w="479"/><text x="58.6271%" y="623.50">serde_cbor::de::Deserializ..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map (479 samples, 16.75%)</title><rect x="58.3771%" y="597" width="16.7541%" height="15" fill="rgb(214,107,37)" fg:x="1669" fg:w="479"/><text x="58.6271%" y="607.50">serde_cbor::de::Deserializ..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::recursion_checked (479 samples, 16.75%)</title><rect x="58.3771%" y="581" width="16.7541%" height="15" fill="rgb(245,88,54)" fg:x="1669" fg:w="479"/><text x="58.6271%" y="591.50">serde_cbor::de::Deserializ..</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_map::_{{closure}} (479 samples, 16.75%)</title><rect x="58.3771%" y="565" width="16.7541%" height="15" fill="rgb(205,146,20)" fg:x="1669" fg:w="479"/><text x="58.6271%" y="575.50">serde_cbor::de::Deserializ..</text></g><g><title>&lt;&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::de::Deserialize&gt;::deserialize::Visitor as serde::de::Visitor&gt;::visit_map (479 samples, 16.75%)</title><rect x="58.3771%" y="549" width="16.7541%" height="15" fill="rgb(220,161,25)" fg:x="1669" fg:w="479"/><text x="58.6271%" y="559.50">&lt;&lt;serde_json::map::Map&lt;all..</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (185 samples, 6.47%)</title><rect x="68.6604%" y="533" width="6.4708%" height="15" fill="rgb(215,152,15)" fg:x="1963" fg:w="185"/><text x="68.9104%" y="543.50">serde_js..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (183 samples, 6.40%)</title><rect x="68.7303%" y="517" width="6.4008%" height="15" fill="rgb(233,192,44)" fg:x="1965" fg:w="183"/><text x="68.9803%" y="527.50">alloc::c..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (48 samples, 1.68%)</title><rect x="73.4523%" y="501" width="1.6789%" height="15" fill="rgb(240,170,46)" fg:x="2100" fg:w="48"/><text x="73.7023%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (35 samples, 1.22%)</title><rect x="73.9070%" y="485" width="1.2242%" height="15" fill="rgb(207,104,33)" fg:x="2113" fg:w="35"/><text x="74.1570%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (30 samples, 1.05%)</title><rect x="74.0818%" y="469" width="1.0493%" height="15" fill="rgb(219,21,39)" fg:x="2118" fg:w="30"/><text x="74.3318%" y="479.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="75.0962%" y="453" width="0.0350%" height="15" fill="rgb(214,133,29)" fg:x="2147" fg:w="1"/><text x="75.3462%" y="463.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="75.0962%" y="437" width="0.0350%" height="15" fill="rgb(226,93,6)" fg:x="2147" fg:w="1"/><text x="75.3462%" y="447.50"></text></g><g><title>native_apic_msr_eoi (1 samples, 0.03%)</title><rect x="75.0962%" y="421" width="0.0350%" height="15" fill="rgb(252,222,34)" fg:x="2147" fg:w="1"/><text x="75.3462%" y="431.50"></text></g><g><title>mmap_payload_storage::payload::Payload::from_bytes (481 samples, 16.82%)</title><rect x="58.3421%" y="741" width="16.8241%" height="15" fill="rgb(252,92,48)" fg:x="1668" fg:w="481"/><text x="58.5921%" y="751.50">mmap_payload_storage::payl..</text></g><g><title>serde_cbor::de::from_slice (481 samples, 16.82%)</title><rect x="58.3421%" y="725" width="16.8241%" height="15" fill="rgb(245,223,24)" fg:x="1668" fg:w="481"/><text x="58.5921%" y="735.50">serde_cbor::de::from_slice</text></g><g><title>serde_cbor::de::Deserializer&lt;serde_cbor::read::SliceRead&gt;::from_slice (1 samples, 0.03%)</title><rect x="75.1312%" y="709" width="0.0350%" height="15" fill="rgb(205,176,3)" fg:x="2148" fg:w="1"/><text x="75.3812%" y="719.50"></text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::new (1 samples, 0.03%)</title><rect x="75.1312%" y="693" width="0.0350%" height="15" fill="rgb(235,151,15)" fg:x="2148" fg:w="1"/><text x="75.3812%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.10%)</title><rect x="75.1661%" y="693" width="0.1049%" height="15" fill="rgb(237,209,11)" fg:x="2149" fg:w="3"/><text x="75.4161%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.10%)</title><rect x="75.1661%" y="677" width="0.1049%" height="15" fill="rgb(243,227,24)" fg:x="2149" fg:w="3"/><text x="75.4161%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.10%)</title><rect x="75.1661%" y="661" width="0.1049%" height="15" fill="rgb(239,193,16)" fg:x="2149" fg:w="3"/><text x="75.4161%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (3 samples, 0.10%)</title><rect x="75.1661%" y="645" width="0.1049%" height="15" fill="rgb(231,27,9)" fg:x="2149" fg:w="3"/><text x="75.4161%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.10%)</title><rect x="75.1661%" y="629" width="0.1049%" height="15" fill="rgb(219,169,10)" fg:x="2149" fg:w="3"/><text x="75.4161%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.10%)</title><rect x="75.1661%" y="613" width="0.1049%" height="15" fill="rgb(244,229,43)" fg:x="2149" fg:w="3"/><text x="75.4161%" y="623.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.10%)</title><rect x="75.1661%" y="597" width="0.1049%" height="15" fill="rgb(254,38,20)" fg:x="2149" fg:w="3"/><text x="75.4161%" y="607.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.10%)</title><rect x="75.1661%" y="581" width="0.1049%" height="15" fill="rgb(250,47,30)" fg:x="2149" fg:w="3"/><text x="75.4161%" y="591.50"></text></g><g><title>tcache_get (1 samples, 0.03%)</title><rect x="75.2361%" y="565" width="0.0350%" height="15" fill="rgb(224,124,36)" fg:x="2151" fg:w="1"/><text x="75.4861%" y="575.50"></text></g><g><title>tcache_get_n (1 samples, 0.03%)</title><rect x="75.2361%" y="549" width="0.0350%" height="15" fill="rgb(246,68,51)" fg:x="2151" fg:w="1"/><text x="75.4861%" y="559.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.03%)</title><rect x="75.5859%" y="677" width="0.0350%" height="15" fill="rgb(253,43,49)" fg:x="2161" fg:w="1"/><text x="75.8359%" y="687.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.03%)</title><rect x="75.5859%" y="661" width="0.0350%" height="15" fill="rgb(219,54,36)" fg:x="2161" fg:w="1"/><text x="75.8359%" y="671.50"></text></g><g><title>core::intrinsics::copy (4 samples, 0.14%)</title><rect x="75.6208%" y="677" width="0.1399%" height="15" fill="rgb(227,133,34)" fg:x="2162" fg:w="4"/><text x="75.8708%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.21%)</title><rect x="75.7608%" y="677" width="0.2099%" height="15" fill="rgb(247,227,15)" fg:x="2166" fg:w="6"/><text x="76.0108%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset_from (1 samples, 0.03%)</title><rect x="75.9706%" y="677" width="0.0350%" height="15" fill="rgb(229,96,14)" fg:x="2172" fg:w="1"/><text x="76.2206%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset_from (1 samples, 0.03%)</title><rect x="75.9706%" y="661" width="0.0350%" height="15" fill="rgb(220,79,17)" fg:x="2172" fg:w="1"/><text x="76.2206%" y="671.50"></text></g><g><title>lz4_flex::block::decompress::duplicate_overlapping (4 samples, 0.14%)</title><rect x="76.0056%" y="661" width="0.1399%" height="15" fill="rgb(205,131,53)" fg:x="2173" fg:w="4"/><text x="76.2556%" y="671.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.10%)</title><rect x="76.0406%" y="645" width="0.1049%" height="15" fill="rgb(209,50,29)" fg:x="2174" fg:w="3"/><text x="76.2906%" y="655.50"></text></g><g><title>lz4_flex::block::decompress::duplicate (5 samples, 0.17%)</title><rect x="76.0056%" y="677" width="0.1749%" height="15" fill="rgb(245,86,46)" fg:x="2173" fg:w="5"/><text x="76.2556%" y="687.50"></text></g><g><title>lz4_flex::block::decompress::wild_copy_from_src_16 (1 samples, 0.03%)</title><rect x="76.1455%" y="661" width="0.0350%" height="15" fill="rgb(235,66,46)" fg:x="2177" fg:w="1"/><text x="76.3955%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="76.1455%" y="645" width="0.0350%" height="15" fill="rgb(232,148,31)" fg:x="2177" fg:w="1"/><text x="76.3955%" y="655.50"></text></g><g><title>lz4_flex::block::decompress::read_integer_ptr (2 samples, 0.07%)</title><rect x="76.1805%" y="677" width="0.0700%" height="15" fill="rgb(217,149,8)" fg:x="2178" fg:w="2"/><text x="76.4305%" y="687.50"></text></g><g><title>lz4_flex::block::decompress::read_u16_ptr (2 samples, 0.07%)</title><rect x="76.2504%" y="677" width="0.0700%" height="15" fill="rgb(209,183,11)" fg:x="2180" fg:w="2"/><text x="76.5004%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="76.2504%" y="661" width="0.0700%" height="15" fill="rgb(208,55,20)" fg:x="2180" fg:w="2"/><text x="76.5004%" y="671.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::double_copy_trick (2 samples, 0.07%)</title><rect x="76.3204%" y="661" width="0.0700%" height="15" fill="rgb(218,39,14)" fg:x="2182" fg:w="2"/><text x="76.5704%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.07%)</title><rect x="76.3204%" y="645" width="0.0700%" height="15" fill="rgb(216,169,33)" fg:x="2182" fg:w="2"/><text x="76.5704%" y="655.50"></text></g><g><title>lz4_flex::block::decompress::decompress (36 samples, 1.26%)</title><rect x="75.1661%" y="709" width="1.2592%" height="15" fill="rgb(233,80,24)" fg:x="2149" fg:w="36"/><text x="75.4161%" y="719.50"></text></g><g><title>lz4_flex::block::decompress::decompress_internal (33 samples, 1.15%)</title><rect x="75.2711%" y="693" width="1.1542%" height="15" fill="rgb(213,179,31)" fg:x="2152" fg:w="33"/><text x="75.5211%" y="703.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::slice_copy (3 samples, 0.10%)</title><rect x="76.3204%" y="677" width="0.1049%" height="15" fill="rgb(209,19,5)" fg:x="2182" fg:w="3"/><text x="76.5704%" y="687.50"></text></g><g><title>lz4_flex::fastcpy_unsafe::wild_copy_from_src (1 samples, 0.03%)</title><rect x="76.3903%" y="661" width="0.0350%" height="15" fill="rgb(219,18,35)" fg:x="2184" fg:w="1"/><text x="76.6403%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="76.3903%" y="645" width="0.0350%" height="15" fill="rgb(209,169,16)" fg:x="2184" fg:w="1"/><text x="76.6403%" y="655.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::decompress (39 samples, 1.36%)</title><rect x="75.1661%" y="741" width="1.3641%" height="15" fill="rgb(245,90,51)" fg:x="2149" fg:w="39"/><text x="75.4161%" y="751.50"></text></g><g><title>lz4_flex::block::decompress::decompress_size_prepended (39 samples, 1.36%)</title><rect x="75.1661%" y="725" width="1.3641%" height="15" fill="rgb(220,99,45)" fg:x="2149" fg:w="39"/><text x="75.4161%" y="735.50"></text></g><g><title>lz4_flex::block::uncompressed_size (3 samples, 0.10%)</title><rect x="76.4253%" y="709" width="0.1049%" height="15" fill="rgb(249,89,25)" fg:x="2185" fg:w="3"/><text x="76.6753%" y="719.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u64&gt;::clone (1 samples, 0.03%)</title><rect x="76.5303%" y="677" width="0.0350%" height="15" fill="rgb(239,193,0)" fg:x="2188" fg:w="1"/><text x="76.7803%" y="687.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::get_value (3 samples, 0.10%)</title><rect x="76.5303%" y="741" width="0.1049%" height="15" fill="rgb(231,126,1)" fg:x="2188" fg:w="3"/><text x="76.7803%" y="751.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::get_slot (3 samples, 0.10%)</title><rect x="76.5303%" y="725" width="0.1049%" height="15" fill="rgb(243,166,3)" fg:x="2188" fg:w="3"/><text x="76.7803%" y="735.50"></text></g><g><title>core::option::Option&lt;&amp;T&gt;::cloned (3 samples, 0.10%)</title><rect x="76.5303%" y="709" width="0.1049%" height="15" fill="rgb(223,22,34)" fg:x="2188" fg:w="3"/><text x="76.7803%" y="719.50"></text></g><g><title>&lt;mmap_payload_storage::slotted_page::SlotHeader as core::clone::Clone&gt;::clone (3 samples, 0.10%)</title><rect x="76.5303%" y="693" width="0.1049%" height="15" fill="rgb(251,52,51)" fg:x="2188" fg:w="3"/><text x="76.7803%" y="703.50"></text></g><g><title>core::clone::impls::&lt;impl core::clone::Clone for u8&gt;::clone (2 samples, 0.07%)</title><rect x="76.5652%" y="677" width="0.0700%" height="15" fill="rgb(221,165,28)" fg:x="2189" fg:w="2"/><text x="76.8152%" y="687.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_payload (525 samples, 18.36%)</title><rect x="58.3071%" y="757" width="18.3631%" height="15" fill="rgb(218,121,47)" fg:x="1667" fg:w="525"/><text x="58.5571%" y="767.50">mmap_payload_storage::payload..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.03%)</title><rect x="76.6352%" y="741" width="0.0350%" height="15" fill="rgb(209,120,9)" fg:x="2191" fg:w="1"/><text x="76.8852%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (1 samples, 0.03%)</title><rect x="76.6352%" y="725" width="0.0350%" height="15" fill="rgb(236,68,12)" fg:x="2191" fg:w="1"/><text x="76.8852%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (1 samples, 0.03%)</title><rect x="76.6352%" y="709" width="0.0350%" height="15" fill="rgb(225,194,26)" fg:x="2191" fg:w="1"/><text x="76.8852%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (1 samples, 0.03%)</title><rect x="76.6352%" y="693" width="0.0350%" height="15" fill="rgb(231,84,39)" fg:x="2191" fg:w="1"/><text x="76.8852%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.03%)</title><rect x="76.6352%" y="677" width="0.0350%" height="15" fill="rgb(210,11,45)" fg:x="2191" fg:w="1"/><text x="76.8852%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::find_inner (1 samples, 0.03%)</title><rect x="76.6352%" y="661" width="0.0350%" height="15" fill="rgb(224,54,52)" fg:x="2191" fg:w="1"/><text x="76.8852%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="76.7051%" y="741" width="0.0350%" height="15" fill="rgb(238,102,14)" fg:x="2193" fg:w="1"/><text x="76.9551%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.03%)</title><rect x="76.7051%" y="725" width="0.0350%" height="15" fill="rgb(243,160,52)" fg:x="2193" fg:w="1"/><text x="76.9551%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.03%)</title><rect x="76.7051%" y="709" width="0.0350%" height="15" fill="rgb(216,114,19)" fg:x="2193" fg:w="1"/><text x="76.9551%" y="719.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="76.7751%" y="645" width="0.0350%" height="15" fill="rgb(244,166,37)" fg:x="2195" fg:w="1"/><text x="77.0251%" y="655.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.03%)</title><rect x="76.8101%" y="645" width="0.0350%" height="15" fill="rgb(246,29,44)" fg:x="2196" fg:w="1"/><text x="77.0601%" y="655.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.03%)</title><rect x="76.8451%" y="629" width="0.0350%" height="15" fill="rgb(215,56,53)" fg:x="2197" fg:w="1"/><text x="77.0951%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.17%)</title><rect x="76.7401%" y="741" width="0.1749%" height="15" fill="rgb(217,60,2)" fg:x="2194" fg:w="5"/><text x="76.9901%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.17%)</title><rect x="76.7401%" y="725" width="0.1749%" height="15" fill="rgb(207,26,24)" fg:x="2194" fg:w="5"/><text x="76.9901%" y="735.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.17%)</title><rect x="76.7401%" y="709" width="0.1749%" height="15" fill="rgb(252,210,15)" fg:x="2194" fg:w="5"/><text x="76.9901%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.17%)</title><rect x="76.7401%" y="693" width="0.1749%" height="15" fill="rgb(253,209,26)" fg:x="2194" fg:w="5"/><text x="76.9901%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.17%)</title><rect x="76.7401%" y="677" width="0.1749%" height="15" fill="rgb(238,170,14)" fg:x="2194" fg:w="5"/><text x="76.9901%" y="687.50"></text></g><g><title>__GI___libc_free (5 samples, 0.17%)</title><rect x="76.7401%" y="661" width="0.1749%" height="15" fill="rgb(216,178,15)" fg:x="2194" fg:w="5"/><text x="76.9901%" y="671.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.07%)</title><rect x="76.8451%" y="645" width="0.0700%" height="15" fill="rgb(250,197,2)" fg:x="2197" fg:w="2"/><text x="77.0951%" y="655.50"></text></g><g><title>free_perturb (1 samples, 0.03%)</title><rect x="76.8800%" y="629" width="0.0350%" height="15" fill="rgb(212,70,42)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="639.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="76.8800%" y="613" width="0.0350%" height="15" fill="rgb(227,213,9)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="623.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="76.8800%" y="597" width="0.0350%" height="15" fill="rgb(245,99,25)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="607.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="76.8800%" y="581" width="0.0350%" height="15" fill="rgb(250,82,29)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="591.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="76.8800%" y="565" width="0.0350%" height="15" fill="rgb(241,226,54)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="575.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="76.8800%" y="549" width="0.0350%" height="15" fill="rgb(221,99,41)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="559.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="76.8800%" y="533" width="0.0350%" height="15" fill="rgb(213,90,21)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="543.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="76.8800%" y="517" width="0.0350%" height="15" fill="rgb(205,208,24)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="527.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="76.8800%" y="501" width="0.0350%" height="15" fill="rgb(246,31,12)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="511.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="76.8800%" y="485" width="0.0350%" height="15" fill="rgb(213,154,6)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="495.50"></text></g><g><title>task_tick_fair (1 samples, 0.03%)</title><rect x="76.8800%" y="469" width="0.0350%" height="15" fill="rgb(222,163,29)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="479.50"></text></g><g><title>update_curr (1 samples, 0.03%)</title><rect x="76.8800%" y="453" width="0.0350%" height="15" fill="rgb(227,201,8)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="463.50"></text></g><g><title>update_curr_se (1 samples, 0.03%)</title><rect x="76.8800%" y="437" width="0.0350%" height="15" fill="rgb(233,9,32)" fg:x="2198" fg:w="1"/><text x="77.1300%" y="447.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="76.9150%" y="725" width="0.0350%" height="15" fill="rgb(217,54,24)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="735.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="76.9150%" y="709" width="0.0350%" height="15" fill="rgb(235,192,0)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="719.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="76.9150%" y="693" width="0.0350%" height="15" fill="rgb(235,45,9)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="703.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="76.9150%" y="677" width="0.0350%" height="15" fill="rgb(246,42,40)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="687.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="76.9150%" y="661" width="0.0350%" height="15" fill="rgb(248,111,24)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="671.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="76.9150%" y="645" width="0.0350%" height="15" fill="rgb(249,65,22)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="655.50"></text></g><g><title>do_anonymous_page (1 samples, 0.03%)</title><rect x="76.9150%" y="629" width="0.0350%" height="15" fill="rgb(238,111,51)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="639.50"></text></g><g><title>alloc_anon_folio (1 samples, 0.03%)</title><rect x="76.9150%" y="613" width="0.0350%" height="15" fill="rgb(250,118,22)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="623.50"></text></g><g><title>get_vma_policy (1 samples, 0.03%)</title><rect x="76.9150%" y="597" width="0.0350%" height="15" fill="rgb(234,84,26)" fg:x="2199" fg:w="1"/><text x="77.1650%" y="607.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1 samples, 0.03%)</title><rect x="76.9500%" y="709" width="0.0350%" height="15" fill="rgb(243,172,12)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="76.9500%" y="693" width="0.0350%" height="15" fill="rgb(236,150,49)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="703.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="76.9500%" y="677" width="0.0350%" height="15" fill="rgb(225,197,26)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="687.50"></text></g><g><title>exc_page_fault (1 samples, 0.03%)</title><rect x="76.9500%" y="661" width="0.0350%" height="15" fill="rgb(214,17,42)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="671.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="76.9500%" y="645" width="0.0350%" height="15" fill="rgb(224,165,40)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="655.50"></text></g><g><title>handle_mm_fault (1 samples, 0.03%)</title><rect x="76.9500%" y="629" width="0.0350%" height="15" fill="rgb(246,100,4)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="639.50"></text></g><g><title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="76.9500%" y="613" width="0.0350%" height="15" fill="rgb(222,103,0)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="623.50"></text></g><g><title>handle_pte_fault (1 samples, 0.03%)</title><rect x="76.9500%" y="597" width="0.0350%" height="15" fill="rgb(227,189,26)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="607.50"></text></g><g><title>do_fault (1 samples, 0.03%)</title><rect x="76.9500%" y="581" width="0.0350%" height="15" fill="rgb(214,202,17)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="591.50"></text></g><g><title>fault_dirty_shared_page (1 samples, 0.03%)</title><rect x="76.9500%" y="565" width="0.0350%" height="15" fill="rgb(229,111,3)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="575.50"></text></g><g><title>balance_dirty_pages_ratelimited (1 samples, 0.03%)</title><rect x="76.9500%" y="549" width="0.0350%" height="15" fill="rgb(229,172,15)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="559.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (1 samples, 0.03%)</title><rect x="76.9500%" y="533" width="0.0350%" height="15" fill="rgb(230,224,35)" fg:x="2200" fg:w="1"/><text x="77.2000%" y="543.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::set (3 samples, 0.10%)</title><rect x="76.9150%" y="741" width="0.1049%" height="15" fill="rgb(251,141,6)" fg:x="2199" fg:w="3"/><text x="77.1650%" y="751.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::persist_pointer (2 samples, 0.07%)</title><rect x="76.9500%" y="725" width="0.0700%" height="15" fill="rgb(225,208,6)" fg:x="2200" fg:w="2"/><text x="77.2000%" y="735.50"></text></g><g><title>memmap2::MmapMut::flush (1 samples, 0.03%)</title><rect x="76.9850%" y="709" width="0.0350%" height="15" fill="rgb(246,181,16)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="719.50"></text></g><g><title>memmap2::os::MmapInner::flush (1 samples, 0.03%)</title><rect x="76.9850%" y="693" width="0.0350%" height="15" fill="rgb(227,129,36)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="703.50"></text></g><g><title>msync (1 samples, 0.03%)</title><rect x="76.9850%" y="677" width="0.0350%" height="15" fill="rgb(248,117,24)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="76.9850%" y="661" width="0.0350%" height="15" fill="rgb(214,185,35)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="671.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="76.9850%" y="645" width="0.0350%" height="15" fill="rgb(236,150,34)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="655.50"></text></g><g><title>x64_sys_call (1 samples, 0.03%)</title><rect x="76.9850%" y="629" width="0.0350%" height="15" fill="rgb(243,228,27)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="639.50"></text></g><g><title>__x64_sys_msync (1 samples, 0.03%)</title><rect x="76.9850%" y="613" width="0.0350%" height="15" fill="rgb(245,77,44)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="623.50"></text></g><g><title>__do_sys_msync (1 samples, 0.03%)</title><rect x="76.9850%" y="597" width="0.0350%" height="15" fill="rgb(235,214,42)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="607.50"></text></g><g><title>vfs_fsync_range (1 samples, 0.03%)</title><rect x="76.9850%" y="581" width="0.0350%" height="15" fill="rgb(221,74,3)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="591.50"></text></g><g><title>ext4_sync_file (1 samples, 0.03%)</title><rect x="76.9850%" y="565" width="0.0350%" height="15" fill="rgb(206,121,29)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="575.50"></text></g><g><title>file_write_and_wait_range (1 samples, 0.03%)</title><rect x="76.9850%" y="549" width="0.0350%" height="15" fill="rgb(249,131,53)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="559.50"></text></g><g><title>__filemap_fdatawrite_range (1 samples, 0.03%)</title><rect x="76.9850%" y="533" width="0.0350%" height="15" fill="rgb(236,170,29)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="543.50"></text></g><g><title>filemap_fdatawrite_wbc (1 samples, 0.03%)</title><rect x="76.9850%" y="517" width="0.0350%" height="15" fill="rgb(247,96,15)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="527.50"></text></g><g><title>do_writepages (1 samples, 0.03%)</title><rect x="76.9850%" y="501" width="0.0350%" height="15" fill="rgb(211,210,7)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="511.50"></text></g><g><title>ext4_writepages (1 samples, 0.03%)</title><rect x="76.9850%" y="485" width="0.0350%" height="15" fill="rgb(240,88,50)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="495.50"></text></g><g><title>ext4_do_writepages (1 samples, 0.03%)</title><rect x="76.9850%" y="469" width="0.0350%" height="15" fill="rgb(209,229,26)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="479.50"></text></g><g><title>mpage_map_and_submit_extent (1 samples, 0.03%)</title><rect x="76.9850%" y="453" width="0.0350%" height="15" fill="rgb(210,68,23)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="463.50"></text></g><g><title>mpage_map_and_submit_buffers (1 samples, 0.03%)</title><rect x="76.9850%" y="437" width="0.0350%" height="15" fill="rgb(229,180,13)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="447.50"></text></g><g><title>mpage_submit_folio (1 samples, 0.03%)</title><rect x="76.9850%" y="421" width="0.0350%" height="15" fill="rgb(236,53,44)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="431.50"></text></g><g><title>folio_clear_dirty_for_io (1 samples, 0.03%)</title><rect x="76.9850%" y="405" width="0.0350%" height="15" fill="rgb(244,214,29)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="415.50"></text></g><g><title>folio_mkclean (1 samples, 0.03%)</title><rect x="76.9850%" y="389" width="0.0350%" height="15" fill="rgb(220,75,29)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="399.50"></text></g><g><title>vma_interval_tree_iter_first (1 samples, 0.03%)</title><rect x="76.9850%" y="373" width="0.0350%" height="15" fill="rgb(214,183,37)" fg:x="2201" fg:w="1"/><text x="77.2350%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="77.2298%" y="485" width="0.0350%" height="15" fill="rgb(239,117,29)" fg:x="2208" fg:w="1"/><text x="77.4798%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_map (5 samples, 0.17%)</title><rect x="77.1948%" y="661" width="0.1749%" height="15" fill="rgb(237,171,35)" fg:x="2207" fg:w="5"/><text x="77.4448%" y="671.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::serialize_collection (5 samples, 0.17%)</title><rect x="77.1948%" y="645" width="0.1749%" height="15" fill="rgb(229,178,53)" fg:x="2207" fg:w="5"/><text x="77.4448%" y="655.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (5 samples, 0.17%)</title><rect x="77.1948%" y="629" width="0.1749%" height="15" fill="rgb(210,102,19)" fg:x="2207" fg:w="5"/><text x="77.4448%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (5 samples, 0.17%)</title><rect x="77.1948%" y="613" width="0.1749%" height="15" fill="rgb(235,127,22)" fg:x="2207" fg:w="5"/><text x="77.4448%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.14%)</title><rect x="77.2298%" y="597" width="0.1399%" height="15" fill="rgb(244,31,31)" fg:x="2208" fg:w="4"/><text x="77.4798%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.14%)</title><rect x="77.2298%" y="581" width="0.1399%" height="15" fill="rgb(231,43,21)" fg:x="2208" fg:w="4"/><text x="77.4798%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.14%)</title><rect x="77.2298%" y="565" width="0.1399%" height="15" fill="rgb(217,131,35)" fg:x="2208" fg:w="4"/><text x="77.4798%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.14%)</title><rect x="77.2298%" y="549" width="0.1399%" height="15" fill="rgb(221,149,4)" fg:x="2208" fg:w="4"/><text x="77.4798%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.14%)</title><rect x="77.2298%" y="533" width="0.1399%" height="15" fill="rgb(232,170,28)" fg:x="2208" fg:w="4"/><text x="77.4798%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.14%)</title><rect x="77.2298%" y="517" width="0.1399%" height="15" fill="rgb(238,56,10)" fg:x="2208" fg:w="4"/><text x="77.4798%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.14%)</title><rect x="77.2298%" y="501" width="0.1399%" height="15" fill="rgb(235,196,14)" fg:x="2208" fg:w="4"/><text x="77.4798%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.10%)</title><rect x="77.2648%" y="485" width="0.1049%" height="15" fill="rgb(216,45,48)" fg:x="2209" fg:w="3"/><text x="77.5148%" y="495.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.10%)</title><rect x="77.2648%" y="469" width="0.1049%" height="15" fill="rgb(238,213,17)" fg:x="2209" fg:w="3"/><text x="77.5148%" y="479.50"></text></g><g><title>_int_malloc (3 samples, 0.10%)</title><rect x="77.2648%" y="453" width="0.1049%" height="15" fill="rgb(212,13,2)" fg:x="2209" fg:w="3"/><text x="77.5148%" y="463.50"></text></g><g><title>unlink_chunk (1 samples, 0.03%)</title><rect x="77.3347%" y="437" width="0.0350%" height="15" fill="rgb(240,114,20)" fg:x="2211" fg:w="1"/><text x="77.5847%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (2 samples, 0.07%)</title><rect x="77.4397%" y="565" width="0.0700%" height="15" fill="rgb(228,41,40)" fg:x="2214" fg:w="2"/><text x="77.6897%" y="575.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.03%)</title><rect x="77.4746%" y="549" width="0.0350%" height="15" fill="rgb(244,132,35)" fg:x="2215" fg:w="1"/><text x="77.7246%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (2 samples, 0.07%)</title><rect x="77.5096%" y="565" width="0.0700%" height="15" fill="rgb(253,189,4)" fg:x="2216" fg:w="2"/><text x="77.7596%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.07%)</title><rect x="77.5096%" y="549" width="0.0700%" height="15" fill="rgb(224,37,19)" fg:x="2216" fg:w="2"/><text x="77.7596%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (5 samples, 0.17%)</title><rect x="77.4397%" y="613" width="0.1749%" height="15" fill="rgb(235,223,18)" fg:x="2214" fg:w="5"/><text x="77.6897%" y="623.50"></text></g><g><title>alloc::collections::btree::mem::replace (5 samples, 0.17%)</title><rect x="77.4397%" y="597" width="0.1749%" height="15" fill="rgb(235,163,25)" fg:x="2214" fg:w="5"/><text x="77.6897%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (5 samples, 0.17%)</title><rect x="77.4397%" y="581" width="0.1749%" height="15" fill="rgb(217,145,28)" fg:x="2214" fg:w="5"/><text x="77.6897%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (1 samples, 0.03%)</title><rect x="77.5796%" y="565" width="0.0350%" height="15" fill="rgb(223,223,32)" fg:x="2218" fg:w="1"/><text x="77.8296%" y="575.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="77.5796%" y="549" width="0.0350%" height="15" fill="rgb(227,189,39)" fg:x="2218" fg:w="1"/><text x="77.8296%" y="559.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="77.5796%" y="533" width="0.0350%" height="15" fill="rgb(248,10,22)" fg:x="2218" fg:w="1"/><text x="77.8296%" y="543.50"></text></g><g><title>core::slice::index::get_noubcheck (1 samples, 0.03%)</title><rect x="77.5796%" y="517" width="0.0350%" height="15" fill="rgb(248,46,39)" fg:x="2218" fg:w="1"/><text x="77.8296%" y="527.50"></text></g><g><title>&lt;serde_json::map::Iter as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.28%)</title><rect x="77.3697%" y="661" width="0.2798%" height="15" fill="rgb(248,113,48)" fg:x="2212" fg:w="8"/><text x="77.6197%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.28%)</title><rect x="77.3697%" y="645" width="0.2798%" height="15" fill="rgb(245,16,25)" fg:x="2212" fg:w="8"/><text x="77.6197%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (6 samples, 0.21%)</title><rect x="77.4397%" y="629" width="0.2099%" height="15" fill="rgb(249,152,16)" fg:x="2214" fg:w="6"/><text x="77.6897%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (1 samples, 0.03%)</title><rect x="77.6146%" y="613" width="0.0350%" height="15" fill="rgb(250,16,1)" fg:x="2219" fg:w="1"/><text x="77.8646%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="77.7545%" y="485" width="0.0350%" height="15" fill="rgb(249,138,3)" fg:x="2223" fg:w="1"/><text x="78.0045%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.03%)</title><rect x="77.7545%" y="469" width="0.0350%" height="15" fill="rgb(227,71,41)" fg:x="2223" fg:w="1"/><text x="78.0045%" y="479.50"></text></g><g><title>__GI_memcpy (1 samples, 0.03%)</title><rect x="78.1392%" y="357" width="0.0350%" height="15" fill="rgb(209,184,23)" fg:x="2234" fg:w="1"/><text x="78.3892%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="78.1392%" y="341" width="0.0350%" height="15" fill="rgb(223,215,31)" fg:x="2234" fg:w="1"/><text x="78.3892%" y="351.50"></text></g><g><title>_int_free (4 samples, 0.14%)</title><rect x="78.1742%" y="357" width="0.1399%" height="15" fill="rgb(210,146,28)" fg:x="2235" fg:w="4"/><text x="78.4242%" y="367.50"></text></g><g><title>get_max_fast (1 samples, 0.03%)</title><rect x="78.2791%" y="341" width="0.0350%" height="15" fill="rgb(209,183,41)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="351.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="78.2791%" y="325" width="0.0350%" height="15" fill="rgb(209,224,45)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="335.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="78.2791%" y="309" width="0.0350%" height="15" fill="rgb(224,209,51)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="319.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="78.2791%" y="293" width="0.0350%" height="15" fill="rgb(223,17,39)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="303.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="78.2791%" y="277" width="0.0350%" height="15" fill="rgb(234,204,37)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="287.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="78.2791%" y="261" width="0.0350%" height="15" fill="rgb(236,120,5)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="271.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="78.2791%" y="245" width="0.0350%" height="15" fill="rgb(248,97,27)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="255.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="78.2791%" y="229" width="0.0350%" height="15" fill="rgb(240,66,17)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="239.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="78.2791%" y="213" width="0.0350%" height="15" fill="rgb(210,79,3)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="223.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="78.2791%" y="197" width="0.0350%" height="15" fill="rgb(214,176,27)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="207.50"></text></g><g><title>arch_scale_freq_tick (1 samples, 0.03%)</title><rect x="78.2791%" y="181" width="0.0350%" height="15" fill="rgb(235,185,3)" fg:x="2238" fg:w="1"/><text x="78.5291%" y="191.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.10%)</title><rect x="78.3141%" y="357" width="0.1049%" height="15" fill="rgb(227,24,12)" fg:x="2239" fg:w="3"/><text x="78.5641%" y="367.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.03%)</title><rect x="78.4190%" y="357" width="0.0350%" height="15" fill="rgb(252,169,48)" fg:x="2242" fg:w="1"/><text x="78.6690%" y="367.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.17%)</title><rect x="78.7338%" y="213" width="0.1749%" height="15" fill="rgb(212,65,1)" fg:x="2251" fg:w="5"/><text x="78.9838%" y="223.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.17%)</title><rect x="78.7338%" y="197" width="0.1749%" height="15" fill="rgb(242,39,24)" fg:x="2251" fg:w="5"/><text x="78.9838%" y="207.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.17%)</title><rect x="78.7338%" y="181" width="0.1749%" height="15" fill="rgb(249,32,23)" fg:x="2251" fg:w="5"/><text x="78.9838%" y="191.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.17%)</title><rect x="78.7338%" y="165" width="0.1749%" height="15" fill="rgb(251,195,23)" fg:x="2251" fg:w="5"/><text x="78.9838%" y="175.50"></text></g><g><title>native_write_msr (5 samples, 0.17%)</title><rect x="78.7338%" y="149" width="0.1749%" height="15" fill="rgb(236,174,8)" fg:x="2251" fg:w="5"/><text x="78.9838%" y="159.50"></text></g><g><title>checked_request2size (6 samples, 0.21%)</title><rect x="78.7338%" y="341" width="0.2099%" height="15" fill="rgb(220,197,8)" fg:x="2251" fg:w="6"/><text x="78.9838%" y="351.50"></text></g><g><title>asm_sysvec_reschedule_ipi (6 samples, 0.21%)</title><rect x="78.7338%" y="325" width="0.2099%" height="15" fill="rgb(240,108,37)" fg:x="2251" fg:w="6"/><text x="78.9838%" y="335.50"></text></g><g><title>sysvec_reschedule_ipi (6 samples, 0.21%)</title><rect x="78.7338%" y="309" width="0.2099%" height="15" fill="rgb(232,176,24)" fg:x="2251" fg:w="6"/><text x="78.9838%" y="319.50"></text></g><g><title>irqentry_exit (6 samples, 0.21%)</title><rect x="78.7338%" y="293" width="0.2099%" height="15" fill="rgb(243,35,29)" fg:x="2251" fg:w="6"/><text x="78.9838%" y="303.50"></text></g><g><title>irqentry_exit_to_user_mode (6 samples, 0.21%)</title><rect x="78.7338%" y="277" width="0.2099%" height="15" fill="rgb(210,37,18)" fg:x="2251" fg:w="6"/><text x="78.9838%" y="287.50"></text></g><g><title>schedule (6 samples, 0.21%)</title><rect x="78.7338%" y="261" width="0.2099%" height="15" fill="rgb(224,184,40)" fg:x="2251" fg:w="6"/><text x="78.9838%" y="271.50"></text></g><g><title>__schedule (6 samples, 0.21%)</title><rect x="78.7338%" y="245" width="0.2099%" height="15" fill="rgb(236,39,29)" fg:x="2251" fg:w="6"/><text x="78.9838%" y="255.50"></text></g><g><title>finish_task_switch.isra.0 (6 samples, 0.21%)</title><rect x="78.7338%" y="229" width="0.2099%" height="15" fill="rgb(232,48,39)" fg:x="2251" fg:w="6"/><text x="78.9838%" y="239.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="78.9087%" y="213" width="0.0350%" height="15" fill="rgb(236,34,42)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="223.50"></text></g><g><title>common_interrupt (1 samples, 0.03%)</title><rect x="78.9087%" y="197" width="0.0350%" height="15" fill="rgb(243,106,37)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="207.50"></text></g><g><title>__common_interrupt (1 samples, 0.03%)</title><rect x="78.9087%" y="181" width="0.0350%" height="15" fill="rgb(218,96,6)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="191.50"></text></g><g><title>handle_edge_irq (1 samples, 0.03%)</title><rect x="78.9087%" y="165" width="0.0350%" height="15" fill="rgb(235,130,12)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="175.50"></text></g><g><title>handle_irq_event (1 samples, 0.03%)</title><rect x="78.9087%" y="149" width="0.0350%" height="15" fill="rgb(231,95,0)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="159.50"></text></g><g><title>__handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="78.9087%" y="133" width="0.0350%" height="15" fill="rgb(228,12,23)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="143.50"></text></g><g><title>nvme_irq (1 samples, 0.03%)</title><rect x="78.9087%" y="117" width="0.0350%" height="15" fill="rgb(216,12,1)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="127.50"></text></g><g><title>nvme_pci_complete_batch (1 samples, 0.03%)</title><rect x="78.9087%" y="101" width="0.0350%" height="15" fill="rgb(219,59,3)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="111.50"></text></g><g><title>blk_mq_end_request_batch (1 samples, 0.03%)</title><rect x="78.9087%" y="85" width="0.0350%" height="15" fill="rgb(215,208,46)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="95.50"></text></g><g><title>bio_endio (1 samples, 0.03%)</title><rect x="78.9087%" y="69" width="0.0350%" height="15" fill="rgb(254,224,29)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="79.50"></text></g><g><title>bio_uninit (1 samples, 0.03%)</title><rect x="78.9087%" y="53" width="0.0350%" height="15" fill="rgb(232,14,29)" fg:x="2256" fg:w="1"/><text x="79.1587%" y="63.50"></text></g><g><title>malloc_consolidate (4 samples, 0.14%)</title><rect x="78.9437%" y="341" width="0.1399%" height="15" fill="rgb(208,45,52)" fg:x="2257" fg:w="4"/><text x="79.1937%" y="351.50"></text></g><g><title>_int_realloc (36 samples, 1.26%)</title><rect x="77.8594%" y="373" width="1.2592%" height="15" fill="rgb(234,191,28)" fg:x="2226" fg:w="36"/><text x="78.1094%" y="383.50"></text></g><g><title>_int_malloc (19 samples, 0.66%)</title><rect x="78.4540%" y="357" width="0.6646%" height="15" fill="rgb(244,67,43)" fg:x="2243" fg:w="19"/><text x="78.7040%" y="367.50"></text></g><g><title>unlink_chunk (1 samples, 0.03%)</title><rect x="79.0836%" y="341" width="0.0350%" height="15" fill="rgb(236,189,24)" fg:x="2261" fg:w="1"/><text x="79.3336%" y="351.50"></text></g><g><title>arena_for_chunk (2 samples, 0.07%)</title><rect x="79.1186%" y="373" width="0.0700%" height="15" fill="rgb(239,214,33)" fg:x="2262" fg:w="2"/><text x="79.3686%" y="383.50"></text></g><g><title>__GI___libc_realloc (41 samples, 1.43%)</title><rect x="77.7894%" y="389" width="1.4341%" height="15" fill="rgb(226,176,41)" fg:x="2224" fg:w="41"/><text x="78.0394%" y="399.50"></text></g><g><title>musable (1 samples, 0.03%)</title><rect x="79.1885%" y="373" width="0.0350%" height="15" fill="rgb(248,47,8)" fg:x="2264" fg:w="1"/><text x="79.4385%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (44 samples, 1.54%)</title><rect x="77.7894%" y="437" width="1.5390%" height="15" fill="rgb(218,81,44)" fg:x="2224" fg:w="44"/><text x="78.0394%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (44 samples, 1.54%)</title><rect x="77.7894%" y="421" width="1.5390%" height="15" fill="rgb(213,98,6)" fg:x="2224" fg:w="44"/><text x="78.0394%" y="431.50"></text></g><g><title>alloc::alloc::realloc (44 samples, 1.54%)</title><rect x="77.7894%" y="405" width="1.5390%" height="15" fill="rgb(222,85,22)" fg:x="2224" fg:w="44"/><text x="78.0394%" y="415.50"></text></g><g><title>__rdl_realloc (3 samples, 0.10%)</title><rect x="79.2235%" y="389" width="0.1049%" height="15" fill="rgb(239,46,39)" fg:x="2265" fg:w="3"/><text x="79.4735%" y="399.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.07%)</title><rect x="79.2585%" y="373" width="0.0700%" height="15" fill="rgb(237,12,29)" fg:x="2266" fg:w="2"/><text x="79.5085%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (46 samples, 1.61%)</title><rect x="77.7545%" y="517" width="1.6090%" height="15" fill="rgb(214,77,8)" fg:x="2223" fg:w="46"/><text x="78.0045%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (46 samples, 1.61%)</title><rect x="77.7545%" y="501" width="1.6090%" height="15" fill="rgb(217,168,37)" fg:x="2223" fg:w="46"/><text x="78.0045%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (45 samples, 1.57%)</title><rect x="77.7894%" y="485" width="1.5740%" height="15" fill="rgb(221,217,23)" fg:x="2224" fg:w="45"/><text x="78.0394%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 1.57%)</title><rect x="77.7894%" y="469" width="1.5740%" height="15" fill="rgb(243,229,36)" fg:x="2224" fg:w="45"/><text x="78.0394%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (45 samples, 1.57%)</title><rect x="77.7894%" y="453" width="1.5740%" height="15" fill="rgb(251,163,40)" fg:x="2224" fg:w="45"/><text x="78.0394%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="79.3284%" y="437" width="0.0350%" height="15" fill="rgb(237,222,12)" fg:x="2268" fg:w="1"/><text x="79.5784%" y="447.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (57 samples, 1.99%)</title><rect x="77.6845%" y="597" width="1.9937%" height="15" fill="rgb(248,132,6)" fg:x="2221" fg:w="57"/><text x="77.9345%" y="607.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (57 samples, 1.99%)</title><rect x="77.6845%" y="581" width="1.9937%" height="15" fill="rgb(227,167,50)" fg:x="2221" fg:w="57"/><text x="77.9345%" y="591.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (57 samples, 1.99%)</title><rect x="77.6845%" y="565" width="1.9937%" height="15" fill="rgb(242,84,37)" fg:x="2221" fg:w="57"/><text x="77.9345%" y="575.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (57 samples, 1.99%)</title><rect x="77.6845%" y="549" width="1.9937%" height="15" fill="rgb(212,4,50)" fg:x="2221" fg:w="57"/><text x="77.9345%" y="559.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (57 samples, 1.99%)</title><rect x="77.6845%" y="533" width="1.9937%" height="15" fill="rgb(230,228,32)" fg:x="2221" fg:w="57"/><text x="77.9345%" y="543.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.31%)</title><rect x="79.3634%" y="517" width="0.3148%" height="15" fill="rgb(248,217,23)" fg:x="2269" fg:w="9"/><text x="79.6134%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.28%)</title><rect x="79.3984%" y="501" width="0.2798%" height="15" fill="rgb(238,197,32)" fg:x="2270" fg:w="8"/><text x="79.6484%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (5 samples, 0.17%)</title><rect x="79.6782%" y="597" width="0.1749%" height="15" fill="rgb(236,106,1)" fg:x="2278" fg:w="5"/><text x="79.9282%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.07%)</title><rect x="79.8531%" y="597" width="0.0700%" height="15" fill="rgb(219,228,13)" fg:x="2283" fg:w="2"/><text x="80.1031%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="80.3078%" y="421" width="0.0350%" height="15" fill="rgb(238,30,35)" fg:x="2296" fg:w="1"/><text x="80.5578%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1 samples, 0.03%)</title><rect x="80.3078%" y="405" width="0.0350%" height="15" fill="rgb(236,70,23)" fg:x="2296" fg:w="1"/><text x="80.5578%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.03%)</title><rect x="80.3428%" y="389" width="0.0350%" height="15" fill="rgb(249,104,48)" fg:x="2297" fg:w="1"/><text x="80.5928%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="80.3078%" y="453" width="0.1049%" height="15" fill="rgb(254,117,50)" fg:x="2296" fg:w="3"/><text x="80.5578%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.10%)</title><rect x="80.3078%" y="437" width="0.1049%" height="15" fill="rgb(223,152,4)" fg:x="2296" fg:w="3"/><text x="80.5578%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.07%)</title><rect x="80.3428%" y="421" width="0.0700%" height="15" fill="rgb(245,6,2)" fg:x="2297" fg:w="2"/><text x="80.5928%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.07%)</title><rect x="80.3428%" y="405" width="0.0700%" height="15" fill="rgb(249,150,24)" fg:x="2297" fg:w="2"/><text x="80.5928%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="80.3778%" y="389" width="0.0350%" height="15" fill="rgb(228,185,42)" fg:x="2298" fg:w="1"/><text x="80.6278%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="80.3778%" y="373" width="0.0350%" height="15" fill="rgb(226,39,33)" fg:x="2298" fg:w="1"/><text x="80.6278%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="80.3778%" y="357" width="0.0350%" height="15" fill="rgb(221,166,19)" fg:x="2298" fg:w="1"/><text x="80.6278%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="80.3778%" y="341" width="0.0350%" height="15" fill="rgb(209,109,2)" fg:x="2298" fg:w="1"/><text x="80.6278%" y="351.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="80.3778%" y="325" width="0.0350%" height="15" fill="rgb(252,216,26)" fg:x="2298" fg:w="1"/><text x="80.6278%" y="335.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (9 samples, 0.31%)</title><rect x="80.2029%" y="533" width="0.3148%" height="15" fill="rgb(227,173,36)" fg:x="2293" fg:w="9"/><text x="80.4529%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (9 samples, 0.31%)</title><rect x="80.2029%" y="517" width="0.3148%" height="15" fill="rgb(209,90,7)" fg:x="2293" fg:w="9"/><text x="80.4529%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (6 samples, 0.21%)</title><rect x="80.3078%" y="501" width="0.2099%" height="15" fill="rgb(250,194,11)" fg:x="2296" fg:w="6"/><text x="80.5578%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (6 samples, 0.21%)</title><rect x="80.3078%" y="485" width="0.2099%" height="15" fill="rgb(220,72,50)" fg:x="2296" fg:w="6"/><text x="80.5578%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (6 samples, 0.21%)</title><rect x="80.3078%" y="469" width="0.2099%" height="15" fill="rgb(222,106,48)" fg:x="2296" fg:w="6"/><text x="80.5578%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.10%)</title><rect x="80.4127%" y="453" width="0.1049%" height="15" fill="rgb(216,220,45)" fg:x="2299" fg:w="3"/><text x="80.6627%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="80.4127%" y="437" width="0.1049%" height="15" fill="rgb(234,112,18)" fg:x="2299" fg:w="3"/><text x="80.6627%" y="447.50"></text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_key (82 samples, 2.87%)</title><rect x="77.6845%" y="645" width="2.8681%" height="15" fill="rgb(206,179,9)" fg:x="2221" fg:w="82"/><text x="77.9345%" y="655.50">&lt;s..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (82 samples, 2.87%)</title><rect x="77.6845%" y="629" width="2.8681%" height="15" fill="rgb(215,115,40)" fg:x="2221" fg:w="82"/><text x="77.9345%" y="639.50">se..</text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (82 samples, 2.87%)</title><rect x="77.6845%" y="613" width="2.8681%" height="15" fill="rgb(222,69,34)" fg:x="2221" fg:w="82"/><text x="77.9345%" y="623.50">&lt;&amp;..</text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (18 samples, 0.63%)</title><rect x="79.9231%" y="597" width="0.6296%" height="15" fill="rgb(209,161,10)" fg:x="2285" fg:w="18"/><text x="80.1731%" y="607.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (13 samples, 0.45%)</title><rect x="80.0979%" y="581" width="0.4547%" height="15" fill="rgb(217,6,38)" fg:x="2290" fg:w="13"/><text x="80.3479%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (12 samples, 0.42%)</title><rect x="80.1329%" y="565" width="0.4197%" height="15" fill="rgb(229,229,48)" fg:x="2291" fg:w="12"/><text x="80.3829%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (12 samples, 0.42%)</title><rect x="80.1329%" y="549" width="0.4197%" height="15" fill="rgb(225,21,28)" fg:x="2291" fg:w="12"/><text x="80.3829%" y="559.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="80.5177%" y="533" width="0.0350%" height="15" fill="rgb(206,33,13)" fg:x="2302" fg:w="1"/><text x="80.7677%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::needs_to_grow (1 samples, 0.03%)</title><rect x="80.9374%" y="485" width="0.0350%" height="15" fill="rgb(242,178,17)" fg:x="2314" fg:w="1"/><text x="81.1874%" y="495.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.42%)</title><rect x="80.9724%" y="389" width="0.4197%" height="15" fill="rgb(220,162,5)" fg:x="2315" fg:w="12"/><text x="81.2224%" y="399.50"></text></g><g><title>_int_realloc (11 samples, 0.38%)</title><rect x="81.0073%" y="373" width="0.3847%" height="15" fill="rgb(210,33,43)" fg:x="2316" fg:w="11"/><text x="81.2573%" y="383.50"></text></g><g><title>_int_malloc (9 samples, 0.31%)</title><rect x="81.0773%" y="357" width="0.3148%" height="15" fill="rgb(216,116,54)" fg:x="2318" fg:w="9"/><text x="81.3273%" y="367.50"></text></g><g><title>malloc_consolidate (3 samples, 0.10%)</title><rect x="81.2872%" y="341" width="0.1049%" height="15" fill="rgb(249,92,24)" fg:x="2324" fg:w="3"/><text x="81.5372%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.45%)</title><rect x="80.9724%" y="453" width="0.4547%" height="15" fill="rgb(231,189,14)" fg:x="2315" fg:w="13"/><text x="81.2224%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (13 samples, 0.45%)</title><rect x="80.9724%" y="437" width="0.4547%" height="15" fill="rgb(230,8,41)" fg:x="2315" fg:w="13"/><text x="81.2224%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (13 samples, 0.45%)</title><rect x="80.9724%" y="421" width="0.4547%" height="15" fill="rgb(249,7,27)" fg:x="2315" fg:w="13"/><text x="81.2224%" y="431.50"></text></g><g><title>alloc::alloc::realloc (13 samples, 0.45%)</title><rect x="80.9724%" y="405" width="0.4547%" height="15" fill="rgb(232,86,5)" fg:x="2315" fg:w="13"/><text x="81.2224%" y="415.50"></text></g><g><title>__rdl_realloc (1 samples, 0.03%)</title><rect x="81.3921%" y="389" width="0.0350%" height="15" fill="rgb(224,175,18)" fg:x="2327" fg:w="1"/><text x="81.6421%" y="399.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.03%)</title><rect x="81.3921%" y="373" width="0.0350%" height="15" fill="rgb(220,129,12)" fg:x="2327" fg:w="1"/><text x="81.6421%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (16 samples, 0.56%)</title><rect x="80.9024%" y="517" width="0.5596%" height="15" fill="rgb(210,19,36)" fg:x="2313" fg:w="16"/><text x="81.1524%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.56%)</title><rect x="80.9024%" y="501" width="0.5596%" height="15" fill="rgb(219,96,14)" fg:x="2313" fg:w="16"/><text x="81.1524%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.49%)</title><rect x="80.9724%" y="485" width="0.4897%" height="15" fill="rgb(249,106,1)" fg:x="2315" fg:w="14"/><text x="81.2224%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (14 samples, 0.49%)</title><rect x="80.9724%" y="469" width="0.4897%" height="15" fill="rgb(249,155,20)" fg:x="2315" fg:w="14"/><text x="81.2224%" y="479.50"></text></g><g><title>core::cmp::max (1 samples, 0.03%)</title><rect x="81.4271%" y="453" width="0.0350%" height="15" fill="rgb(244,168,9)" fg:x="2328" fg:w="1"/><text x="81.6771%" y="463.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.03%)</title><rect x="81.4271%" y="437" width="0.0350%" height="15" fill="rgb(216,23,50)" fg:x="2328" fg:w="1"/><text x="81.6771%" y="447.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.03%)</title><rect x="81.4271%" y="421" width="0.0350%" height="15" fill="rgb(224,219,20)" fg:x="2328" fg:w="1"/><text x="81.6771%" y="431.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (34 samples, 1.19%)</title><rect x="80.7975%" y="597" width="1.1892%" height="15" fill="rgb(222,156,15)" fg:x="2310" fg:w="34"/><text x="81.0475%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (33 samples, 1.15%)</title><rect x="80.8325%" y="581" width="1.1542%" height="15" fill="rgb(231,97,17)" fg:x="2311" fg:w="33"/><text x="81.0825%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (33 samples, 1.15%)</title><rect x="80.8325%" y="565" width="1.1542%" height="15" fill="rgb(218,70,48)" fg:x="2311" fg:w="33"/><text x="81.0825%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (33 samples, 1.15%)</title><rect x="80.8325%" y="549" width="1.1542%" height="15" fill="rgb(212,196,52)" fg:x="2311" fg:w="33"/><text x="81.0825%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (33 samples, 1.15%)</title><rect x="80.8325%" y="533" width="1.1542%" height="15" fill="rgb(243,203,18)" fg:x="2311" fg:w="33"/><text x="81.0825%" y="543.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.52%)</title><rect x="81.4620%" y="517" width="0.5247%" height="15" fill="rgb(252,125,41)" fg:x="2329" fg:w="15"/><text x="81.7120%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.49%)</title><rect x="81.4970%" y="501" width="0.4897%" height="15" fill="rgb(223,180,33)" fg:x="2330" fg:w="14"/><text x="81.7470%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="81.9867%" y="597" width="0.0350%" height="15" fill="rgb(254,159,46)" fg:x="2344" fg:w="1"/><text x="82.2367%" y="607.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.03%)</title><rect x="82.0217%" y="597" width="0.0350%" height="15" fill="rgb(254,38,10)" fg:x="2345" fg:w="1"/><text x="82.2717%" y="607.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="82.2665%" y="293" width="0.0350%" height="15" fill="rgb(208,217,32)" fg:x="2352" fg:w="1"/><text x="82.5165%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.07%)</title><rect x="82.2665%" y="453" width="0.0700%" height="15" fill="rgb(221,120,13)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.07%)</title><rect x="82.2665%" y="437" width="0.0700%" height="15" fill="rgb(246,54,52)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.07%)</title><rect x="82.2665%" y="421" width="0.0700%" height="15" fill="rgb(242,34,25)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.07%)</title><rect x="82.2665%" y="405" width="0.0700%" height="15" fill="rgb(247,209,9)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.07%)</title><rect x="82.2665%" y="389" width="0.0700%" height="15" fill="rgb(228,71,26)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.07%)</title><rect x="82.2665%" y="373" width="0.0700%" height="15" fill="rgb(222,145,49)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.07%)</title><rect x="82.2665%" y="357" width="0.0700%" height="15" fill="rgb(218,121,17)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="367.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.07%)</title><rect x="82.2665%" y="341" width="0.0700%" height="15" fill="rgb(244,50,7)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="351.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.07%)</title><rect x="82.2665%" y="325" width="0.0700%" height="15" fill="rgb(246,229,37)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="335.50"></text></g><g><title>_int_realloc (2 samples, 0.07%)</title><rect x="82.2665%" y="309" width="0.0700%" height="15" fill="rgb(225,18,5)" fg:x="2352" fg:w="2"/><text x="82.5165%" y="319.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="82.3015%" y="293" width="0.0350%" height="15" fill="rgb(213,204,8)" fg:x="2353" fg:w="1"/><text x="82.5515%" y="303.50"></text></g><g><title>mmap_payload_storage::payload::Payload::to_bytes (158 samples, 5.53%)</title><rect x="77.0199%" y="741" width="5.5264%" height="15" fill="rgb(238,103,6)" fg:x="2202" fg:w="158"/><text x="77.2699%" y="751.50">mmap_pa..</text></g><g><title>serde_cbor::ser::to_vec (158 samples, 5.53%)</title><rect x="77.0199%" y="725" width="5.5264%" height="15" fill="rgb(222,25,35)" fg:x="2202" fg:w="158"/><text x="77.2699%" y="735.50">serde_c..</text></g><g><title>mmap_payload_storage::payload::_::&lt;impl serde::ser::Serialize for mmap_payload_storage::payload::Payload&gt;::serialize (158 samples, 5.53%)</title><rect x="77.0199%" y="709" width="5.5264%" height="15" fill="rgb(213,203,35)" fg:x="2202" fg:w="158"/><text x="77.2699%" y="719.50">mmap_pa..</text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_newtype_struct (158 samples, 5.53%)</title><rect x="77.0199%" y="693" width="5.5264%" height="15" fill="rgb(221,79,53)" fg:x="2202" fg:w="158"/><text x="77.2699%" y="703.50">&lt;&amp;mut s..</text></g><g><title>&lt;serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt; as serde::ser::Serialize&gt;::serialize (158 samples, 5.53%)</title><rect x="77.0199%" y="677" width="5.5264%" height="15" fill="rgb(243,200,35)" fg:x="2202" fg:w="158"/><text x="77.2699%" y="687.50">&lt;serde_..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (140 samples, 4.90%)</title><rect x="77.6495%" y="661" width="4.8968%" height="15" fill="rgb(248,60,25)" fg:x="2220" fg:w="140"/><text x="77.8995%" y="671.50">serde:..</text></g><g><title>&lt;serde_cbor::ser::CollectionSerializer&lt;W&gt; as serde::ser::SerializeMap&gt;::serialize_value (57 samples, 1.99%)</title><rect x="80.5526%" y="645" width="1.9937%" height="15" fill="rgb(227,53,46)" fg:x="2303" fg:w="57"/><text x="80.8026%" y="655.50">&lt;..</text></g><g><title>serde_json::value::ser::&lt;impl serde::ser::Serialize for serde_json::value::Value&gt;::serialize (57 samples, 1.99%)</title><rect x="80.5526%" y="629" width="1.9937%" height="15" fill="rgb(216,120,32)" fg:x="2303" fg:w="57"/><text x="80.8026%" y="639.50">s..</text></g><g><title>&lt;&amp;mut serde_cbor::ser::Serializer&lt;W&gt; as serde::ser::Serializer&gt;::serialize_str (50 samples, 1.75%)</title><rect x="80.7975%" y="613" width="1.7489%" height="15" fill="rgb(220,134,1)" fg:x="2310" fg:w="50"/><text x="81.0475%" y="623.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u64 (14 samples, 0.49%)</title><rect x="82.0567%" y="597" width="0.4897%" height="15" fill="rgb(237,168,5)" fg:x="2346" fg:w="14"/><text x="82.3067%" y="607.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u32 (11 samples, 0.38%)</title><rect x="82.1616%" y="581" width="0.3847%" height="15" fill="rgb(231,100,33)" fg:x="2349" fg:w="11"/><text x="82.4116%" y="591.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u16 (11 samples, 0.38%)</title><rect x="82.1616%" y="565" width="0.3847%" height="15" fill="rgb(236,177,47)" fg:x="2349" fg:w="11"/><text x="82.4116%" y="575.50"></text></g><g><title>serde_cbor::ser::Serializer&lt;W&gt;::write_u8 (11 samples, 0.38%)</title><rect x="82.1616%" y="549" width="0.3847%" height="15" fill="rgb(235,7,49)" fg:x="2349" fg:w="11"/><text x="82.4116%" y="559.50"></text></g><g><title>&lt;&amp;mut W as serde_cbor::write::Write&gt;::write_all (9 samples, 0.31%)</title><rect x="82.2315%" y="533" width="0.3148%" height="15" fill="rgb(232,119,22)" fg:x="2351" fg:w="9"/><text x="82.4815%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as serde_cbor::write::Write&gt;::write_all (9 samples, 0.31%)</title><rect x="82.2315%" y="517" width="0.3148%" height="15" fill="rgb(254,73,53)" fg:x="2351" fg:w="9"/><text x="82.4815%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (8 samples, 0.28%)</title><rect x="82.2665%" y="501" width="0.2798%" height="15" fill="rgb(251,35,20)" fg:x="2352" fg:w="8"/><text x="82.5165%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (8 samples, 0.28%)</title><rect x="82.2665%" y="485" width="0.2798%" height="15" fill="rgb(241,119,20)" fg:x="2352" fg:w="8"/><text x="82.5165%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (8 samples, 0.28%)</title><rect x="82.2665%" y="469" width="0.2798%" height="15" fill="rgb(207,102,14)" fg:x="2352" fg:w="8"/><text x="82.5165%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.21%)</title><rect x="82.3365%" y="453" width="0.2099%" height="15" fill="rgb(248,201,50)" fg:x="2354" fg:w="6"/><text x="82.5865%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.17%)</title><rect x="82.3715%" y="437" width="0.1749%" height="15" fill="rgb(222,185,44)" fg:x="2355" fg:w="5"/><text x="82.6215%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.03%)</title><rect x="82.5463%" y="693" width="0.0350%" height="15" fill="rgb(218,107,18)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.03%)</title><rect x="82.5463%" y="677" width="0.0350%" height="15" fill="rgb(237,177,39)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (1 samples, 0.03%)</title><rect x="82.5463%" y="661" width="0.0350%" height="15" fill="rgb(246,69,6)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_unchecked (1 samples, 0.03%)</title><rect x="82.5463%" y="645" width="0.0350%" height="15" fill="rgb(234,208,37)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (1 samples, 0.03%)</title><rect x="82.5463%" y="629" width="0.0350%" height="15" fill="rgb(225,4,6)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="639.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="82.5463%" y="613" width="0.0350%" height="15" fill="rgb(233,45,0)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="623.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="82.5463%" y="597" width="0.0350%" height="15" fill="rgb(226,136,5)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="607.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="82.5463%" y="581" width="0.0350%" height="15" fill="rgb(211,91,47)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="591.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.03%)</title><rect x="82.5463%" y="565" width="0.0350%" height="15" fill="rgb(242,88,51)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="575.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.03%)</title><rect x="82.5463%" y="549" width="0.0350%" height="15" fill="rgb(230,91,28)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="559.50"></text></g><g><title>unlink_chunk (1 samples, 0.03%)</title><rect x="82.5463%" y="533" width="0.0350%" height="15" fill="rgb(254,186,29)" fg:x="2360" fg:w="1"/><text x="82.7963%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (7 samples, 0.24%)</title><rect x="82.5813%" y="693" width="0.2448%" height="15" fill="rgb(238,6,4)" fg:x="2361" fg:w="7"/><text x="82.8313%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.24%)</title><rect x="82.5813%" y="677" width="0.2448%" height="15" fill="rgb(221,151,16)" fg:x="2361" fg:w="7"/><text x="82.8313%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.24%)</title><rect x="82.5813%" y="661" width="0.2448%" height="15" fill="rgb(251,143,52)" fg:x="2361" fg:w="7"/><text x="82.8313%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (7 samples, 0.24%)</title><rect x="82.5813%" y="645" width="0.2448%" height="15" fill="rgb(206,90,15)" fg:x="2361" fg:w="7"/><text x="82.8313%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.24%)</title><rect x="82.5813%" y="629" width="0.2448%" height="15" fill="rgb(218,35,8)" fg:x="2361" fg:w="7"/><text x="82.8313%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.24%)</title><rect x="82.5813%" y="613" width="0.2448%" height="15" fill="rgb(239,215,6)" fg:x="2361" fg:w="7"/><text x="82.8313%" y="623.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.24%)</title><rect x="82.5813%" y="597" width="0.2448%" height="15" fill="rgb(245,116,39)" fg:x="2361" fg:w="7"/><text x="82.8313%" y="607.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.24%)</title><rect x="82.5813%" y="581" width="0.2448%" height="15" fill="rgb(242,65,28)" fg:x="2361" fg:w="7"/><text x="82.8313%" y="591.50"></text></g><g><title>_int_malloc (6 samples, 0.21%)</title><rect x="82.6163%" y="565" width="0.2099%" height="15" fill="rgb(252,132,53)" fg:x="2362" fg:w="6"/><text x="82.8663%" y="575.50"></text></g><g><title>_int_free (1 samples, 0.03%)</title><rect x="82.8262%" y="661" width="0.0350%" height="15" fill="rgb(224,159,50)" fg:x="2368" fg:w="1"/><text x="83.0762%" y="671.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.07%)</title><rect x="82.8611%" y="661" width="0.0700%" height="15" fill="rgb(224,93,4)" fg:x="2369" fg:w="2"/><text x="83.1111%" y="671.50"></text></g><g><title>__GI___libc_free (4 samples, 0.14%)</title><rect x="82.8262%" y="677" width="0.1399%" height="15" fill="rgb(208,81,34)" fg:x="2368" fg:w="4"/><text x="83.0762%" y="687.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.03%)</title><rect x="82.9311%" y="661" width="0.0350%" height="15" fill="rgb(233,92,54)" fg:x="2371" fg:w="1"/><text x="83.1811%" y="671.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::get_at (16 samples, 0.56%)</title><rect x="85.6593%" y="661" width="0.5596%" height="15" fill="rgb(237,21,14)" fg:x="2449" fg:w="16"/><text x="85.9093%" y="671.50"></text></g><g><title>lz4_flex::block::compress::get_batch (11 samples, 0.38%)</title><rect x="86.2190%" y="645" width="0.3847%" height="15" fill="rgb(249,128,51)" fg:x="2465" fg:w="11"/><text x="86.4690%" y="655.50"></text></g><g><title>lz4_flex::block::compress::read_u32_ptr (11 samples, 0.38%)</title><rect x="86.2190%" y="629" width="0.3847%" height="15" fill="rgb(223,129,24)" fg:x="2465" fg:w="11"/><text x="86.4690%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.38%)</title><rect x="86.2190%" y="613" width="0.3847%" height="15" fill="rgb(231,168,25)" fg:x="2465" fg:w="11"/><text x="86.4690%" y="623.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::get_hash_at (19 samples, 0.66%)</title><rect x="86.2190%" y="661" width="0.6646%" height="15" fill="rgb(224,39,20)" fg:x="2465" fg:w="19"/><text x="86.4690%" y="671.50"></text></g><g><title>lz4_flex::block::hashtable::hash (8 samples, 0.28%)</title><rect x="86.6037%" y="645" width="0.2798%" height="15" fill="rgb(225,152,53)" fg:x="2476" fg:w="8"/><text x="86.8537%" y="655.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_mul (8 samples, 0.28%)</title><rect x="86.6037%" y="629" width="0.2798%" height="15" fill="rgb(252,17,24)" fg:x="2476" fg:w="8"/><text x="86.8537%" y="639.50"></text></g><g><title>&lt;lz4_flex::block::hashtable::HashTable4KU16 as lz4_flex::block::hashtable::HashTable&gt;::put_at (17 samples, 0.59%)</title><rect x="86.8835%" y="661" width="0.5946%" height="15" fill="rgb(250,114,30)" fg:x="2484" fg:w="17"/><text x="87.1335%" y="671.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="87.4781%" y="597" width="0.0350%" height="15" fill="rgb(229,5,4)" fg:x="2501" fg:w="1"/><text x="87.7281%" y="607.50"></text></g><g><title>tick_nohz_highres_handler (1 samples, 0.03%)</title><rect x="87.4781%" y="581" width="0.0350%" height="15" fill="rgb(225,176,49)" fg:x="2501" fg:w="1"/><text x="87.7281%" y="591.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="87.4781%" y="565" width="0.0350%" height="15" fill="rgb(224,221,49)" fg:x="2501" fg:w="1"/><text x="87.7281%" y="575.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="87.4781%" y="549" width="0.0350%" height="15" fill="rgb(253,169,27)" fg:x="2501" fg:w="1"/><text x="87.7281%" y="559.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="87.4781%" y="533" width="0.0350%" height="15" fill="rgb(211,206,16)" fg:x="2501" fg:w="1"/><text x="87.7281%" y="543.50"></text></g><g><title>update_cfs_group (1 samples, 0.03%)</title><rect x="87.4781%" y="517" width="0.0350%" height="15" fill="rgb(244,87,35)" fg:x="2501" fg:w="1"/><text x="87.7281%" y="527.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="87.4781%" y="661" width="0.0700%" height="15" fill="rgb(246,28,10)" fg:x="2501" fg:w="2"/><text x="87.7281%" y="671.50"></text></g><g><title>sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="87.4781%" y="645" width="0.0700%" height="15" fill="rgb(229,12,44)" fg:x="2501" fg:w="2"/><text x="87.7281%" y="655.50"></text></g><g><title>__sysvec_apic_timer_interrupt (2 samples, 0.07%)</title><rect x="87.4781%" y="629" width="0.0700%" height="15" fill="rgb(210,145,37)" fg:x="2501" fg:w="2"/><text x="87.7281%" y="639.50"></text></g><g><title>hrtimer_interrupt (2 samples, 0.07%)</title><rect x="87.4781%" y="613" width="0.0700%" height="15" fill="rgb(227,112,52)" fg:x="2501" fg:w="2"/><text x="87.7281%" y="623.50"></text></g><g><title>tick_program_event (1 samples, 0.03%)</title><rect x="87.5131%" y="597" width="0.0350%" height="15" fill="rgb(238,155,34)" fg:x="2502" fg:w="1"/><text x="87.7631%" y="607.50"></text></g><g><title>clockevents_program_event (1 samples, 0.03%)</title><rect x="87.5131%" y="581" width="0.0350%" height="15" fill="rgb(239,226,36)" fg:x="2502" fg:w="1"/><text x="87.7631%" y="591.50"></text></g><g><title>lz4_flex::block::compress::backtrack_match (6 samples, 0.21%)</title><rect x="87.5481%" y="661" width="0.2099%" height="15" fill="rgb(230,16,23)" fg:x="2503" fg:w="6"/><text x="87.7981%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.03%)</title><rect x="87.7230%" y="645" width="0.0350%" height="15" fill="rgb(236,171,36)" fg:x="2508" fg:w="1"/><text x="87.9730%" y="655.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u8&gt;::eq (1 samples, 0.03%)</title><rect x="87.7230%" y="629" width="0.0350%" height="15" fill="rgb(221,22,14)" fg:x="2508" fg:w="1"/><text x="87.9730%" y="639.50"></text></g><g><title>lz4_flex::block::compress::copy_literals_wild (1 samples, 0.03%)</title><rect x="87.7580%" y="661" width="0.0350%" height="15" fill="rgb(242,43,11)" fg:x="2509" fg:w="1"/><text x="88.0080%" y="671.50"></text></g><g><title>&lt;lz4_flex::sink::PtrSink as lz4_flex::sink::Sink&gt;::pos_mut_ptr (1 samples, 0.03%)</title><rect x="87.7580%" y="645" width="0.0350%" height="15" fill="rgb(232,69,23)" fg:x="2509" fg:w="1"/><text x="88.0080%" y="655.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="87.7580%" y="629" width="0.0350%" height="15" fill="rgb(216,180,54)" fg:x="2509" fg:w="1"/><text x="88.0080%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_sub (2 samples, 0.07%)</title><rect x="88.1077%" y="645" width="0.0700%" height="15" fill="rgb(216,5,24)" fg:x="2519" fg:w="2"/><text x="88.3577%" y="655.50"></text></g><g><title>core::num::&lt;impl usize&gt;::trailing_zeros (4 samples, 0.14%)</title><rect x="88.1777%" y="645" width="0.1399%" height="15" fill="rgb(225,89,9)" fg:x="2521" fg:w="4"/><text x="88.4277%" y="655.50"></text></g><g><title>lz4_flex::block::compress::count_same_bytes (19 samples, 0.66%)</title><rect x="87.7929%" y="661" width="0.6646%" height="15" fill="rgb(243,75,33)" fg:x="2510" fg:w="19"/><text x="88.0429%" y="671.50"></text></g><g><title>lz4_flex::block::compress::read_usize_ptr (4 samples, 0.14%)</title><rect x="88.3176%" y="645" width="0.1399%" height="15" fill="rgb(247,141,45)" fg:x="2525" fg:w="4"/><text x="88.5676%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.14%)</title><rect x="88.3176%" y="629" width="0.1399%" height="15" fill="rgb(232,177,36)" fg:x="2525" fg:w="4"/><text x="88.5676%" y="639.50"></text></g><g><title>lz4_flex::block::compress::handle_last_literals (1 samples, 0.03%)</title><rect x="88.4575%" y="661" width="0.0350%" height="15" fill="rgb(219,125,36)" fg:x="2529" fg:w="1"/><text x="88.7075%" y="671.50"></text></g><g><title>&lt;lz4_flex::sink::PtrSink as lz4_flex::sink::Sink&gt;::extend_from_slice (1 samples, 0.03%)</title><rect x="88.4575%" y="645" width="0.0350%" height="15" fill="rgb(227,94,9)" fg:x="2529" fg:w="1"/><text x="88.7075%" y="655.50"></text></g><g><title>&lt;lz4_flex::sink::PtrSink as lz4_flex::sink::Sink&gt;::extend_from_slice_wild (1 samples, 0.03%)</title><rect x="88.4575%" y="629" width="0.0350%" height="15" fill="rgb(240,34,52)" fg:x="2529" fg:w="1"/><text x="88.7075%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="88.4575%" y="613" width="0.0350%" height="15" fill="rgb(216,45,12)" fg:x="2529" fg:w="1"/><text x="88.7075%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="88.4575%" y="597" width="0.0350%" height="15" fill="rgb(246,21,19)" fg:x="2529" fg:w="1"/><text x="88.7075%" y="607.50"></text></g><g><title>lz4_flex::block::compress::token_from_literal_and_match_length (3 samples, 0.10%)</title><rect x="88.4925%" y="661" width="0.1049%" height="15" fill="rgb(213,98,42)" fg:x="2530" fg:w="3"/><text x="88.7425%" y="671.50"></text></g><g><title>lz4_flex::block::compress::compress_internal (163 samples, 5.70%)</title><rect x="82.9661%" y="677" width="5.7013%" height="15" fill="rgb(250,136,47)" fg:x="2372" fg:w="163"/><text x="83.2161%" y="687.50">lz4_fle..</text></g><g><title>lz4_flex::block::compress::write_integer (2 samples, 0.07%)</title><rect x="88.5974%" y="661" width="0.0700%" height="15" fill="rgb(251,124,27)" fg:x="2533" fg:w="2"/><text x="88.8474%" y="671.50"></text></g><g><title>lz4_flex::block::compress::push_u32 (1 samples, 0.03%)</title><rect x="88.6324%" y="645" width="0.0350%" height="15" fill="rgb(229,180,14)" fg:x="2534" fg:w="1"/><text x="88.8824%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="88.6324%" y="629" width="0.0350%" height="15" fill="rgb(245,216,25)" fg:x="2534" fg:w="1"/><text x="88.8824%" y="639.50"></text></g><g><title>__libc_calloc (3 samples, 0.10%)</title><rect x="88.6674%" y="549" width="0.1049%" height="15" fill="rgb(251,43,5)" fg:x="2535" fg:w="3"/><text x="88.9174%" y="559.50"></text></g><g><title>_int_malloc (3 samples, 0.10%)</title><rect x="88.6674%" y="533" width="0.1049%" height="15" fill="rgb(250,128,24)" fg:x="2535" fg:w="3"/><text x="88.9174%" y="543.50"></text></g><g><title>__memset_avx2_unaligned_erms (17 samples, 0.59%)</title><rect x="88.7723%" y="549" width="0.5946%" height="15" fill="rgb(217,117,27)" fg:x="2538" fg:w="17"/><text x="89.0223%" y="559.50"></text></g><g><title>lz4_flex::block::compress::compress_into_sink_with_dict (188 samples, 6.58%)</title><rect x="82.8262%" y="693" width="6.5757%" height="15" fill="rgb(245,147,4)" fg:x="2368" fg:w="188"/><text x="83.0762%" y="703.50">lz4_flex:..</text></g><g><title>lz4_flex::block::hashtable::HashTable4KU16::new (21 samples, 0.73%)</title><rect x="88.6674%" y="677" width="0.7345%" height="15" fill="rgb(242,201,35)" fg:x="2535" fg:w="21"/><text x="88.9174%" y="687.50"></text></g><g><title>alloc::vec::from_elem (21 samples, 0.73%)</title><rect x="88.6674%" y="661" width="0.7345%" height="15" fill="rgb(218,181,1)" fg:x="2535" fg:w="21"/><text x="88.9174%" y="671.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (21 samples, 0.73%)</title><rect x="88.6674%" y="645" width="0.7345%" height="15" fill="rgb(222,6,29)" fg:x="2535" fg:w="21"/><text x="88.9174%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (21 samples, 0.73%)</title><rect x="88.6674%" y="629" width="0.7345%" height="15" fill="rgb(208,186,3)" fg:x="2535" fg:w="21"/><text x="88.9174%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_allocate_in (21 samples, 0.73%)</title><rect x="88.6674%" y="613" width="0.7345%" height="15" fill="rgb(216,36,26)" fg:x="2535" fg:w="21"/><text x="88.9174%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (21 samples, 0.73%)</title><rect x="88.6674%" y="597" width="0.7345%" height="15" fill="rgb(248,201,23)" fg:x="2535" fg:w="21"/><text x="88.9174%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (21 samples, 0.73%)</title><rect x="88.6674%" y="581" width="0.7345%" height="15" fill="rgb(251,170,31)" fg:x="2535" fg:w="21"/><text x="88.9174%" y="591.50"></text></g><g><title>alloc::alloc::alloc_zeroed (21 samples, 0.73%)</title><rect x="88.6674%" y="565" width="0.7345%" height="15" fill="rgb(207,110,25)" fg:x="2535" fg:w="21"/><text x="88.9174%" y="575.50"></text></g><g><title>__rdl_alloc_zeroed (1 samples, 0.03%)</title><rect x="89.3669%" y="549" width="0.0350%" height="15" fill="rgb(250,54,15)" fg:x="2555" fg:w="1"/><text x="89.6169%" y="559.50"></text></g><g><title>std::sys::pal::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1 samples, 0.03%)</title><rect x="89.3669%" y="533" width="0.0350%" height="15" fill="rgb(227,68,33)" fg:x="2555" fg:w="1"/><text x="89.6169%" y="543.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::compress (197 samples, 6.89%)</title><rect x="82.5463%" y="741" width="6.8905%" height="15" fill="rgb(238,34,41)" fg:x="2360" fg:w="197"/><text x="82.7963%" y="751.50">mmap_payl..</text></g><g><title>lz4_flex::block::compress::compress_prepend_size (197 samples, 6.89%)</title><rect x="82.5463%" y="725" width="6.8905%" height="15" fill="rgb(220,11,15)" fg:x="2360" fg:w="197"/><text x="82.7963%" y="735.50">lz4_flex:..</text></g><g><title>lz4_flex::block::compress::compress_into_vec_with_dict (197 samples, 6.89%)</title><rect x="82.5463%" y="709" width="6.8905%" height="15" fill="rgb(246,111,35)" fg:x="2360" fg:w="197"/><text x="82.7963%" y="719.50">lz4_flex:..</text></g><g><title>lz4_flex::sink::PtrSink::from_vec (1 samples, 0.03%)</title><rect x="89.4019%" y="693" width="0.0350%" height="15" fill="rgb(209,88,53)" fg:x="2556" fg:w="1"/><text x="89.6519%" y="703.50"></text></g><g><title>&lt;&amp;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.03%)</title><rect x="89.4369%" y="725" width="0.0350%" height="15" fill="rgb(231,185,47)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="735.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::iter (1 samples, 0.03%)</title><rect x="89.4369%" y="709" width="0.0350%" height="15" fill="rgb(233,154,1)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::iter (1 samples, 0.03%)</title><rect x="89.4369%" y="693" width="0.0350%" height="15" fill="rgb(225,15,46)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter (1 samples, 0.03%)</title><rect x="89.4369%" y="677" width="0.0350%" height="15" fill="rgb(211,135,41)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="687.50"></text></g><g><title>hashbrown::raw::RawTableInner::iter (1 samples, 0.03%)</title><rect x="89.4369%" y="661" width="0.0350%" height="15" fill="rgb(208,54,0)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="671.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::new (1 samples, 0.03%)</title><rect x="89.4369%" y="645" width="0.0350%" height="15" fill="rgb(244,136,14)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="655.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.03%)</title><rect x="89.4369%" y="629" width="0.0350%" height="15" fill="rgb(241,56,14)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="639.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.03%)</title><rect x="89.4369%" y="613" width="0.0350%" height="15" fill="rgb(205,80,24)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="623.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.03%)</title><rect x="89.4369%" y="597" width="0.0350%" height="15" fill="rgb(220,57,4)" fg:x="2557" fg:w="1"/><text x="89.6869%" y="607.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::free_space (1 samples, 0.03%)</title><rect x="89.4718%" y="725" width="0.0350%" height="15" fill="rgb(226,193,50)" fg:x="2558" fg:w="1"/><text x="89.7218%" y="735.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::find_best_fitting_page (3 samples, 0.10%)</title><rect x="89.4369%" y="741" width="0.1049%" height="15" fill="rgb(231,168,22)" fg:x="2557" fg:w="3"/><text x="89.6869%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::is_empty (1 samples, 0.03%)</title><rect x="89.5068%" y="725" width="0.0350%" height="15" fill="rgb(254,215,14)" fg:x="2559" fg:w="1"/><text x="89.7568%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::is_empty (1 samples, 0.03%)</title><rect x="89.5068%" y="709" width="0.0350%" height="15" fill="rgb(211,115,16)" fg:x="2559" fg:w="1"/><text x="89.7568%" y="719.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::len (1 samples, 0.03%)</title><rect x="89.5068%" y="693" width="0.0350%" height="15" fill="rgb(236,210,16)" fg:x="2559" fg:w="1"/><text x="89.7568%" y="703.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::len (1 samples, 0.03%)</title><rect x="89.5068%" y="677" width="0.0350%" height="15" fill="rgb(221,94,12)" fg:x="2559" fg:w="1"/><text x="89.7568%" y="687.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::get_pointer (1 samples, 0.03%)</title><rect x="89.5418%" y="741" width="0.0350%" height="15" fill="rgb(235,218,49)" fg:x="2560" fg:w="1"/><text x="89.7918%" y="751.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::get (1 samples, 0.03%)</title><rect x="89.5418%" y="725" width="0.0350%" height="15" fill="rgb(217,114,14)" fg:x="2560" fg:w="1"/><text x="89.7918%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (1 samples, 0.03%)</title><rect x="89.5418%" y="709" width="0.0350%" height="15" fill="rgb(216,145,22)" fg:x="2560" fg:w="1"/><text x="89.7918%" y="719.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (1 samples, 0.03%)</title><rect x="89.5418%" y="693" width="0.0350%" height="15" fill="rgb(217,112,39)" fg:x="2560" fg:w="1"/><text x="89.7918%" y="703.50"></text></g><g><title>access_error (1 samples, 0.03%)</title><rect x="89.6118%" y="645" width="0.0350%" height="15" fill="rgb(225,85,32)" fg:x="2562" fg:w="1"/><text x="89.8618%" y="655.50"></text></g><g><title>__filemap_get_folio (3 samples, 0.10%)</title><rect x="89.6467%" y="533" width="0.1049%" height="15" fill="rgb(245,209,47)" fg:x="2563" fg:w="3"/><text x="89.8967%" y="543.50"></text></g><g><title>filemap_get_entry (3 samples, 0.10%)</title><rect x="89.6467%" y="517" width="0.1049%" height="15" fill="rgb(218,220,15)" fg:x="2563" fg:w="3"/><text x="89.8967%" y="527.50"></text></g><g><title>__lruvec_stat_mod_folio (2 samples, 0.07%)</title><rect x="89.8216%" y="453" width="0.0700%" height="15" fill="rgb(222,202,31)" fg:x="2568" fg:w="2"/><text x="90.0716%" y="463.50"></text></g><g><title>__mod_lruvec_state (2 samples, 0.07%)</title><rect x="89.8216%" y="437" width="0.0700%" height="15" fill="rgb(243,203,4)" fg:x="2568" fg:w="2"/><text x="90.0716%" y="447.50"></text></g><g><title>__mod_memcg_lruvec_state (2 samples, 0.07%)</title><rect x="89.8216%" y="421" width="0.0700%" height="15" fill="rgb(237,92,17)" fg:x="2568" fg:w="2"/><text x="90.0716%" y="431.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 0.03%)</title><rect x="89.8916%" y="453" width="0.0350%" height="15" fill="rgb(231,119,7)" fg:x="2570" fg:w="1"/><text x="90.1416%" y="463.50"></text></g><g><title>try_charge_memcg (1 samples, 0.03%)</title><rect x="89.8916%" y="437" width="0.0350%" height="15" fill="rgb(237,82,41)" fg:x="2570" fg:w="1"/><text x="90.1416%" y="447.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.03%)</title><rect x="89.9265%" y="453" width="0.0350%" height="15" fill="rgb(226,81,48)" fg:x="2571" fg:w="1"/><text x="90.1765%" y="463.50"></text></g><g><title>__filemap_add_folio (5 samples, 0.17%)</title><rect x="89.8216%" y="469" width="0.1749%" height="15" fill="rgb(234,70,51)" fg:x="2568" fg:w="5"/><text x="90.0716%" y="479.50"></text></g><g><title>xas_store (1 samples, 0.03%)</title><rect x="89.9615%" y="453" width="0.0350%" height="15" fill="rgb(251,86,4)" fg:x="2572" fg:w="1"/><text x="90.2115%" y="463.50"></text></g><g><title>xas_create (1 samples, 0.03%)</title><rect x="89.9615%" y="437" width="0.0350%" height="15" fill="rgb(244,144,28)" fg:x="2572" fg:w="1"/><text x="90.2115%" y="447.50"></text></g><g><title>filemap_add_folio (6 samples, 0.21%)</title><rect x="89.8216%" y="485" width="0.2099%" height="15" fill="rgb(232,161,39)" fg:x="2568" fg:w="6"/><text x="90.0716%" y="495.50"></text></g><g><title>folio_add_lru (1 samples, 0.03%)</title><rect x="89.9965%" y="469" width="0.0350%" height="15" fill="rgb(247,34,51)" fg:x="2573" fg:w="1"/><text x="90.2465%" y="479.50"></text></g><g><title>folio_batch_move_lru (1 samples, 0.03%)</title><rect x="89.9965%" y="453" width="0.0350%" height="15" fill="rgb(225,132,2)" fg:x="2573" fg:w="1"/><text x="90.2465%" y="463.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="90.0665%" y="405" width="0.0350%" height="15" fill="rgb(209,159,44)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="415.50"></text></g><g><title>common_interrupt (1 samples, 0.03%)</title><rect x="90.0665%" y="389" width="0.0350%" height="15" fill="rgb(251,214,1)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="399.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="90.0665%" y="373" width="0.0350%" height="15" fill="rgb(247,84,47)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="383.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.03%)</title><rect x="90.0665%" y="357" width="0.0350%" height="15" fill="rgb(240,111,43)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="367.50"></text></g><g><title>handle_softirqs (1 samples, 0.03%)</title><rect x="90.0665%" y="341" width="0.0350%" height="15" fill="rgb(215,214,35)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="351.50"></text></g><g><title>tasklet_action (1 samples, 0.03%)</title><rect x="90.0665%" y="325" width="0.0350%" height="15" fill="rgb(248,207,23)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="335.50"></text></g><g><title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="90.0665%" y="309" width="0.0350%" height="15" fill="rgb(214,186,4)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="319.50"></text></g><g><title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="90.0665%" y="293" width="0.0350%" height="15" fill="rgb(220,133,22)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="303.50"></text></g><g><title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="90.0665%" y="277" width="0.0350%" height="15" fill="rgb(239,134,19)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="287.50"></text></g><g><title>xhci_unmap_urb_for_dma (1 samples, 0.03%)</title><rect x="90.0665%" y="261" width="0.0350%" height="15" fill="rgb(250,140,9)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="271.50"></text></g><g><title>usb_hcd_unmap_urb_setup_for_dma (1 samples, 0.03%)</title><rect x="90.0665%" y="245" width="0.0350%" height="15" fill="rgb(225,59,14)" fg:x="2575" fg:w="1"/><text x="90.3165%" y="255.50"></text></g><g><title>clear_page_erms (2 samples, 0.07%)</title><rect x="90.1014%" y="405" width="0.0700%" height="15" fill="rgb(214,152,51)" fg:x="2576" fg:w="2"/><text x="90.3514%" y="415.50"></text></g><g><title>filemap_alloc_folio (5 samples, 0.17%)</title><rect x="90.0315%" y="485" width="0.1749%" height="15" fill="rgb(251,227,43)" fg:x="2574" fg:w="5"/><text x="90.2815%" y="495.50"></text></g><g><title>folio_alloc (5 samples, 0.17%)</title><rect x="90.0315%" y="469" width="0.1749%" height="15" fill="rgb(241,96,17)" fg:x="2574" fg:w="5"/><text x="90.2815%" y="479.50"></text></g><g><title>alloc_pages_mpol (5 samples, 0.17%)</title><rect x="90.0315%" y="453" width="0.1749%" height="15" fill="rgb(234,198,43)" fg:x="2574" fg:w="5"/><text x="90.2815%" y="463.50"></text></g><g><title>__alloc_pages (4 samples, 0.14%)</title><rect x="90.0665%" y="437" width="0.1399%" height="15" fill="rgb(220,108,29)" fg:x="2575" fg:w="4"/><text x="90.3165%" y="447.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.14%)</title><rect x="90.0665%" y="421" width="0.1399%" height="15" fill="rgb(226,163,33)" fg:x="2575" fg:w="4"/><text x="90.3165%" y="431.50"></text></g><g><title>rmqueue (1 samples, 0.03%)</title><rect x="90.1714%" y="405" width="0.0350%" height="15" fill="rgb(205,194,45)" fg:x="2578" fg:w="1"/><text x="90.4214%" y="415.50"></text></g><g><title>__rmqueue_pcplist (1 samples, 0.03%)</title><rect x="90.1714%" y="389" width="0.0350%" height="15" fill="rgb(206,143,44)" fg:x="2578" fg:w="1"/><text x="90.4214%" y="399.50"></text></g><g><title>rmqueue_bulk (1 samples, 0.03%)</title><rect x="90.1714%" y="373" width="0.0350%" height="15" fill="rgb(236,136,36)" fg:x="2578" fg:w="1"/><text x="90.4214%" y="383.50"></text></g><g><title>ext4_map_blocks (1 samples, 0.03%)</title><rect x="90.2413%" y="437" width="0.0350%" height="15" fill="rgb(249,172,42)" fg:x="2580" fg:w="1"/><text x="90.4913%" y="447.50"></text></g><g><title>ext4_es_lookup_extent (1 samples, 0.03%)</title><rect x="90.2413%" y="421" width="0.0350%" height="15" fill="rgb(216,139,23)" fg:x="2580" fg:w="1"/><text x="90.4913%" y="431.50"></text></g><g><title>ext4_mpage_readpages (3 samples, 0.10%)</title><rect x="90.2064%" y="453" width="0.1049%" height="15" fill="rgb(207,166,20)" fg:x="2579" fg:w="3"/><text x="90.4564%" y="463.50"></text></g><g><title>memset_orig (1 samples, 0.03%)</title><rect x="90.2763%" y="437" width="0.0350%" height="15" fill="rgb(210,209,22)" fg:x="2581" fg:w="1"/><text x="90.5263%" y="447.50"></text></g><g><title>__do_fault (20 samples, 0.70%)</title><rect x="89.6467%" y="565" width="0.6995%" height="15" fill="rgb(232,118,20)" fg:x="2563" fg:w="20"/><text x="89.8967%" y="575.50"></text></g><g><title>filemap_fault (20 samples, 0.70%)</title><rect x="89.6467%" y="549" width="0.6995%" height="15" fill="rgb(238,113,42)" fg:x="2563" fg:w="20"/><text x="89.8967%" y="559.50"></text></g><g><title>do_sync_mmap_readahead (17 samples, 0.59%)</title><rect x="89.7517%" y="533" width="0.5946%" height="15" fill="rgb(231,42,5)" fg:x="2566" fg:w="17"/><text x="90.0017%" y="543.50"></text></g><g><title>page_cache_ra_order (17 samples, 0.59%)</title><rect x="89.7517%" y="517" width="0.5946%" height="15" fill="rgb(243,166,24)" fg:x="2566" fg:w="17"/><text x="90.0017%" y="527.50"></text></g><g><title>page_cache_ra_unbounded (16 samples, 0.56%)</title><rect x="89.7866%" y="501" width="0.5596%" height="15" fill="rgb(237,226,12)" fg:x="2567" fg:w="16"/><text x="90.0366%" y="511.50"></text></g><g><title>read_pages (4 samples, 0.14%)</title><rect x="90.2064%" y="485" width="0.1399%" height="15" fill="rgb(229,133,24)" fg:x="2579" fg:w="4"/><text x="90.4564%" y="495.50"></text></g><g><title>ext4_readahead (4 samples, 0.14%)</title><rect x="90.2064%" y="469" width="0.1399%" height="15" fill="rgb(238,33,43)" fg:x="2579" fg:w="4"/><text x="90.4564%" y="479.50"></text></g><g><title>xa_load (1 samples, 0.03%)</title><rect x="90.3113%" y="453" width="0.0350%" height="15" fill="rgb(227,59,38)" fg:x="2582" fg:w="1"/><text x="90.5613%" y="463.50"></text></g><g><title>_compound_head (1 samples, 0.03%)</title><rect x="90.3463%" y="565" width="0.0350%" height="15" fill="rgb(230,97,0)" fg:x="2583" fg:w="1"/><text x="90.5963%" y="575.50"></text></g><g><title>ext4_nonda_switch (1 samples, 0.03%)</title><rect x="90.3813%" y="549" width="0.0350%" height="15" fill="rgb(250,173,50)" fg:x="2584" fg:w="1"/><text x="90.6313%" y="559.50"></text></g><g><title>ext4_da_reserve_space (1 samples, 0.03%)</title><rect x="90.4162%" y="469" width="0.0350%" height="15" fill="rgb(240,15,50)" fg:x="2585" fg:w="1"/><text x="90.6662%" y="479.50"></text></g><g><title>ext4_claim_free_clusters (1 samples, 0.03%)</title><rect x="90.4162%" y="453" width="0.0350%" height="15" fill="rgb(221,93,22)" fg:x="2585" fg:w="1"/><text x="90.6662%" y="463.50"></text></g><g><title>percpu_counter_add_batch (1 samples, 0.03%)</title><rect x="90.4162%" y="437" width="0.0350%" height="15" fill="rgb(245,180,53)" fg:x="2585" fg:w="1"/><text x="90.6662%" y="447.50"></text></g><g><title>__es_remove_extent (2 samples, 0.07%)</title><rect x="90.4862%" y="453" width="0.0700%" height="15" fill="rgb(231,88,51)" fg:x="2587" fg:w="2"/><text x="90.7362%" y="463.50"></text></g><g><title>ext4_es_can_be_merged.isra.0 (1 samples, 0.03%)</title><rect x="90.5561%" y="453" width="0.0350%" height="15" fill="rgb(240,58,21)" fg:x="2589" fg:w="1"/><text x="90.8061%" y="463.50"></text></g><g><title>ext4_da_get_block_prep (6 samples, 0.21%)</title><rect x="90.4162%" y="501" width="0.2099%" height="15" fill="rgb(237,21,10)" fg:x="2585" fg:w="6"/><text x="90.6662%" y="511.50"></text></g><g><title>ext4_da_map_blocks.constprop.0 (6 samples, 0.21%)</title><rect x="90.4162%" y="485" width="0.2099%" height="15" fill="rgb(218,43,11)" fg:x="2585" fg:w="6"/><text x="90.6662%" y="495.50"></text></g><g><title>ext4_es_insert_delayed_block (5 samples, 0.17%)</title><rect x="90.4512%" y="469" width="0.1749%" height="15" fill="rgb(218,221,29)" fg:x="2586" fg:w="5"/><text x="90.7012%" y="479.50"></text></g><g><title>rb_prev (1 samples, 0.03%)</title><rect x="90.5911%" y="453" width="0.0350%" height="15" fill="rgb(214,118,42)" fg:x="2590" fg:w="1"/><text x="90.8411%" y="463.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="90.6261%" y="485" width="0.0350%" height="15" fill="rgb(251,200,26)" fg:x="2591" fg:w="1"/><text x="90.8761%" y="495.50"></text></g><g><title>__memcg_slab_post_alloc_hook (1 samples, 0.03%)</title><rect x="90.7310%" y="437" width="0.0350%" height="15" fill="rgb(237,101,39)" fg:x="2594" fg:w="1"/><text x="90.9810%" y="447.50"></text></g><g><title>__memcg_slab_post_alloc_hook (2 samples, 0.07%)</title><rect x="90.8010%" y="421" width="0.0700%" height="15" fill="rgb(251,117,11)" fg:x="2596" fg:w="2"/><text x="91.0510%" y="431.50"></text></g><g><title>mod_objcg_state (1 samples, 0.03%)</title><rect x="90.8360%" y="405" width="0.0350%" height="15" fill="rgb(216,223,23)" fg:x="2597" fg:w="1"/><text x="91.0860%" y="415.50"></text></g><g><title>folio_create_buffers (8 samples, 0.28%)</title><rect x="90.6261%" y="501" width="0.2798%" height="15" fill="rgb(251,54,12)" fg:x="2591" fg:w="8"/><text x="90.8761%" y="511.50"></text></g><g><title>create_empty_buffers (7 samples, 0.24%)</title><rect x="90.6611%" y="485" width="0.2448%" height="15" fill="rgb(254,176,54)" fg:x="2592" fg:w="7"/><text x="90.9111%" y="495.50"></text></g><g><title>folio_alloc_buffers (5 samples, 0.17%)</title><rect x="90.7310%" y="469" width="0.1749%" height="15" fill="rgb(210,32,8)" fg:x="2594" fg:w="5"/><text x="90.9810%" y="479.50"></text></g><g><title>alloc_buffer_head (5 samples, 0.17%)</title><rect x="90.7310%" y="453" width="0.1749%" height="15" fill="rgb(235,52,38)" fg:x="2594" fg:w="5"/><text x="90.9810%" y="463.50"></text></g><g><title>kmem_cache_alloc (4 samples, 0.14%)</title><rect x="90.7660%" y="437" width="0.1399%" height="15" fill="rgb(231,4,44)" fg:x="2595" fg:w="4"/><text x="91.0160%" y="447.50"></text></g><g><title>consume_obj_stock (1 samples, 0.03%)</title><rect x="90.8709%" y="421" width="0.0350%" height="15" fill="rgb(249,2,32)" fg:x="2598" fg:w="1"/><text x="91.1209%" y="431.50"></text></g><g><title>__xa_set_mark (2 samples, 0.07%)</title><rect x="90.9059%" y="469" width="0.0700%" height="15" fill="rgb(224,65,26)" fg:x="2599" fg:w="2"/><text x="91.1559%" y="479.50"></text></g><g><title>xas_load (2 samples, 0.07%)</title><rect x="90.9059%" y="453" width="0.0700%" height="15" fill="rgb(250,73,40)" fg:x="2599" fg:w="2"/><text x="91.1559%" y="463.50"></text></g><g><title>xas_descend (2 samples, 0.07%)</title><rect x="90.9059%" y="437" width="0.0700%" height="15" fill="rgb(253,177,16)" fg:x="2599" fg:w="2"/><text x="91.1559%" y="447.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.03%)</title><rect x="90.9759%" y="453" width="0.0350%" height="15" fill="rgb(217,32,34)" fg:x="2601" fg:w="1"/><text x="91.2259%" y="463.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="90.9759%" y="437" width="0.0350%" height="15" fill="rgb(212,7,10)" fg:x="2601" fg:w="1"/><text x="91.2259%" y="447.50"></text></g><g><title>__mod_memcg_lruvec_state (1 samples, 0.03%)</title><rect x="90.9759%" y="421" width="0.0350%" height="15" fill="rgb(245,89,8)" fg:x="2601" fg:w="1"/><text x="91.2259%" y="431.50"></text></g><g><title>__mod_zone_page_state (1 samples, 0.03%)</title><rect x="91.0108%" y="453" width="0.0350%" height="15" fill="rgb(237,16,53)" fg:x="2602" fg:w="1"/><text x="91.2608%" y="463.50"></text></g><g><title>__block_write_begin_int (20 samples, 0.70%)</title><rect x="90.4162%" y="517" width="0.6995%" height="15" fill="rgb(250,204,30)" fg:x="2585" fg:w="20"/><text x="90.6662%" y="527.50"></text></g><g><title>mark_buffer_dirty (6 samples, 0.21%)</title><rect x="90.9059%" y="501" width="0.2099%" height="15" fill="rgb(208,77,27)" fg:x="2599" fg:w="6"/><text x="91.1559%" y="511.50"></text></g><g><title>__folio_mark_dirty (6 samples, 0.21%)</title><rect x="90.9059%" y="485" width="0.2099%" height="15" fill="rgb(250,204,28)" fg:x="2599" fg:w="6"/><text x="91.1559%" y="495.50"></text></g><g><title>folio_account_dirtied (4 samples, 0.14%)</title><rect x="90.9759%" y="469" width="0.1399%" height="15" fill="rgb(244,63,21)" fg:x="2601" fg:w="4"/><text x="91.2259%" y="479.50"></text></g><g><title>percpu_counter_add_batch (2 samples, 0.07%)</title><rect x="91.0458%" y="453" width="0.0700%" height="15" fill="rgb(236,85,44)" fg:x="2603" fg:w="2"/><text x="91.2958%" y="463.50"></text></g><g><title>block_page_mkwrite (21 samples, 0.73%)</title><rect x="90.4162%" y="533" width="0.7345%" height="15" fill="rgb(215,98,4)" fg:x="2585" fg:w="21"/><text x="90.6662%" y="543.50"></text></g><g><title>folio_create_buffers (1 samples, 0.03%)</title><rect x="91.1158%" y="517" width="0.0350%" height="15" fill="rgb(235,38,11)" fg:x="2605" fg:w="1"/><text x="91.3658%" y="527.50"></text></g><g><title>down_read (1 samples, 0.03%)</title><rect x="91.1508%" y="533" width="0.0350%" height="15" fill="rgb(254,186,25)" fg:x="2606" fg:w="1"/><text x="91.4008%" y="543.50"></text></g><g><title>ext4_inode_journal_mode (2 samples, 0.07%)</title><rect x="91.1857%" y="533" width="0.0700%" height="15" fill="rgb(225,55,31)" fg:x="2607" fg:w="2"/><text x="91.4357%" y="543.50"></text></g><g><title>__ext4_mark_inode_dirty (1 samples, 0.03%)</title><rect x="91.2557%" y="485" width="0.0350%" height="15" fill="rgb(211,15,21)" fg:x="2609" fg:w="1"/><text x="91.5057%" y="495.50"></text></g><g><title>do_page_mkwrite (27 samples, 0.94%)</title><rect x="90.3813%" y="565" width="0.9444%" height="15" fill="rgb(215,187,41)" fg:x="2584" fg:w="27"/><text x="90.6313%" y="575.50"></text></g><g><title>ext4_page_mkwrite (26 samples, 0.91%)</title><rect x="90.4162%" y="549" width="0.9094%" height="15" fill="rgb(248,69,32)" fg:x="2585" fg:w="26"/><text x="90.6662%" y="559.50"></text></g><g><title>file_update_time (2 samples, 0.07%)</title><rect x="91.2557%" y="533" width="0.0700%" height="15" fill="rgb(252,102,52)" fg:x="2609" fg:w="2"/><text x="91.5057%" y="543.50"></text></g><g><title>generic_update_time (2 samples, 0.07%)</title><rect x="91.2557%" y="517" width="0.0700%" height="15" fill="rgb(253,140,32)" fg:x="2609" fg:w="2"/><text x="91.5057%" y="527.50"></text></g><g><title>__mark_inode_dirty (2 samples, 0.07%)</title><rect x="91.2557%" y="501" width="0.0700%" height="15" fill="rgb(216,56,42)" fg:x="2609" fg:w="2"/><text x="91.5057%" y="511.50"></text></g><g><title>ext4_dirty_inode (1 samples, 0.03%)</title><rect x="91.2907%" y="485" width="0.0350%" height="15" fill="rgb(216,184,14)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="495.50"></text></g><g><title>__ext4_mark_inode_dirty (1 samples, 0.03%)</title><rect x="91.2907%" y="469" width="0.0350%" height="15" fill="rgb(237,187,27)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="479.50"></text></g><g><title>ext4_mark_iloc_dirty (1 samples, 0.03%)</title><rect x="91.2907%" y="453" width="0.0350%" height="15" fill="rgb(219,65,3)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="463.50"></text></g><g><title>ext4_do_update_inode.isra.0 (1 samples, 0.03%)</title><rect x="91.2907%" y="437" width="0.0350%" height="15" fill="rgb(245,83,25)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="447.50"></text></g><g><title>ext4_fill_raw_inode (1 samples, 0.03%)</title><rect x="91.2907%" y="421" width="0.0350%" height="15" fill="rgb(214,205,45)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="431.50"></text></g><g><title>ext4_inode_csum_set (1 samples, 0.03%)</title><rect x="91.2907%" y="405" width="0.0350%" height="15" fill="rgb(241,20,18)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="415.50"></text></g><g><title>ext4_inode_csum (1 samples, 0.03%)</title><rect x="91.2907%" y="389" width="0.0350%" height="15" fill="rgb(232,163,23)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="399.50"></text></g><g><title>crypto_shash_update (1 samples, 0.03%)</title><rect x="91.2907%" y="373" width="0.0350%" height="15" fill="rgb(214,5,46)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="383.50"></text></g><g><title>crc32c_pcl_intel_update (1 samples, 0.03%)</title><rect x="91.2907%" y="357" width="0.0350%" height="15" fill="rgb(229,78,17)" fg:x="2610" fg:w="1"/><text x="91.5407%" y="367.50"></text></g><g><title>handle_mm_fault (50 samples, 1.75%)</title><rect x="89.6467%" y="629" width="1.7489%" height="15" fill="rgb(248,89,10)" fg:x="2563" fg:w="50"/><text x="89.8967%" y="639.50"></text></g><g><title>__handle_mm_fault (50 samples, 1.75%)</title><rect x="89.6467%" y="613" width="1.7489%" height="15" fill="rgb(248,54,15)" fg:x="2563" fg:w="50"/><text x="89.8967%" y="623.50"></text></g><g><title>handle_pte_fault (50 samples, 1.75%)</title><rect x="89.6467%" y="597" width="1.7489%" height="15" fill="rgb(223,116,6)" fg:x="2563" fg:w="50"/><text x="89.8967%" y="607.50"></text></g><g><title>do_fault (50 samples, 1.75%)</title><rect x="89.6467%" y="581" width="1.7489%" height="15" fill="rgb(205,125,38)" fg:x="2563" fg:w="50"/><text x="89.8967%" y="591.50"></text></g><g><title>fault_dirty_shared_page (2 samples, 0.07%)</title><rect x="91.3256%" y="565" width="0.0700%" height="15" fill="rgb(251,78,38)" fg:x="2611" fg:w="2"/><text x="91.5756%" y="575.50"></text></g><g><title>balance_dirty_pages_ratelimited (2 samples, 0.07%)</title><rect x="91.3256%" y="549" width="0.0700%" height="15" fill="rgb(253,78,28)" fg:x="2611" fg:w="2"/><text x="91.5756%" y="559.50"></text></g><g><title>balance_dirty_pages_ratelimited_flags (2 samples, 0.07%)</title><rect x="91.3256%" y="533" width="0.0700%" height="15" fill="rgb(209,120,3)" fg:x="2611" fg:w="2"/><text x="91.5756%" y="543.50"></text></g><g><title>do_user_addr_fault (52 samples, 1.82%)</title><rect x="89.6467%" y="645" width="1.8188%" height="15" fill="rgb(238,229,9)" fg:x="2563" fg:w="52"/><text x="89.8967%" y="655.50">d..</text></g><g><title>lock_vma_under_rcu (2 samples, 0.07%)</title><rect x="91.3956%" y="629" width="0.0700%" height="15" fill="rgb(253,159,18)" fg:x="2613" fg:w="2"/><text x="91.6456%" y="639.50"></text></g><g><title>mas_walk (2 samples, 0.07%)</title><rect x="91.3956%" y="613" width="0.0700%" height="15" fill="rgb(244,42,34)" fg:x="2613" fg:w="2"/><text x="91.6456%" y="623.50"></text></g><g><title>asm_exc_page_fault (58 samples, 2.03%)</title><rect x="89.6118%" y="677" width="2.0287%" height="15" fill="rgb(224,8,7)" fg:x="2562" fg:w="58"/><text x="89.8618%" y="687.50">a..</text></g><g><title>exc_page_fault (58 samples, 2.03%)</title><rect x="89.6118%" y="661" width="2.0287%" height="15" fill="rgb(210,201,45)" fg:x="2562" fg:w="58"/><text x="89.8618%" y="671.50">e..</text></g><g><title>irqentry_exit (5 samples, 0.17%)</title><rect x="91.4655%" y="645" width="0.1749%" height="15" fill="rgb(252,185,21)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="655.50"></text></g><g><title>irqentry_exit_to_user_mode (5 samples, 0.17%)</title><rect x="91.4655%" y="629" width="0.1749%" height="15" fill="rgb(223,131,1)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="639.50"></text></g><g><title>schedule (5 samples, 0.17%)</title><rect x="91.4655%" y="613" width="0.1749%" height="15" fill="rgb(245,141,16)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="623.50"></text></g><g><title>__schedule (5 samples, 0.17%)</title><rect x="91.4655%" y="597" width="0.1749%" height="15" fill="rgb(229,55,45)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="607.50"></text></g><g><title>finish_task_switch.isra.0 (5 samples, 0.17%)</title><rect x="91.4655%" y="581" width="0.1749%" height="15" fill="rgb(208,92,15)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="591.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.17%)</title><rect x="91.4655%" y="565" width="0.1749%" height="15" fill="rgb(234,185,47)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="575.50"></text></g><g><title>perf_ctx_enable (5 samples, 0.17%)</title><rect x="91.4655%" y="549" width="0.1749%" height="15" fill="rgb(253,104,50)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="559.50"></text></g><g><title>x86_pmu_enable (5 samples, 0.17%)</title><rect x="91.4655%" y="533" width="0.1749%" height="15" fill="rgb(205,70,7)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="543.50"></text></g><g><title>intel_pmu_enable_all (5 samples, 0.17%)</title><rect x="91.4655%" y="517" width="0.1749%" height="15" fill="rgb(240,178,43)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="527.50"></text></g><g><title>native_write_msr (5 samples, 0.17%)</title><rect x="91.4655%" y="501" width="0.1749%" height="15" fill="rgb(214,112,2)" fg:x="2615" fg:w="5"/><text x="91.7155%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (60 samples, 2.10%)</title><rect x="89.5768%" y="725" width="2.0986%" height="15" fill="rgb(206,46,17)" fg:x="2561" fg:w="60"/><text x="89.8268%" y="735.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (60 samples, 2.10%)</title><rect x="89.5768%" y="709" width="2.0986%" height="15" fill="rgb(225,220,16)" fg:x="2561" fg:w="60"/><text x="89.8268%" y="719.50">c..</text></g><g><title>__memcpy_avx_unaligned_erms (60 samples, 2.10%)</title><rect x="89.5768%" y="693" width="2.0986%" height="15" fill="rgb(238,65,40)" fg:x="2561" fg:w="60"/><text x="89.8268%" y="703.50">_..</text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="91.6404%" y="677" width="0.0350%" height="15" fill="rgb(230,151,21)" fg:x="2620" fg:w="1"/><text x="91.8904%" y="687.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.03%)</title><rect x="91.6754%" y="725" width="0.0350%" height="15" fill="rgb(218,58,49)" fg:x="2621" fg:w="1"/><text x="91.9254%" y="735.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="91.6754%" y="709" width="0.0350%" height="15" fill="rgb(219,179,14)" fg:x="2621" fg:w="1"/><text x="91.9254%" y="719.50"></text></g><g><title>core::slice::index::get_offset_len_mut_noubcheck (1 samples, 0.03%)</title><rect x="91.6754%" y="693" width="0.0350%" height="15" fill="rgb(223,72,1)" fg:x="2621" fg:w="1"/><text x="91.9254%" y="703.50"></text></g><g><title>core::slice::index::get_mut_noubcheck (1 samples, 0.03%)</title><rect x="91.6754%" y="677" width="0.0350%" height="15" fill="rgb(238,126,10)" fg:x="2621" fg:w="1"/><text x="91.9254%" y="687.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::write_page_header (9 samples, 0.31%)</title><rect x="91.7104%" y="725" width="0.3148%" height="15" fill="rgb(224,206,38)" fg:x="2622" fg:w="9"/><text x="91.9604%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9 samples, 0.31%)</title><rect x="91.7104%" y="709" width="0.3148%" height="15" fill="rgb(212,201,54)" fg:x="2622" fg:w="9"/><text x="91.9604%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.31%)</title><rect x="91.7104%" y="693" width="0.3148%" height="15" fill="rgb(218,154,48)" fg:x="2622" fg:w="9"/><text x="91.9604%" y="703.50"></text></g><g><title>__do_fault (1 samples, 0.03%)</title><rect x="92.0602%" y="565" width="0.0350%" height="15" fill="rgb(232,93,24)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="575.50"></text></g><g><title>filemap_fault (1 samples, 0.03%)</title><rect x="92.0602%" y="549" width="0.0350%" height="15" fill="rgb(245,30,21)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="559.50"></text></g><g><title>page_cache_async_ra (1 samples, 0.03%)</title><rect x="92.0602%" y="533" width="0.0350%" height="15" fill="rgb(242,148,29)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="543.50"></text></g><g><title>ondemand_readahead (1 samples, 0.03%)</title><rect x="92.0602%" y="517" width="0.0350%" height="15" fill="rgb(244,153,54)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="527.50"></text></g><g><title>page_cache_ra_order (1 samples, 0.03%)</title><rect x="92.0602%" y="501" width="0.0350%" height="15" fill="rgb(252,87,22)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="511.50"></text></g><g><title>page_cache_ra_unbounded (1 samples, 0.03%)</title><rect x="92.0602%" y="485" width="0.0350%" height="15" fill="rgb(210,51,29)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="495.50"></text></g><g><title>filemap_alloc_folio (1 samples, 0.03%)</title><rect x="92.0602%" y="469" width="0.0350%" height="15" fill="rgb(242,136,47)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="479.50"></text></g><g><title>folio_alloc (1 samples, 0.03%)</title><rect x="92.0602%" y="453" width="0.0350%" height="15" fill="rgb(238,68,4)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="463.50"></text></g><g><title>alloc_pages_mpol (1 samples, 0.03%)</title><rect x="92.0602%" y="437" width="0.0350%" height="15" fill="rgb(242,161,30)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="447.50"></text></g><g><title>__alloc_pages (1 samples, 0.03%)</title><rect x="92.0602%" y="421" width="0.0350%" height="15" fill="rgb(218,58,44)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="431.50"></text></g><g><title>__next_zones_zonelist (1 samples, 0.03%)</title><rect x="92.0602%" y="405" width="0.0350%" height="15" fill="rgb(252,125,32)" fg:x="2632" fg:w="1"/><text x="92.3102%" y="415.50"></text></g><g><title>ext4_da_map_blocks.constprop.0 (1 samples, 0.03%)</title><rect x="92.0951%" y="485" width="0.0350%" height="15" fill="rgb(219,178,0)" fg:x="2633" fg:w="1"/><text x="92.3451%" y="495.50"></text></g><g><title>ext4_es_lookup_extent (1 samples, 0.03%)</title><rect x="92.0951%" y="469" width="0.0350%" height="15" fill="rgb(213,152,7)" fg:x="2633" fg:w="1"/><text x="92.3451%" y="479.50"></text></g><g><title>ext4_da_get_block_prep (2 samples, 0.07%)</title><rect x="92.0951%" y="501" width="0.0700%" height="15" fill="rgb(249,109,34)" fg:x="2633" fg:w="2"/><text x="92.3451%" y="511.50"></text></g><g><title>ext4_es_insert_delayed_block (1 samples, 0.03%)</title><rect x="92.1301%" y="485" width="0.0350%" height="15" fill="rgb(232,96,21)" fg:x="2634" fg:w="1"/><text x="92.3801%" y="495.50"></text></g><g><title>folio_create_buffers (1 samples, 0.03%)</title><rect x="92.1651%" y="501" width="0.0350%" height="15" fill="rgb(228,27,39)" fg:x="2635" fg:w="1"/><text x="92.4151%" y="511.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="92.1651%" y="485" width="0.0350%" height="15" fill="rgb(211,182,52)" fg:x="2635" fg:w="1"/><text x="92.4151%" y="495.50"></text></g><g><title>__lruvec_stat_mod_folio (1 samples, 0.03%)</title><rect x="92.2001%" y="469" width="0.0350%" height="15" fill="rgb(234,178,38)" fg:x="2636" fg:w="1"/><text x="92.4501%" y="479.50"></text></g><g><title>do_page_mkwrite (5 samples, 0.17%)</title><rect x="92.0951%" y="565" width="0.1749%" height="15" fill="rgb(221,111,3)" fg:x="2633" fg:w="5"/><text x="92.3451%" y="575.50"></text></g><g><title>ext4_page_mkwrite (5 samples, 0.17%)</title><rect x="92.0951%" y="549" width="0.1749%" height="15" fill="rgb(228,175,21)" fg:x="2633" fg:w="5"/><text x="92.3451%" y="559.50"></text></g><g><title>block_page_mkwrite (5 samples, 0.17%)</title><rect x="92.0951%" y="533" width="0.1749%" height="15" fill="rgb(228,174,43)" fg:x="2633" fg:w="5"/><text x="92.3451%" y="543.50"></text></g><g><title>__block_write_begin_int (5 samples, 0.17%)</title><rect x="92.0951%" y="517" width="0.1749%" height="15" fill="rgb(211,191,0)" fg:x="2633" fg:w="5"/><text x="92.3451%" y="527.50"></text></g><g><title>mark_buffer_dirty (2 samples, 0.07%)</title><rect x="92.2001%" y="501" width="0.0700%" height="15" fill="rgb(253,117,3)" fg:x="2636" fg:w="2"/><text x="92.4501%" y="511.50"></text></g><g><title>__folio_mark_dirty (2 samples, 0.07%)</title><rect x="92.2001%" y="485" width="0.0700%" height="15" fill="rgb(241,127,19)" fg:x="2636" fg:w="2"/><text x="92.4501%" y="495.50"></text></g><g><title>__xa_set_mark (1 samples, 0.03%)</title><rect x="92.2350%" y="469" width="0.0350%" height="15" fill="rgb(218,103,12)" fg:x="2637" fg:w="1"/><text x="92.4850%" y="479.50"></text></g><g><title>xas_set_mark (1 samples, 0.03%)</title><rect x="92.2350%" y="453" width="0.0350%" height="15" fill="rgb(236,214,43)" fg:x="2637" fg:w="1"/><text x="92.4850%" y="463.50"></text></g><g><title>fault_dirty_shared_page (1 samples, 0.03%)</title><rect x="92.2700%" y="565" width="0.0350%" height="15" fill="rgb(244,144,19)" fg:x="2638" fg:w="1"/><text x="92.5200%" y="575.50"></text></g><g><title>folio_mark_dirty (1 samples, 0.03%)</title><rect x="92.2700%" y="549" width="0.0350%" height="15" fill="rgb(246,188,10)" fg:x="2638" fg:w="1"/><text x="92.5200%" y="559.50"></text></g><g><title>ext4_dirty_folio (1 samples, 0.03%)</title><rect x="92.2700%" y="533" width="0.0350%" height="15" fill="rgb(212,193,33)" fg:x="2638" fg:w="1"/><text x="92.5200%" y="543.50"></text></g><g><title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="92.2700%" y="517" width="0.0350%" height="15" fill="rgb(241,51,29)" fg:x="2638" fg:w="1"/><text x="92.5200%" y="527.50"></text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::insert_value (79 samples, 2.76%)</title><rect x="89.5768%" y="741" width="2.7632%" height="15" fill="rgb(211,58,19)" fg:x="2561" fg:w="79"/><text x="89.8268%" y="751.50">mm..</text></g><g><title>mmap_payload_storage::slotted_page::SlottedPageMmap::write_slot (9 samples, 0.31%)</title><rect x="92.0252%" y="725" width="0.3148%" height="15" fill="rgb(229,111,26)" fg:x="2631" fg:w="9"/><text x="92.2752%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (9 samples, 0.31%)</title><rect x="92.0252%" y="709" width="0.3148%" height="15" fill="rgb(213,115,40)" fg:x="2631" fg:w="9"/><text x="92.2752%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.31%)</title><rect x="92.0252%" y="693" width="0.3148%" height="15" fill="rgb(209,56,44)" fg:x="2631" fg:w="9"/><text x="92.2752%" y="703.50"></text></g><g><title>asm_exc_page_fault (8 samples, 0.28%)</title><rect x="92.0602%" y="677" width="0.2798%" height="15" fill="rgb(230,108,32)" fg:x="2632" fg:w="8"/><text x="92.3102%" y="687.50"></text></g><g><title>exc_page_fault (8 samples, 0.28%)</title><rect x="92.0602%" y="661" width="0.2798%" height="15" fill="rgb(216,165,31)" fg:x="2632" fg:w="8"/><text x="92.3102%" y="671.50"></text></g><g><title>do_user_addr_fault (8 samples, 0.28%)</title><rect x="92.0602%" y="645" width="0.2798%" height="15" fill="rgb(218,122,21)" fg:x="2632" fg:w="8"/><text x="92.3102%" y="655.50"></text></g><g><title>handle_mm_fault (8 samples, 0.28%)</title><rect x="92.0602%" y="629" width="0.2798%" height="15" fill="rgb(223,224,47)" fg:x="2632" fg:w="8"/><text x="92.3102%" y="639.50"></text></g><g><title>__handle_mm_fault (8 samples, 0.28%)</title><rect x="92.0602%" y="613" width="0.2798%" height="15" fill="rgb(238,102,44)" fg:x="2632" fg:w="8"/><text x="92.3102%" y="623.50"></text></g><g><title>handle_pte_fault (8 samples, 0.28%)</title><rect x="92.0602%" y="597" width="0.2798%" height="15" fill="rgb(236,46,40)" fg:x="2632" fg:w="8"/><text x="92.3102%" y="607.50"></text></g><g><title>do_fault (8 samples, 0.28%)</title><rect x="92.0602%" y="581" width="0.2798%" height="15" fill="rgb(247,202,50)" fg:x="2632" fg:w="8"/><text x="92.3102%" y="591.50"></text></g><g><title>fput (1 samples, 0.03%)</title><rect x="92.3050%" y="565" width="0.0350%" height="15" fill="rgb(209,99,20)" fg:x="2639" fg:w="1"/><text x="92.5550%" y="575.50"></text></g><g><title>mmap_payload_storage::payload_storage::PayloadStorage::put_payload (449 samples, 15.70%)</title><rect x="76.6702%" y="757" width="15.7048%" height="15" fill="rgb(252,27,34)" fg:x="2192" fg:w="449"/><text x="76.9202%" y="767.50">mmap_payload_storage::pa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (1 samples, 0.03%)</title><rect x="92.3400%" y="741" width="0.0350%" height="15" fill="rgb(215,206,23)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="751.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 0.03%)</title><rect x="92.3400%" y="725" width="0.0350%" height="15" fill="rgb(212,135,36)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="735.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (1 samples, 0.03%)</title><rect x="92.3400%" y="709" width="0.0350%" height="15" fill="rgb(240,189,1)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="719.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.03%)</title><rect x="92.3400%" y="693" width="0.0350%" height="15" fill="rgb(242,56,20)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.03%)</title><rect x="92.3400%" y="677" width="0.0350%" height="15" fill="rgb(247,132,33)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="687.50"></text></g><g><title>&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="92.3400%" y="661" width="0.0350%" height="15" fill="rgb(208,149,11)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="671.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="92.3400%" y="645" width="0.0350%" height="15" fill="rgb(211,33,11)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="655.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.03%)</title><rect x="92.3400%" y="629" width="0.0350%" height="15" fill="rgb(221,29,38)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="639.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.03%)</title><rect x="92.3400%" y="613" width="0.0350%" height="15" fill="rgb(206,182,49)" fg:x="2640" fg:w="1"/><text x="92.5900%" y="623.50"></text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::contains_key (1 samples, 0.03%)</title><rect x="92.3750%" y="757" width="0.0350%" height="15" fill="rgb(216,140,1)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="767.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (1 samples, 0.03%)</title><rect x="92.3750%" y="741" width="0.0350%" height="15" fill="rgb(232,57,40)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="751.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1 samples, 0.03%)</title><rect x="92.3750%" y="725" width="0.0350%" height="15" fill="rgb(224,186,18)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="735.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.03%)</title><rect x="92.3750%" y="709" width="0.0350%" height="15" fill="rgb(215,121,11)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="719.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.03%)</title><rect x="92.3750%" y="693" width="0.0350%" height="15" fill="rgb(245,147,10)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="703.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.03%)</title><rect x="92.3750%" y="677" width="0.0350%" height="15" fill="rgb(238,153,13)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="687.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 0.03%)</title><rect x="92.3750%" y="661" width="0.0350%" height="15" fill="rgb(233,108,0)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.03%)</title><rect x="92.3750%" y="645" width="0.0350%" height="15" fill="rgb(212,157,17)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="655.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.03%)</title><rect x="92.3750%" y="629" width="0.0350%" height="15" fill="rgb(225,213,38)" fg:x="2641" fg:w="1"/><text x="92.6250%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,Type&gt;::force (1 samples, 0.03%)</title><rect x="92.7247%" y="693" width="0.0350%" height="15" fill="rgb(248,16,11)" fg:x="2651" fg:w="1"/><text x="92.9747%" y="703.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.03%)</title><rect x="92.7247%" y="677" width="0.0350%" height="15" fill="rgb(241,33,4)" fg:x="2651" fg:w="1"/><text x="92.9747%" y="687.50"></text></g><g><title>__memcmp_avx2_movbe (77 samples, 2.69%)</title><rect x="93.5642%" y="597" width="2.6932%" height="15" fill="rgb(222,26,43)" fg:x="2675" fg:w="77"/><text x="93.8142%" y="607.50">__..</text></g><g><title>asm_sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="96.2225%" y="581" width="0.0350%" height="15" fill="rgb(243,29,36)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="591.50"></text></g><g><title>sysvec_reschedule_ipi (1 samples, 0.03%)</title><rect x="96.2225%" y="565" width="0.0350%" height="15" fill="rgb(241,9,27)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="575.50"></text></g><g><title>irqentry_exit (1 samples, 0.03%)</title><rect x="96.2225%" y="549" width="0.0350%" height="15" fill="rgb(205,117,26)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="559.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="96.2225%" y="533" width="0.0350%" height="15" fill="rgb(209,80,39)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="543.50"></text></g><g><title>schedule (1 samples, 0.03%)</title><rect x="96.2225%" y="517" width="0.0350%" height="15" fill="rgb(239,155,6)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="527.50"></text></g><g><title>__schedule (1 samples, 0.03%)</title><rect x="96.2225%" y="501" width="0.0350%" height="15" fill="rgb(212,104,12)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="511.50"></text></g><g><title>pick_next_task (1 samples, 0.03%)</title><rect x="96.2225%" y="485" width="0.0350%" height="15" fill="rgb(234,204,3)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="495.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.03%)</title><rect x="96.2225%" y="469" width="0.0350%" height="15" fill="rgb(251,218,7)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="479.50"></text></g><g><title>put_prev_entity (1 samples, 0.03%)</title><rect x="96.2225%" y="453" width="0.0350%" height="15" fill="rgb(221,81,32)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="463.50"></text></g><g><title>update_curr (1 samples, 0.03%)</title><rect x="96.2225%" y="437" width="0.0350%" height="15" fill="rgb(214,152,26)" fg:x="2751" fg:w="1"/><text x="96.4725%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (92 samples, 3.22%)</title><rect x="93.3193%" y="661" width="3.2179%" height="15" fill="rgb(223,22,3)" fg:x="2668" fg:w="92"/><text x="93.5693%" y="671.50">&lt;al..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (92 samples, 3.22%)</title><rect x="93.3193%" y="645" width="3.2179%" height="15" fill="rgb(207,174,7)" fg:x="2668" fg:w="92"/><text x="93.5693%" y="655.50">&lt;al..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (92 samples, 3.22%)</title><rect x="93.3193%" y="629" width="3.2179%" height="15" fill="rgb(224,19,52)" fg:x="2668" fg:w="92"/><text x="93.5693%" y="639.50">cor..</text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (92 samples, 3.22%)</title><rect x="93.3193%" y="613" width="3.2179%" height="15" fill="rgb(228,24,14)" fg:x="2668" fg:w="92"/><text x="93.5693%" y="623.50">&lt;u8..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (8 samples, 0.28%)</title><rect x="96.2574%" y="597" width="0.2798%" height="15" fill="rgb(230,153,43)" fg:x="2752" fg:w="8"/><text x="96.5074%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="96.5373%" y="661" width="0.1049%" height="15" fill="rgb(231,106,12)" fg:x="2760" fg:w="3"/><text x="96.7873%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.10%)</title><rect x="96.5373%" y="645" width="0.1049%" height="15" fill="rgb(215,92,2)" fg:x="2760" fg:w="3"/><text x="96.7873%" y="655.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (3 samples, 0.10%)</title><rect x="96.5373%" y="629" width="0.1049%" height="15" fill="rgb(249,143,25)" fg:x="2760" fg:w="3"/><text x="96.7873%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (119 samples, 4.16%)</title><rect x="92.5498%" y="725" width="4.1623%" height="15" fill="rgb(252,7,35)" fg:x="2646" fg:w="119"/><text x="92.7998%" y="735.50">alloc..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (117 samples, 4.09%)</title><rect x="92.6198%" y="709" width="4.0923%" height="15" fill="rgb(216,69,40)" fg:x="2648" fg:w="117"/><text x="92.8698%" y="719.50">allo..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (113 samples, 3.95%)</title><rect x="92.7597%" y="693" width="3.9524%" height="15" fill="rgb(240,36,33)" fg:x="2652" fg:w="113"/><text x="93.0097%" y="703.50">allo..</text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (113 samples, 3.95%)</title><rect x="92.7597%" y="677" width="3.9524%" height="15" fill="rgb(231,128,14)" fg:x="2652" fg:w="113"/><text x="93.0097%" y="687.50">allo..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (2 samples, 0.07%)</title><rect x="96.6422%" y="661" width="0.0700%" height="15" fill="rgb(245,143,14)" fg:x="2763" fg:w="2"/><text x="96.8922%" y="671.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (1 samples, 0.03%)</title><rect x="97.7265%" y="677" width="0.0350%" height="15" fill="rgb(222,130,28)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="687.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (1 samples, 0.03%)</title><rect x="97.7265%" y="661" width="0.0350%" height="15" fill="rgb(212,10,48)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="671.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.03%)</title><rect x="97.7265%" y="645" width="0.0350%" height="15" fill="rgb(254,118,45)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="655.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (1 samples, 0.03%)</title><rect x="97.7265%" y="629" width="0.0350%" height="15" fill="rgb(228,6,45)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="639.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (1 samples, 0.03%)</title><rect x="97.7265%" y="613" width="0.0350%" height="15" fill="rgb(241,18,35)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (1 samples, 0.03%)</title><rect x="97.7265%" y="597" width="0.0350%" height="15" fill="rgb(227,214,53)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="607.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (1 samples, 0.03%)</title><rect x="97.7265%" y="581" width="0.0350%" height="15" fill="rgb(224,107,51)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="591.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.03%)</title><rect x="97.7265%" y="565" width="0.0350%" height="15" fill="rgb(248,60,28)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="575.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.03%)</title><rect x="97.7265%" y="549" width="0.0350%" height="15" fill="rgb(249,101,23)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="97.7265%" y="533" width="0.0350%" height="15" fill="rgb(228,51,19)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="97.7265%" y="517" width="0.0350%" height="15" fill="rgb(213,20,6)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="527.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="97.7265%" y="501" width="0.0350%" height="15" fill="rgb(212,124,10)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="511.50"></text></g><g><title>__rust_alloc (1 samples, 0.03%)</title><rect x="97.7265%" y="485" width="0.0350%" height="15" fill="rgb(248,3,40)" fg:x="2794" fg:w="1"/><text x="97.9765%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert::_{{closure}} (2 samples, 0.07%)</title><rect x="97.7265%" y="693" width="0.0700%" height="15" fill="rgb(223,178,23)" fg:x="2794" fg:w="2"/><text x="97.9765%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_mut (1 samples, 0.03%)</title><rect x="97.7615%" y="677" width="0.0350%" height="15" fill="rgb(240,132,45)" fg:x="2795" fg:w="1"/><text x="98.0115%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::DormantMut,K,V,NodeType&gt;,HandleType&gt;::awaken (1 samples, 0.03%)</title><rect x="97.7964%" y="693" width="0.0350%" height="15" fill="rgb(245,164,36)" fg:x="2796" fg:w="1"/><text x="98.0464%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (3 samples, 0.10%)</title><rect x="97.8314%" y="693" width="0.1049%" height="15" fill="rgb(231,188,53)" fg:x="2797" fg:w="3"/><text x="98.0814%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (3 samples, 0.10%)</title><rect x="97.8314%" y="677" width="0.1049%" height="15" fill="rgb(237,198,39)" fg:x="2797" fg:w="3"/><text x="98.0814%" y="687.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (3 samples, 0.10%)</title><rect x="97.8314%" y="661" width="0.1049%" height="15" fill="rgb(223,120,35)" fg:x="2797" fg:w="3"/><text x="98.0814%" y="671.50"></text></g><g><title>core::intrinsics::copy (3 samples, 0.10%)</title><rect x="97.8314%" y="645" width="0.1049%" height="15" fill="rgb(253,107,49)" fg:x="2797" fg:w="3"/><text x="98.0814%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.10%)</title><rect x="97.8314%" y="629" width="0.1049%" height="15" fill="rgb(216,44,31)" fg:x="2797" fg:w="3"/><text x="98.0814%" y="639.50"></text></g><g><title>core::intrinsics::copy (18 samples, 0.63%)</title><rect x="98.1462%" y="645" width="0.6296%" height="15" fill="rgb(253,87,21)" fg:x="2806" fg:w="18"/><text x="98.3962%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (16 samples, 0.56%)</title><rect x="98.2162%" y="629" width="0.5596%" height="15" fill="rgb(226,18,2)" fg:x="2808" fg:w="16"/><text x="98.4662%" y="639.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (4 samples, 0.14%)</title><rect x="98.7758%" y="645" width="0.1399%" height="15" fill="rgb(216,8,46)" fg:x="2824" fg:w="4"/><text x="99.0258%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (25 samples, 0.87%)</title><rect x="98.0763%" y="677" width="0.8744%" height="15" fill="rgb(226,140,39)" fg:x="2804" fg:w="25"/><text x="98.3263%" y="687.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (23 samples, 0.80%)</title><rect x="98.1462%" y="661" width="0.8045%" height="15" fill="rgb(221,194,54)" fg:x="2806" fg:w="23"/><text x="98.3962%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="98.9157%" y="645" width="0.0350%" height="15" fill="rgb(213,92,11)" fg:x="2828" fg:w="1"/><text x="99.1657%" y="655.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::split_leaf_data (1 samples, 0.03%)</title><rect x="98.9857%" y="661" width="0.0350%" height="15" fill="rgb(229,162,46)" fg:x="2830" fg:w="1"/><text x="99.2357%" y="671.50"></text></g><g><title>alloc::collections::btree::node::move_to_slice (1 samples, 0.03%)</title><rect x="98.9857%" y="645" width="0.0350%" height="15" fill="rgb(214,111,36)" fg:x="2830" fg:w="1"/><text x="99.2357%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.03%)</title><rect x="98.9857%" y="629" width="0.0350%" height="15" fill="rgb(207,6,21)" fg:x="2830" fg:w="1"/><text x="99.2357%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="98.9857%" y="613" width="0.0350%" height="15" fill="rgb(213,127,38)" fg:x="2830" fg:w="1"/><text x="99.2357%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::KV&gt;::split (4 samples, 0.14%)</title><rect x="98.9507%" y="677" width="0.1399%" height="15" fill="rgb(238,118,32)" fg:x="2829" fg:w="4"/><text x="99.2007%" y="687.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (2 samples, 0.07%)</title><rect x="99.0206%" y="661" width="0.0700%" height="15" fill="rgb(240,139,39)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.07%)</title><rect x="99.0206%" y="645" width="0.0700%" height="15" fill="rgb(235,10,37)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.07%)</title><rect x="99.0206%" y="629" width="0.0700%" height="15" fill="rgb(249,171,38)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.07%)</title><rect x="99.0206%" y="613" width="0.0700%" height="15" fill="rgb(242,144,32)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.07%)</title><rect x="99.0206%" y="597" width="0.0700%" height="15" fill="rgb(217,117,21)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="607.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.07%)</title><rect x="99.0206%" y="581" width="0.0700%" height="15" fill="rgb(249,87,1)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="591.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.07%)</title><rect x="99.0206%" y="565" width="0.0700%" height="15" fill="rgb(248,196,48)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="575.50"></text></g><g><title>tcache_get (2 samples, 0.07%)</title><rect x="99.0206%" y="549" width="0.0700%" height="15" fill="rgb(251,206,33)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="559.50"></text></g><g><title>tcache_get_n (2 samples, 0.07%)</title><rect x="99.0206%" y="533" width="0.0700%" height="15" fill="rgb(232,141,28)" fg:x="2831" fg:w="2"/><text x="99.2706%" y="543.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (41 samples, 1.43%)</title><rect x="97.6915%" y="709" width="1.4341%" height="15" fill="rgb(209,167,14)" fg:x="2793" fg:w="41"/><text x="97.9415%" y="719.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (34 samples, 1.19%)</title><rect x="97.9363%" y="693" width="1.1892%" height="15" fill="rgb(225,11,50)" fg:x="2800" fg:w="34"/><text x="98.1863%" y="703.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (1 samples, 0.03%)</title><rect x="99.0906%" y="677" width="0.0350%" height="15" fill="rgb(209,50,20)" fg:x="2833" fg:w="1"/><text x="99.3406%" y="687.50"></text></g><g><title>_start (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1381" width="88.7373%" height="15" fill="rgb(212,17,46)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1391.50">_start</text></g><g><title>__libc_start_main_impl (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1365" width="88.7373%" height="15" fill="rgb(216,101,39)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1375.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1349" width="88.7373%" height="15" fill="rgb(212,228,48)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1359.50">__libc_start_call_main</text></g><g><title>main (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1333" width="88.7373%" height="15" fill="rgb(250,6,50)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1343.50">main</text></g><g><title>std::rt::lang_start_internal (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1317" width="88.7373%" height="15" fill="rgb(250,160,48)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1327.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1301" width="88.7373%" height="15" fill="rgb(244,216,33)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1285" width="88.7373%" height="15" fill="rgb(207,157,5)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1295.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1269" width="88.7373%" height="15" fill="rgb(228,199,8)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1279.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1253" width="88.7373%" height="15" fill="rgb(227,80,20)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1263.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1237" width="88.7373%" height="15" fill="rgb(222,9,33)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1247.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1221" width="88.7373%" height="15" fill="rgb(239,44,28)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1231.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1205" width="88.7373%" height="15" fill="rgb(249,187,43)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1215.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1189" width="88.7373%" height="15" fill="rgb(216,141,28)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1199.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1173" width="88.7373%" height="15" fill="rgb(230,154,53)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1183.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1157" width="88.7373%" height="15" fill="rgb(227,82,4)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1167.50">std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1141" width="88.7373%" height="15" fill="rgb(220,107,16)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1151.50">core::ops::function::FnOnce::call_once</text></g><g><title>storage_bench::main (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1125" width="88.7373%" height="15" fill="rgb(207,187,2)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1135.50">storage_bench::main</text></g><g><title>storage_bench::benches (2,537 samples, 88.74%)</title><rect x="10.4232%" y="1109" width="88.7373%" height="15" fill="rgb(210,162,52)" fg:x="298" fg:w="2537"/><text x="10.6732%" y="1119.50">storage_bench::benches</text></g><g><title>storage_bench::real_data_data_bench (1,616 samples, 56.52%)</title><rect x="42.6373%" y="1093" width="56.5233%" height="15" fill="rgb(217,216,49)" fg:x="1219" fg:w="1616"/><text x="42.8873%" y="1103.50">storage_bench::real_data_data_bench</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (1,600 samples, 55.96%)</title><rect x="43.1969%" y="1077" width="55.9636%" height="15" fill="rgb(218,146,49)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="1087.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (1,600 samples, 55.96%)</title><rect x="43.1969%" y="1061" width="55.9636%" height="15" fill="rgb(216,55,40)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="1071.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (1,600 samples, 55.96%)</title><rect x="43.1969%" y="1045" width="55.9636%" height="15" fill="rgb(208,196,21)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="1055.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::test (1,600 samples, 55.96%)</title><rect x="43.1969%" y="1029" width="55.9636%" height="15" fill="rgb(242,117,42)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="1039.50">criterion::routine::Routine::test</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (1,600 samples, 55.96%)</title><rect x="43.1969%" y="1013" width="55.9636%" height="15" fill="rgb(210,11,23)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="1023.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,600 samples, 55.96%)</title><rect x="43.1969%" y="997" width="55.9636%" height="15" fill="rgb(217,110,2)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="1007.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,600 samples, 55.96%)</title><rect x="43.1969%" y="981" width="55.9636%" height="15" fill="rgb(229,77,54)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="991.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,600 samples, 55.96%)</title><rect x="43.1969%" y="965" width="55.9636%" height="15" fill="rgb(218,53,16)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="975.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,600 samples, 55.96%)</title><rect x="43.1969%" y="949" width="55.9636%" height="15" fill="rgb(215,38,13)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="959.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,600 samples, 55.96%)</title><rect x="43.1969%" y="933" width="55.9636%" height="15" fill="rgb(235,42,18)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="943.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (1,600 samples, 55.96%)</title><rect x="43.1969%" y="917" width="55.9636%" height="15" fill="rgb(219,66,54)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="927.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,600 samples, 55.96%)</title><rect x="43.1969%" y="901" width="55.9636%" height="15" fill="rgb(222,205,4)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="911.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,600 samples, 55.96%)</title><rect x="43.1969%" y="885" width="55.9636%" height="15" fill="rgb(227,213,46)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="895.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,600 samples, 55.96%)</title><rect x="43.1969%" y="869" width="55.9636%" height="15" fill="rgb(250,145,42)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="879.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (1,600 samples, 55.96%)</title><rect x="43.1969%" y="853" width="55.9636%" height="15" fill="rgb(219,15,2)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="863.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure}} (1,600 samples, 55.96%)</title><rect x="43.1969%" y="837" width="55.9636%" height="15" fill="rgb(231,181,52)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="847.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::_{{closure..</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}} (1,600 samples, 55.96%)</title><rect x="43.1969%" y="821" width="55.9636%" height="15" fill="rgb(235,1,42)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="831.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::_{{closure}}</text></g><g><title>storage_bench::real_data_data_bench::_{{closure}} (1,600 samples, 55.96%)</title><rect x="43.1969%" y="805" width="55.9636%" height="15" fill="rgb(249,88,27)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="815.50">storage_bench::real_data_data_bench::_{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (1,600 samples, 55.96%)</title><rect x="43.1969%" y="789" width="55.9636%" height="15" fill="rgb(235,145,16)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="799.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>storage_bench::real_data_data_bench::_{{closure}}::_{{closure}} (1,600 samples, 55.96%)</title><rect x="43.1969%" y="773" width="55.9636%" height="15" fill="rgb(237,114,19)" fg:x="1235" fg:w="1600"/><text x="43.4469%" y="783.50">storage_bench::real_data_data_bench::_{{closure}}::_{{closure}}</text></g><g><title>serde_json::map::Map&lt;alloc::string::String,serde_json::value::Value&gt;::insert (193 samples, 6.75%)</title><rect x="92.4099%" y="757" width="6.7506%" height="15" fill="rgb(238,51,50)" fg:x="2642" fg:w="193"/><text x="92.6599%" y="767.50">serde_jso..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (193 samples, 6.75%)</title><rect x="92.4099%" y="741" width="6.7506%" height="15" fill="rgb(205,194,25)" fg:x="2642" fg:w="193"/><text x="92.6599%" y="751.50">alloc::co..</text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (70 samples, 2.45%)</title><rect x="96.7121%" y="725" width="2.4484%" height="15" fill="rgb(215,203,17)" fg:x="2765" fg:w="70"/><text x="96.9621%" y="735.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.03%)</title><rect x="99.1256%" y="709" width="0.0350%" height="15" fill="rgb(233,112,49)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="719.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.03%)</title><rect x="99.1256%" y="693" width="0.0350%" height="15" fill="rgb(241,130,26)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.03%)</title><rect x="99.1256%" y="677" width="0.0350%" height="15" fill="rgb(252,223,19)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.03%)</title><rect x="99.1256%" y="661" width="0.0350%" height="15" fill="rgb(211,95,25)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.03%)</title><rect x="99.1256%" y="645" width="0.0350%" height="15" fill="rgb(251,182,27)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.03%)</title><rect x="99.1256%" y="629" width="0.0350%" height="15" fill="rgb(238,24,4)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="639.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.03%)</title><rect x="99.1256%" y="613" width="0.0350%" height="15" fill="rgb(224,220,25)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="99.1256%" y="597" width="0.0350%" height="15" fill="rgb(239,133,26)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="607.50"></text></g><g><title>tcache_get (1 samples, 0.03%)</title><rect x="99.1256%" y="581" width="0.0350%" height="15" fill="rgb(211,94,48)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="591.50"></text></g><g><title>tcache_get_n (1 samples, 0.03%)</title><rect x="99.1256%" y="565" width="0.0350%" height="15" fill="rgb(239,87,6)" fg:x="2834" fg:w="1"/><text x="99.3756%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1 samples, 0.03%)</title><rect x="99.1605%" y="1381" width="0.0350%" height="15" fill="rgb(227,62,0)" fg:x="2835" fg:w="1"/><text x="99.4105%" y="1391.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.03%)</title><rect x="99.1955%" y="1381" width="0.0350%" height="15" fill="rgb(211,226,4)" fg:x="2836" fg:w="1"/><text x="99.4455%" y="1391.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.03%)</title><rect x="99.2305%" y="1381" width="0.0350%" height="15" fill="rgb(253,38,52)" fg:x="2837" fg:w="1"/><text x="99.4805%" y="1391.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.03%)</title><rect x="99.2305%" y="1365" width="0.0350%" height="15" fill="rgb(229,126,40)" fg:x="2837" fg:w="1"/><text x="99.4805%" y="1375.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_fit (1 samples, 0.03%)</title><rect x="99.2305%" y="1349" width="0.0350%" height="15" fill="rgb(229,165,44)" fg:x="2837" fg:w="1"/><text x="99.4805%" y="1359.50"></text></g><g><title>alloc::collections::btree::node::slice_insert (1 samples, 0.03%)</title><rect x="99.2305%" y="1333" width="0.0350%" height="15" fill="rgb(247,95,47)" fg:x="2837" fg:w="1"/><text x="99.4805%" y="1343.50"></text></g><g><title>core::intrinsics::copy (1 samples, 0.03%)</title><rect x="99.2305%" y="1317" width="0.0350%" height="15" fill="rgb(216,140,30)" fg:x="2837" fg:w="1"/><text x="99.4805%" y="1327.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.03%)</title><rect x="99.2655%" y="1381" width="0.0350%" height="15" fill="rgb(246,214,8)" fg:x="2838" fg:w="1"/><text x="99.5155%" y="1391.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="99.2655%" y="1365" width="0.0350%" height="15" fill="rgb(227,224,15)" fg:x="2838" fg:w="1"/><text x="99.5155%" y="1375.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.03%)</title><rect x="99.2655%" y="1349" width="0.0350%" height="15" fill="rgb(233,175,4)" fg:x="2838" fg:w="1"/><text x="99.5155%" y="1359.50"></text></g><g><title>asm_exc_page_fault (9 samples, 0.31%)</title><rect x="99.3005%" y="1381" width="0.3148%" height="15" fill="rgb(221,66,45)" fg:x="2839" fg:w="9"/><text x="99.5505%" y="1391.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="99.6153%" y="1381" width="0.0350%" height="15" fill="rgb(221,178,18)" fg:x="2848" fg:w="1"/><text x="99.8653%" y="1391.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="99.6502%" y="1333" width="0.0350%" height="15" fill="rgb(213,81,29)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1343.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="99.6502%" y="1317" width="0.0350%" height="15" fill="rgb(220,89,49)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1327.50"></text></g><g><title>bprm_execve (1 samples, 0.03%)</title><rect x="99.6502%" y="1301" width="0.0350%" height="15" fill="rgb(227,60,33)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1311.50"></text></g><g><title>bprm_execve.part.0 (1 samples, 0.03%)</title><rect x="99.6502%" y="1285" width="0.0350%" height="15" fill="rgb(205,113,12)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1295.50"></text></g><g><title>exec_binprm (1 samples, 0.03%)</title><rect x="99.6502%" y="1269" width="0.0350%" height="15" fill="rgb(211,32,1)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1279.50"></text></g><g><title>search_binary_handler (1 samples, 0.03%)</title><rect x="99.6502%" y="1253" width="0.0350%" height="15" fill="rgb(246,2,12)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1263.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="99.6502%" y="1237" width="0.0350%" height="15" fill="rgb(243,37,27)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1247.50"></text></g><g><title>setup_arg_pages (1 samples, 0.03%)</title><rect x="99.6502%" y="1221" width="0.0350%" height="15" fill="rgb(248,211,31)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1231.50"></text></g><g><title>shift_arg_pages (1 samples, 0.03%)</title><rect x="99.6502%" y="1205" width="0.0350%" height="15" fill="rgb(242,146,47)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1215.50"></text></g><g><title>move_page_tables (1 samples, 0.03%)</title><rect x="99.6502%" y="1189" width="0.0350%" height="15" fill="rgb(206,70,20)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1199.50"></text></g><g><title>pte_alloc_one (1 samples, 0.03%)</title><rect x="99.6502%" y="1173" width="0.0350%" height="15" fill="rgb(215,10,51)" fg:x="2849" fg:w="1"/><text x="99.9002%" y="1183.50"></text></g><g><title>_compound_head (1 samples, 0.03%)</title><rect x="99.6852%" y="1157" width="0.0350%" height="15" fill="rgb(243,178,53)" fg:x="2850" fg:w="1"/><text x="99.9352%" y="1167.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.10%)</title><rect x="99.6502%" y="1381" width="0.1049%" height="15" fill="rgb(233,221,20)" fg:x="2849" fg:w="3"/><text x="99.9002%" y="1391.50"></text></g><g><title>do_syscall_64 (3 samples, 0.10%)</title><rect x="99.6502%" y="1365" width="0.1049%" height="15" fill="rgb(218,95,35)" fg:x="2849" fg:w="3"/><text x="99.9002%" y="1375.50"></text></g><g><title>x64_sys_call (3 samples, 0.10%)</title><rect x="99.6502%" y="1349" width="0.1049%" height="15" fill="rgb(229,13,5)" fg:x="2849" fg:w="3"/><text x="99.9002%" y="1359.50"></text></g><g><title>__x64_sys_exit_group (2 samples, 0.07%)</title><rect x="99.6852%" y="1333" width="0.0700%" height="15" fill="rgb(252,164,30)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1343.50"></text></g><g><title>do_group_exit (2 samples, 0.07%)</title><rect x="99.6852%" y="1317" width="0.0700%" height="15" fill="rgb(232,68,36)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1327.50"></text></g><g><title>do_exit (2 samples, 0.07%)</title><rect x="99.6852%" y="1301" width="0.0700%" height="15" fill="rgb(219,59,54)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1311.50"></text></g><g><title>exit_mm (2 samples, 0.07%)</title><rect x="99.6852%" y="1285" width="0.0700%" height="15" fill="rgb(250,92,33)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1295.50"></text></g><g><title>mmput (2 samples, 0.07%)</title><rect x="99.6852%" y="1269" width="0.0700%" height="15" fill="rgb(229,162,54)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1279.50"></text></g><g><title>__mmput (2 samples, 0.07%)</title><rect x="99.6852%" y="1253" width="0.0700%" height="15" fill="rgb(244,114,52)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1263.50"></text></g><g><title>exit_mmap (2 samples, 0.07%)</title><rect x="99.6852%" y="1237" width="0.0700%" height="15" fill="rgb(212,211,43)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1247.50"></text></g><g><title>unmap_vmas (2 samples, 0.07%)</title><rect x="99.6852%" y="1221" width="0.0700%" height="15" fill="rgb(226,147,8)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1231.50"></text></g><g><title>unmap_single_vma (2 samples, 0.07%)</title><rect x="99.6852%" y="1205" width="0.0700%" height="15" fill="rgb(226,23,13)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1215.50"></text></g><g><title>unmap_page_range (2 samples, 0.07%)</title><rect x="99.6852%" y="1189" width="0.0700%" height="15" fill="rgb(240,63,4)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1199.50"></text></g><g><title>zap_pmd_range.isra.0 (2 samples, 0.07%)</title><rect x="99.6852%" y="1173" width="0.0700%" height="15" fill="rgb(221,1,32)" fg:x="2850" fg:w="2"/><text x="99.9352%" y="1183.50"></text></g><g><title>zap_pte_range (1 samples, 0.03%)</title><rect x="99.7202%" y="1157" width="0.0350%" height="15" fill="rgb(242,117,10)" fg:x="2851" fg:w="1"/><text x="99.9702%" y="1167.50"></text></g><g><title>tlb_flush_mmu (1 samples, 0.03%)</title><rect x="99.7202%" y="1141" width="0.0350%" height="15" fill="rgb(249,172,44)" fg:x="2851" fg:w="1"/><text x="99.9702%" y="1151.50"></text></g><g><title>tlb_batch_pages_flush (1 samples, 0.03%)</title><rect x="99.7202%" y="1125" width="0.0350%" height="15" fill="rgb(244,46,45)" fg:x="2851" fg:w="1"/><text x="99.9702%" y="1135.50"></text></g><g><title>free_pages_and_swap_cache (1 samples, 0.03%)</title><rect x="99.7202%" y="1109" width="0.0350%" height="15" fill="rgb(206,43,17)" fg:x="2851" fg:w="1"/><text x="99.9702%" y="1119.50"></text></g><g><title>release_pages (1 samples, 0.03%)</title><rect x="99.7202%" y="1093" width="0.0350%" height="15" fill="rgb(239,218,39)" fg:x="2851" fg:w="1"/><text x="99.9702%" y="1103.50"></text></g><g><title>__mem_cgroup_uncharge_list (1 samples, 0.03%)</title><rect x="99.7202%" y="1077" width="0.0350%" height="15" fill="rgb(208,169,54)" fg:x="2851" fg:w="1"/><text x="99.9702%" y="1087.50"></text></g><g><title>uncharge_folio (1 samples, 0.03%)</title><rect x="99.7202%" y="1061" width="0.0350%" height="15" fill="rgb(247,25,42)" fg:x="2851" fg:w="1"/><text x="99.9702%" y="1071.50"></text></g><g><title>mmap_payload_storage::page_tracker::PageTracker::persist_pointer (1 samples, 0.03%)</title><rect x="99.7552%" y="1381" width="0.0350%" height="15" fill="rgb(226,23,31)" fg:x="2852" fg:w="1"/><text x="100.0052%" y="1391.50"></text></g><g><title>schedule_tail (4 samples, 0.14%)</title><rect x="99.7901%" y="1349" width="0.1399%" height="15" fill="rgb(247,16,28)" fg:x="2853" fg:w="4"/><text x="100.0401%" y="1359.50"></text></g><g><title>finish_task_switch.isra.0 (4 samples, 0.14%)</title><rect x="99.7901%" y="1333" width="0.1399%" height="15" fill="rgb(231,147,38)" fg:x="2853" fg:w="4"/><text x="100.0401%" y="1343.50"></text></g><g><title>__perf_event_task_sched_in (4 samples, 0.14%)</title><rect x="99.7901%" y="1317" width="0.1399%" height="15" fill="rgb(253,81,48)" fg:x="2853" fg:w="4"/><text x="100.0401%" y="1327.50"></text></g><g><title>perf_ctx_enable (4 samples, 0.14%)</title><rect x="99.7901%" y="1301" width="0.1399%" height="15" fill="rgb(249,222,43)" fg:x="2853" fg:w="4"/><text x="100.0401%" y="1311.50"></text></g><g><title>x86_pmu_enable (4 samples, 0.14%)</title><rect x="99.7901%" y="1285" width="0.1399%" height="15" fill="rgb(221,3,27)" fg:x="2853" fg:w="4"/><text x="100.0401%" y="1295.50"></text></g><g><title>intel_pmu_enable_all (4 samples, 0.14%)</title><rect x="99.7901%" y="1269" width="0.1399%" height="15" fill="rgb(228,180,5)" fg:x="2853" fg:w="4"/><text x="100.0401%" y="1279.50"></text></g><g><title>native_write_msr (4 samples, 0.14%)</title><rect x="99.7901%" y="1253" width="0.1399%" height="15" fill="rgb(227,131,42)" fg:x="2853" fg:w="4"/><text x="100.0401%" y="1263.50"></text></g><g><title>ret_from_fork_asm (5 samples, 0.17%)</title><rect x="99.7901%" y="1381" width="0.1749%" height="15" fill="rgb(212,3,39)" fg:x="2853" fg:w="5"/><text x="100.0401%" y="1391.50"></text></g><g><title>ret_from_fork (5 samples, 0.17%)</title><rect x="99.7901%" y="1365" width="0.1749%" height="15" fill="rgb(226,45,5)" fg:x="2853" fg:w="5"/><text x="100.0401%" y="1375.50"></text></g><g><title>syscall_exit_to_user_mode (1 samples, 0.03%)</title><rect x="99.9300%" y="1349" width="0.0350%" height="15" fill="rgb(215,167,45)" fg:x="2857" fg:w="1"/><text x="100.1800%" y="1359.50"></text></g><g><title>all (2,859 samples, 100%)</title><rect x="0.0000%" y="1413" width="100.0000%" height="15" fill="rgb(250,218,53)" fg:x="0" fg:w="2859"/><text x="0.2500%" y="1423.50"></text></g><g><title>storage_bench-7 (2,847 samples, 99.58%)</title><rect x="0.4197%" y="1397" width="99.5803%" height="15" fill="rgb(207,140,0)" fg:x="12" fg:w="2847"/><text x="0.6697%" y="1407.50">storage_bench-7</text></g><g><title>serde_cbor::de::Deserializer&lt;R&gt;::parse_value (1 samples, 0.03%)</title><rect x="99.9650%" y="1381" width="0.0350%" height="15" fill="rgb(238,133,51)" fg:x="2858" fg:w="1"/><text x="100.2150%" y="1391.50"></text></g></svg></svg>